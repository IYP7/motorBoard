
motorBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000368c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800385c  0800385c  0001385c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003894  08003894  00013894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800389c  0800389c  0001389c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080038a0  080038a0  000138a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  080038a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004a98  20000010  080038b4  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20004aa8  080038b4  00024aa8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ce70  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003993  00000000  00000000  0003ceb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000dc15  00000000  00000000  00040843  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000010e8  00000000  00000000  0004e458  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001600  00000000  00000000  0004f540  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000091cc  00000000  00000000  00050b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000074bb  00000000  00000000  00059d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000611c7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000332c  00000000  00000000  00061244  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003844 	.word	0x08003844

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08003844 	.word	0x08003844

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b97a 	b.w	800051c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	468c      	mov	ip, r1
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	9e08      	ldr	r6, [sp, #32]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d151      	bne.n	80002f4 <__udivmoddi4+0xb4>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d96d      	bls.n	8000332 <__udivmoddi4+0xf2>
 8000256:	fab2 fe82 	clz	lr, r2
 800025a:	f1be 0f00 	cmp.w	lr, #0
 800025e:	d00b      	beq.n	8000278 <__udivmoddi4+0x38>
 8000260:	f1ce 0c20 	rsb	ip, lr, #32
 8000264:	fa01 f50e 	lsl.w	r5, r1, lr
 8000268:	fa20 fc0c 	lsr.w	ip, r0, ip
 800026c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000270:	ea4c 0c05 	orr.w	ip, ip, r5
 8000274:	fa00 f40e 	lsl.w	r4, r0, lr
 8000278:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800027c:	0c25      	lsrs	r5, r4, #16
 800027e:	fbbc f8fa 	udiv	r8, ip, sl
 8000282:	fa1f f987 	uxth.w	r9, r7
 8000286:	fb0a cc18 	mls	ip, sl, r8, ip
 800028a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800028e:	fb08 f309 	mul.w	r3, r8, r9
 8000292:	42ab      	cmp	r3, r5
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x6c>
 8000296:	19ed      	adds	r5, r5, r7
 8000298:	f108 32ff 	add.w	r2, r8, #4294967295
 800029c:	f080 8123 	bcs.w	80004e6 <__udivmoddi4+0x2a6>
 80002a0:	42ab      	cmp	r3, r5
 80002a2:	f240 8120 	bls.w	80004e6 <__udivmoddi4+0x2a6>
 80002a6:	f1a8 0802 	sub.w	r8, r8, #2
 80002aa:	443d      	add	r5, r7
 80002ac:	1aed      	subs	r5, r5, r3
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb5 f0fa 	udiv	r0, r5, sl
 80002b4:	fb0a 5510 	mls	r5, sl, r0, r5
 80002b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002bc:	fb00 f909 	mul.w	r9, r0, r9
 80002c0:	45a1      	cmp	r9, r4
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x98>
 80002c4:	19e4      	adds	r4, r4, r7
 80002c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ca:	f080 810a 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80002ce:	45a1      	cmp	r9, r4
 80002d0:	f240 8107 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80002d4:	3802      	subs	r0, #2
 80002d6:	443c      	add	r4, r7
 80002d8:	eba4 0409 	sub.w	r4, r4, r9
 80002dc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002e0:	2100      	movs	r1, #0
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d061      	beq.n	80003aa <__udivmoddi4+0x16a>
 80002e6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ea:	2300      	movs	r3, #0
 80002ec:	6034      	str	r4, [r6, #0]
 80002ee:	6073      	str	r3, [r6, #4]
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0xc8>
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d054      	beq.n	80003a6 <__udivmoddi4+0x166>
 80002fc:	2100      	movs	r1, #0
 80002fe:	e886 0021 	stmia.w	r6, {r0, r5}
 8000302:	4608      	mov	r0, r1
 8000304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000308:	fab3 f183 	clz	r1, r3
 800030c:	2900      	cmp	r1, #0
 800030e:	f040 808e 	bne.w	800042e <__udivmoddi4+0x1ee>
 8000312:	42ab      	cmp	r3, r5
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xdc>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80fa 	bhi.w	8000510 <__udivmoddi4+0x2d0>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb65 0503 	sbc.w	r5, r5, r3
 8000322:	2001      	movs	r0, #1
 8000324:	46ac      	mov	ip, r5
 8000326:	2e00      	cmp	r6, #0
 8000328:	d03f      	beq.n	80003aa <__udivmoddi4+0x16a>
 800032a:	e886 1010 	stmia.w	r6, {r4, ip}
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	b912      	cbnz	r2, 800033a <__udivmoddi4+0xfa>
 8000334:	2701      	movs	r7, #1
 8000336:	fbb7 f7f2 	udiv	r7, r7, r2
 800033a:	fab7 fe87 	clz	lr, r7
 800033e:	f1be 0f00 	cmp.w	lr, #0
 8000342:	d134      	bne.n	80003ae <__udivmoddi4+0x16e>
 8000344:	1beb      	subs	r3, r5, r7
 8000346:	0c3a      	lsrs	r2, r7, #16
 8000348:	fa1f fc87 	uxth.w	ip, r7
 800034c:	2101      	movs	r1, #1
 800034e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000352:	0c25      	lsrs	r5, r4, #16
 8000354:	fb02 3318 	mls	r3, r2, r8, r3
 8000358:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800035c:	fb0c f308 	mul.w	r3, ip, r8
 8000360:	42ab      	cmp	r3, r5
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x134>
 8000364:	19ed      	adds	r5, r5, r7
 8000366:	f108 30ff 	add.w	r0, r8, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x132>
 800036c:	42ab      	cmp	r3, r5
 800036e:	f200 80d1 	bhi.w	8000514 <__udivmoddi4+0x2d4>
 8000372:	4680      	mov	r8, r0
 8000374:	1aed      	subs	r5, r5, r3
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb5 f0f2 	udiv	r0, r5, r2
 800037c:	fb02 5510 	mls	r5, r2, r0, r5
 8000380:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000384:	fb0c fc00 	mul.w	ip, ip, r0
 8000388:	45a4      	cmp	ip, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x15c>
 800038c:	19e4      	adds	r4, r4, r7
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x15a>
 8000394:	45a4      	cmp	ip, r4
 8000396:	f200 80b8 	bhi.w	800050a <__udivmoddi4+0x2ca>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 040c 	sub.w	r4, r4, ip
 80003a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a4:	e79d      	b.n	80002e2 <__udivmoddi4+0xa2>
 80003a6:	4631      	mov	r1, r6
 80003a8:	4630      	mov	r0, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	f1ce 0420 	rsb	r4, lr, #32
 80003b2:	fa05 f30e 	lsl.w	r3, r5, lr
 80003b6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ba:	fa20 f804 	lsr.w	r8, r0, r4
 80003be:	0c3a      	lsrs	r2, r7, #16
 80003c0:	fa25 f404 	lsr.w	r4, r5, r4
 80003c4:	ea48 0803 	orr.w	r8, r8, r3
 80003c8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003cc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003d0:	fb02 4411 	mls	r4, r2, r1, r4
 80003d4:	fa1f fc87 	uxth.w	ip, r7
 80003d8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003dc:	fb01 f30c 	mul.w	r3, r1, ip
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003e6:	d909      	bls.n	80003fc <__udivmoddi4+0x1bc>
 80003e8:	19ed      	adds	r5, r5, r7
 80003ea:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ee:	f080 808a 	bcs.w	8000506 <__udivmoddi4+0x2c6>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	f240 8087 	bls.w	8000506 <__udivmoddi4+0x2c6>
 80003f8:	3902      	subs	r1, #2
 80003fa:	443d      	add	r5, r7
 80003fc:	1aeb      	subs	r3, r5, r3
 80003fe:	fa1f f588 	uxth.w	r5, r8
 8000402:	fbb3 f0f2 	udiv	r0, r3, r2
 8000406:	fb02 3310 	mls	r3, r2, r0, r3
 800040a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800040e:	fb00 f30c 	mul.w	r3, r0, ip
 8000412:	42ab      	cmp	r3, r5
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x1e6>
 8000416:	19ed      	adds	r5, r5, r7
 8000418:	f100 38ff 	add.w	r8, r0, #4294967295
 800041c:	d26f      	bcs.n	80004fe <__udivmoddi4+0x2be>
 800041e:	42ab      	cmp	r3, r5
 8000420:	d96d      	bls.n	80004fe <__udivmoddi4+0x2be>
 8000422:	3802      	subs	r0, #2
 8000424:	443d      	add	r5, r7
 8000426:	1aeb      	subs	r3, r5, r3
 8000428:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042c:	e78f      	b.n	800034e <__udivmoddi4+0x10e>
 800042e:	f1c1 0720 	rsb	r7, r1, #32
 8000432:	fa22 f807 	lsr.w	r8, r2, r7
 8000436:	408b      	lsls	r3, r1
 8000438:	fa05 f401 	lsl.w	r4, r5, r1
 800043c:	ea48 0303 	orr.w	r3, r8, r3
 8000440:	fa20 fe07 	lsr.w	lr, r0, r7
 8000444:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000448:	40fd      	lsrs	r5, r7
 800044a:	ea4e 0e04 	orr.w	lr, lr, r4
 800044e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000452:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000456:	fb0c 5519 	mls	r5, ip, r9, r5
 800045a:	fa1f f883 	uxth.w	r8, r3
 800045e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000462:	fb09 f408 	mul.w	r4, r9, r8
 8000466:	42ac      	cmp	r4, r5
 8000468:	fa02 f201 	lsl.w	r2, r2, r1
 800046c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x244>
 8000472:	18ed      	adds	r5, r5, r3
 8000474:	f109 30ff 	add.w	r0, r9, #4294967295
 8000478:	d243      	bcs.n	8000502 <__udivmoddi4+0x2c2>
 800047a:	42ac      	cmp	r4, r5
 800047c:	d941      	bls.n	8000502 <__udivmoddi4+0x2c2>
 800047e:	f1a9 0902 	sub.w	r9, r9, #2
 8000482:	441d      	add	r5, r3
 8000484:	1b2d      	subs	r5, r5, r4
 8000486:	fa1f fe8e 	uxth.w	lr, lr
 800048a:	fbb5 f0fc 	udiv	r0, r5, ip
 800048e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000492:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000496:	fb00 f808 	mul.w	r8, r0, r8
 800049a:	45a0      	cmp	r8, r4
 800049c:	d907      	bls.n	80004ae <__udivmoddi4+0x26e>
 800049e:	18e4      	adds	r4, r4, r3
 80004a0:	f100 35ff 	add.w	r5, r0, #4294967295
 80004a4:	d229      	bcs.n	80004fa <__udivmoddi4+0x2ba>
 80004a6:	45a0      	cmp	r8, r4
 80004a8:	d927      	bls.n	80004fa <__udivmoddi4+0x2ba>
 80004aa:	3802      	subs	r0, #2
 80004ac:	441c      	add	r4, r3
 80004ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b2:	eba4 0408 	sub.w	r4, r4, r8
 80004b6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ba:	454c      	cmp	r4, r9
 80004bc:	46c6      	mov	lr, r8
 80004be:	464d      	mov	r5, r9
 80004c0:	d315      	bcc.n	80004ee <__udivmoddi4+0x2ae>
 80004c2:	d012      	beq.n	80004ea <__udivmoddi4+0x2aa>
 80004c4:	b156      	cbz	r6, 80004dc <__udivmoddi4+0x29c>
 80004c6:	ebba 030e 	subs.w	r3, sl, lr
 80004ca:	eb64 0405 	sbc.w	r4, r4, r5
 80004ce:	fa04 f707 	lsl.w	r7, r4, r7
 80004d2:	40cb      	lsrs	r3, r1
 80004d4:	431f      	orrs	r7, r3
 80004d6:	40cc      	lsrs	r4, r1
 80004d8:	6037      	str	r7, [r6, #0]
 80004da:	6074      	str	r4, [r6, #4]
 80004dc:	2100      	movs	r1, #0
 80004de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e2:	4618      	mov	r0, r3
 80004e4:	e6f8      	b.n	80002d8 <__udivmoddi4+0x98>
 80004e6:	4690      	mov	r8, r2
 80004e8:	e6e0      	b.n	80002ac <__udivmoddi4+0x6c>
 80004ea:	45c2      	cmp	sl, r8
 80004ec:	d2ea      	bcs.n	80004c4 <__udivmoddi4+0x284>
 80004ee:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f2:	eb69 0503 	sbc.w	r5, r9, r3
 80004f6:	3801      	subs	r0, #1
 80004f8:	e7e4      	b.n	80004c4 <__udivmoddi4+0x284>
 80004fa:	4628      	mov	r0, r5
 80004fc:	e7d7      	b.n	80004ae <__udivmoddi4+0x26e>
 80004fe:	4640      	mov	r0, r8
 8000500:	e791      	b.n	8000426 <__udivmoddi4+0x1e6>
 8000502:	4681      	mov	r9, r0
 8000504:	e7be      	b.n	8000484 <__udivmoddi4+0x244>
 8000506:	4601      	mov	r1, r0
 8000508:	e778      	b.n	80003fc <__udivmoddi4+0x1bc>
 800050a:	3802      	subs	r0, #2
 800050c:	443c      	add	r4, r7
 800050e:	e745      	b.n	800039c <__udivmoddi4+0x15c>
 8000510:	4608      	mov	r0, r1
 8000512:	e708      	b.n	8000326 <__udivmoddi4+0xe6>
 8000514:	f1a8 0802 	sub.w	r8, r8, #2
 8000518:	443d      	add	r5, r7
 800051a:	e72b      	b.n	8000374 <__udivmoddi4+0x134>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000520:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000522:	4a0e      	ldr	r2, [pc, #56]	; (800055c <HAL_InitTick+0x3c>)
 8000524:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <HAL_InitTick+0x40>)
{
 8000526:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000528:	7818      	ldrb	r0, [r3, #0]
 800052a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000532:	6810      	ldr	r0, [r2, #0]
 8000534:	fbb0 f0f3 	udiv	r0, r0, r3
 8000538:	f000 fa4c 	bl	80009d4 <HAL_SYSTICK_Config>
 800053c:	4604      	mov	r4, r0
 800053e:	b958      	cbnz	r0, 8000558 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000540:	2d0f      	cmp	r5, #15
 8000542:	d809      	bhi.n	8000558 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000544:	4602      	mov	r2, r0
 8000546:	4629      	mov	r1, r5
 8000548:	f04f 30ff 	mov.w	r0, #4294967295
 800054c:	f000 fa0e 	bl	800096c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000550:	4b04      	ldr	r3, [pc, #16]	; (8000564 <HAL_InitTick+0x44>)
 8000552:	4620      	mov	r0, r4
 8000554:	601d      	str	r5, [r3, #0]
 8000556:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000558:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800055a:	bd38      	pop	{r3, r4, r5, pc}
 800055c:	2000000c 	.word	0x2000000c
 8000560:	20000000 	.word	0x20000000
 8000564:	20000004 	.word	0x20000004

08000568 <HAL_Init>:
{
 8000568:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <HAL_Init+0x30>)
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000572:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800057a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000582:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000584:	2003      	movs	r0, #3
 8000586:	f000 f9df 	bl	8000948 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800058a:	200f      	movs	r0, #15
 800058c:	f7ff ffc8 	bl	8000520 <HAL_InitTick>
  HAL_MspInit();
 8000590:	f002 ff4c 	bl	800342c <HAL_MspInit>
}
 8000594:	2000      	movs	r0, #0
 8000596:	bd08      	pop	{r3, pc}
 8000598:	40023c00 	.word	0x40023c00

0800059c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800059c:	4a03      	ldr	r2, [pc, #12]	; (80005ac <HAL_IncTick+0x10>)
 800059e:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <HAL_IncTick+0x14>)
 80005a0:	6811      	ldr	r1, [r2, #0]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	440b      	add	r3, r1
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	200048f0 	.word	0x200048f0
 80005b0:	20000000 	.word	0x20000000

080005b4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005b4:	4b01      	ldr	r3, [pc, #4]	; (80005bc <HAL_GetTick+0x8>)
 80005b6:	6818      	ldr	r0, [r3, #0]
}
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	200048f0 	.word	0x200048f0

080005c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005c0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005c2:	4604      	mov	r4, r0
 80005c4:	2800      	cmp	r0, #0
 80005c6:	f000 809b 	beq.w	8000700 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80005ca:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80005cc:	b925      	cbnz	r5, 80005d8 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005ce:	f002 ff4f 	bl	8003470 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005d2:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005d4:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005da:	06db      	lsls	r3, r3, #27
 80005dc:	f100 808e 	bmi.w	80006fc <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80005e6:	f023 0302 	bic.w	r3, r3, #2
 80005ea:	f043 0302 	orr.w	r3, r3, #2
 80005ee:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80005f0:	4b44      	ldr	r3, [pc, #272]	; (8000704 <HAL_ADC_Init+0x144>)
 80005f2:	685a      	ldr	r2, [r3, #4]
 80005f4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80005f8:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80005fa:	685a      	ldr	r2, [r3, #4]
 80005fc:	6861      	ldr	r1, [r4, #4]
 80005fe:	430a      	orrs	r2, r1
 8000600:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000602:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000604:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000606:	685a      	ldr	r2, [r3, #4]
 8000608:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800060c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800060e:	685a      	ldr	r2, [r3, #4]
 8000610:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000614:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000616:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000618:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800061a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800061e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000620:	685a      	ldr	r2, [r3, #4]
 8000622:	430a      	orrs	r2, r1
 8000624:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000626:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000628:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800062a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800062e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000630:	689a      	ldr	r2, [r3, #8]
 8000632:	430a      	orrs	r2, r1
 8000634:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000636:	4934      	ldr	r1, [pc, #208]	; (8000708 <HAL_ADC_Init+0x148>)
 8000638:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800063a:	428a      	cmp	r2, r1
 800063c:	d052      	beq.n	80006e4 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800063e:	6899      	ldr	r1, [r3, #8]
 8000640:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000644:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000646:	6899      	ldr	r1, [r3, #8]
 8000648:	430a      	orrs	r2, r1
 800064a:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800064c:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800064e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000650:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000654:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000656:	689a      	ldr	r2, [r3, #8]
 8000658:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800065a:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800065c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800065e:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000660:	f022 0202 	bic.w	r2, r2, #2
 8000664:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000666:	689a      	ldr	r2, [r3, #8]
 8000668:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800066c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800066e:	f894 2020 	ldrb.w	r2, [r4, #32]
 8000672:	2a00      	cmp	r2, #0
 8000674:	d03e      	beq.n	80006f4 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000676:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000678:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800067a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800067e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000680:	685a      	ldr	r2, [r3, #4]
 8000682:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000686:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000688:	685a      	ldr	r2, [r3, #4]
 800068a:	3901      	subs	r1, #1
 800068c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000690:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000694:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000696:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800069a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800069c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800069e:	3901      	subs	r1, #1
 80006a0:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80006a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80006a6:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80006a8:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80006ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80006b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80006b2:	689a      	ldr	r2, [r3, #8]
 80006b4:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80006b8:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80006ba:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006bc:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80006be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80006c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006c4:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80006c6:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006c8:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80006cc:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80006ce:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80006d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006d2:	f023 0303 	bic.w	r3, r3, #3
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80006dc:	2300      	movs	r3, #0
 80006de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80006e2:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006e4:	689a      	ldr	r2, [r3, #8]
 80006e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80006ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006ec:	689a      	ldr	r2, [r3, #8]
 80006ee:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80006f2:	e7b2      	b.n	800065a <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006f4:	685a      	ldr	r2, [r3, #4]
 80006f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006fa:	e7c9      	b.n	8000690 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 80006fc:	2001      	movs	r0, #1
 80006fe:	e7ed      	b.n	80006dc <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8000700:	2001      	movs	r0, #1
}
 8000702:	bd38      	pop	{r3, r4, r5, pc}
 8000704:	40012300 	.word	0x40012300
 8000708:	0f000001 	.word	0x0f000001

0800070c <HAL_ADC_ConfigChannel>:
{
 800070c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 800070e:	2300      	movs	r3, #0
 8000710:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000712:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000716:	2b01      	cmp	r3, #1
 8000718:	d06e      	beq.n	80007f8 <HAL_ADC_ConfigChannel+0xec>
  if (sConfig->Channel > ADC_CHANNEL_9)
 800071a:	680d      	ldr	r5, [r1, #0]
 800071c:	6804      	ldr	r4, [r0, #0]
 800071e:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8000720:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000722:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8000724:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000728:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 800072a:	d92a      	bls.n	8000782 <HAL_ADC_ConfigChannel+0x76>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800072c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8000730:	68e7      	ldr	r7, [r4, #12]
 8000732:	3b1e      	subs	r3, #30
 8000734:	f04f 0e07 	mov.w	lr, #7
 8000738:	fa0e fe03 	lsl.w	lr, lr, r3
 800073c:	ea27 070e 	bic.w	r7, r7, lr
 8000740:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000742:	68e7      	ldr	r7, [r4, #12]
 8000744:	fa02 f303 	lsl.w	r3, r2, r3
 8000748:	433b      	orrs	r3, r7
 800074a:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 800074c:	684a      	ldr	r2, [r1, #4]
 800074e:	2a06      	cmp	r2, #6
 8000750:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8000754:	d825      	bhi.n	80007a2 <HAL_ADC_ConfigChannel+0x96>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000756:	4413      	add	r3, r2
 8000758:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800075a:	1f59      	subs	r1, r3, #5
 800075c:	231f      	movs	r3, #31
 800075e:	408b      	lsls	r3, r1
 8000760:	ea27 0303 	bic.w	r3, r7, r3
 8000764:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000766:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000768:	fa06 f101 	lsl.w	r1, r6, r1
 800076c:	4311      	orrs	r1, r2
 800076e:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000770:	4b32      	ldr	r3, [pc, #200]	; (800083c <HAL_ADC_ConfigChannel+0x130>)
 8000772:	429c      	cmp	r4, r3
 8000774:	d034      	beq.n	80007e0 <HAL_ADC_ConfigChannel+0xd4>
  __HAL_UNLOCK(hadc);
 8000776:	2300      	movs	r3, #0
 8000778:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800077c:	4618      	mov	r0, r3
}
 800077e:	b003      	add	sp, #12
 8000780:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000782:	6927      	ldr	r7, [r4, #16]
 8000784:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000788:	f04f 0e07 	mov.w	lr, #7
 800078c:	fa0e fe03 	lsl.w	lr, lr, r3
 8000790:	ea27 070e 	bic.w	r7, r7, lr
 8000794:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000796:	6927      	ldr	r7, [r4, #16]
 8000798:	fa02 f303 	lsl.w	r3, r2, r3
 800079c:	433b      	orrs	r3, r7
 800079e:	6123      	str	r3, [r4, #16]
 80007a0:	e7d4      	b.n	800074c <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 80007a2:	2a0c      	cmp	r2, #12
 80007a4:	d80e      	bhi.n	80007c4 <HAL_ADC_ConfigChannel+0xb8>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80007a6:	4413      	add	r3, r2
 80007a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80007aa:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80007ae:	231f      	movs	r3, #31
 80007b0:	4093      	lsls	r3, r2
 80007b2:	ea21 0303 	bic.w	r3, r1, r3
 80007b6:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80007b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80007ba:	fa06 f202 	lsl.w	r2, r6, r2
 80007be:	431a      	orrs	r2, r3
 80007c0:	6322      	str	r2, [r4, #48]	; 0x30
 80007c2:	e7d5      	b.n	8000770 <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80007c4:	4413      	add	r3, r2
 80007c6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80007c8:	3b41      	subs	r3, #65	; 0x41
 80007ca:	221f      	movs	r2, #31
 80007cc:	409a      	lsls	r2, r3
 80007ce:	ea21 0202 	bic.w	r2, r1, r2
 80007d2:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80007d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80007d6:	fa06 f103 	lsl.w	r1, r6, r3
 80007da:	4311      	orrs	r1, r2
 80007dc:	62e1      	str	r1, [r4, #44]	; 0x2c
 80007de:	e7c7      	b.n	8000770 <HAL_ADC_ConfigChannel+0x64>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80007e0:	2d12      	cmp	r5, #18
 80007e2:	d10b      	bne.n	80007fc <HAL_ADC_ConfigChannel+0xf0>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80007e4:	4b16      	ldr	r3, [pc, #88]	; (8000840 <HAL_ADC_ConfigChannel+0x134>)
 80007e6:	685a      	ldr	r2, [r3, #4]
 80007e8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80007ec:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80007ee:	685a      	ldr	r2, [r3, #4]
 80007f0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	e7be      	b.n	8000776 <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 80007f8:	2002      	movs	r0, #2
 80007fa:	e7c0      	b.n	800077e <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <HAL_ADC_ConfigChannel+0x138>)
 80007fe:	429d      	cmp	r5, r3
 8000800:	d001      	beq.n	8000806 <HAL_ADC_ConfigChannel+0xfa>
 8000802:	2d11      	cmp	r5, #17
 8000804:	d1b7      	bne.n	8000776 <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <HAL_ADC_ConfigChannel+0x134>)
 8000808:	685a      	ldr	r2, [r3, #4]
 800080a:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800080e:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000810:	685a      	ldr	r2, [r3, #4]
 8000812:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000816:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000818:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <HAL_ADC_ConfigChannel+0x138>)
 800081a:	429d      	cmp	r5, r3
 800081c:	d1ab      	bne.n	8000776 <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800081e:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <HAL_ADC_ConfigChannel+0x13c>)
 8000820:	4a0a      	ldr	r2, [pc, #40]	; (800084c <HAL_ADC_ConfigChannel+0x140>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	fbb3 f2f2 	udiv	r2, r3, r2
 8000828:	230a      	movs	r3, #10
 800082a:	4353      	muls	r3, r2
        counter--;
 800082c:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800082e:	9b01      	ldr	r3, [sp, #4]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d0a0      	beq.n	8000776 <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 8000834:	9b01      	ldr	r3, [sp, #4]
 8000836:	3b01      	subs	r3, #1
 8000838:	e7f8      	b.n	800082c <HAL_ADC_ConfigChannel+0x120>
 800083a:	bf00      	nop
 800083c:	40012000 	.word	0x40012000
 8000840:	40012300 	.word	0x40012300
 8000844:	10000012 	.word	0x10000012
 8000848:	2000000c 	.word	0x2000000c
 800084c:	000f4240 	.word	0x000f4240

08000850 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000850:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000852:	4604      	mov	r4, r0
 8000854:	2800      	cmp	r0, #0
 8000856:	d06e      	beq.n	8000936 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000858:	f890 3020 	ldrb.w	r3, [r0, #32]
 800085c:	b90b      	cbnz	r3, 8000862 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800085e:	f002 fe61 	bl	8003524 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000862:	6822      	ldr	r2, [r4, #0]
 8000864:	6813      	ldr	r3, [r2, #0]
 8000866:	f023 0302 	bic.w	r3, r3, #2
 800086a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800086c:	f7ff fea2 	bl	80005b4 <HAL_GetTick>
 8000870:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000872:	6823      	ldr	r3, [r4, #0]
 8000874:	685a      	ldr	r2, [r3, #4]
 8000876:	0791      	lsls	r1, r2, #30
 8000878:	d451      	bmi.n	800091e <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	f042 0201 	orr.w	r2, r2, #1
 8000880:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000882:	f7ff fe97 	bl	80005b4 <HAL_GetTick>
 8000886:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000888:	6823      	ldr	r3, [r4, #0]
 800088a:	685a      	ldr	r2, [r3, #4]
 800088c:	07d2      	lsls	r2, r2, #31
 800088e:	d554      	bpl.n	800093a <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000890:	7e22      	ldrb	r2, [r4, #24]
 8000892:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	bf0c      	ite	eq
 8000898:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800089c:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80008a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80008a2:	7e62      	ldrb	r2, [r4, #25]
 80008a4:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	bf0c      	ite	eq
 80008aa:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008ae:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80008b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80008b4:	7ea2      	ldrb	r2, [r4, #26]
 80008b6:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	bf0c      	ite	eq
 80008bc:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008c0:	f022 0220 	bicne.w	r2, r2, #32
 80008c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80008c6:	7ee2      	ldrb	r2, [r4, #27]
 80008c8:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	bf0c      	ite	eq
 80008ce:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008d2:	f042 0210 	orrne.w	r2, r2, #16
 80008d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80008d8:	7f22      	ldrb	r2, [r4, #28]
 80008da:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	bf0c      	ite	eq
 80008e0:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008e4:	f022 0208 	bicne.w	r2, r2, #8
 80008e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80008ea:	7f62      	ldrb	r2, [r4, #29]
 80008ec:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	bf0c      	ite	eq
 80008f2:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008f6:	f022 0204 	bicne.w	r2, r2, #4
 80008fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80008fc:	68e1      	ldr	r1, [r4, #12]
 80008fe:	68a2      	ldr	r2, [r4, #8]
 8000900:	430a      	orrs	r2, r1
 8000902:	6921      	ldr	r1, [r4, #16]
 8000904:	430a      	orrs	r2, r1
 8000906:	6961      	ldr	r1, [r4, #20]
 8000908:	430a      	orrs	r2, r1
 800090a:	6861      	ldr	r1, [r4, #4]
 800090c:	3901      	subs	r1, #1
 800090e:	430a      	orrs	r2, r1
 8000910:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000912:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000914:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000916:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000918:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 800091c:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800091e:	f7ff fe49 	bl	80005b4 <HAL_GetTick>
 8000922:	1b40      	subs	r0, r0, r5
 8000924:	280a      	cmp	r0, #10
 8000926:	d9a4      	bls.n	8000872 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000928:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800092a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800092e:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000930:	2305      	movs	r3, #5
 8000932:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8000936:	2001      	movs	r0, #1
}
 8000938:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800093a:	f7ff fe3b 	bl	80005b4 <HAL_GetTick>
 800093e:	1b40      	subs	r0, r0, r5
 8000940:	280a      	cmp	r0, #10
 8000942:	d9a1      	bls.n	8000888 <HAL_CAN_Init+0x38>
 8000944:	e7f0      	b.n	8000928 <HAL_CAN_Init+0xd8>
	...

08000948 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000948:	4a07      	ldr	r2, [pc, #28]	; (8000968 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800094a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800094c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000950:	041b      	lsls	r3, r3, #16
 8000952:	0c1b      	lsrs	r3, r3, #16
 8000954:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000958:	0200      	lsls	r0, r0, #8
 800095a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800095e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000962:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000964:	60d3      	str	r3, [r2, #12]
 8000966:	4770      	bx	lr
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800096c:	4b17      	ldr	r3, [pc, #92]	; (80009cc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800096e:	b530      	push	{r4, r5, lr}
 8000970:	68dc      	ldr	r4, [r3, #12]
 8000972:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000976:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800097a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800097c:	2b04      	cmp	r3, #4
 800097e:	bf28      	it	cs
 8000980:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000982:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000984:	f04f 0501 	mov.w	r5, #1
 8000988:	fa05 f303 	lsl.w	r3, r5, r3
 800098c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000990:	bf8c      	ite	hi
 8000992:	3c03      	subhi	r4, #3
 8000994:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000996:	4019      	ands	r1, r3
 8000998:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800099a:	fa05 f404 	lsl.w	r4, r5, r4
 800099e:	3c01      	subs	r4, #1
 80009a0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80009a2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a4:	ea42 0201 	orr.w	r2, r2, r1
 80009a8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ac:	bfad      	iteet	ge
 80009ae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b2:	f000 000f 	andlt.w	r0, r0, #15
 80009b6:	4b06      	ldrlt	r3, [pc, #24]	; (80009d0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009bc:	bfb5      	itete	lt
 80009be:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80009c8:	bd30      	pop	{r4, r5, pc}
 80009ca:	bf00      	nop
 80009cc:	e000ed00 	.word	0xe000ed00
 80009d0:	e000ed14 	.word	0xe000ed14

080009d4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009d4:	3801      	subs	r0, #1
 80009d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009da:	d20a      	bcs.n	80009f2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009de:	4a07      	ldr	r2, [pc, #28]	; (80009fc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009e0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e2:	21f0      	movs	r1, #240	; 0xf0
 80009e4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009e8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ea:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009ec:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80009f2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000e010 	.word	0xe000e010
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a04:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a06:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a08:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8000bac <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a0c:	4a65      	ldr	r2, [pc, #404]	; (8000ba4 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a0e:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8000bb0 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a12:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a14:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000a16:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a1a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000a1c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a20:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000a24:	45b6      	cmp	lr, r6
 8000a26:	f040 80aa 	bne.w	8000b7e <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a2a:	684c      	ldr	r4, [r1, #4]
 8000a2c:	f024 0710 	bic.w	r7, r4, #16
 8000a30:	2f02      	cmp	r7, #2
 8000a32:	d116      	bne.n	8000a62 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000a34:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000a38:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a3c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000a40:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a44:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000a48:	f04f 0c0f 	mov.w	ip, #15
 8000a4c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000a50:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a54:	690d      	ldr	r5, [r1, #16]
 8000a56:	fa05 f50b 	lsl.w	r5, r5, fp
 8000a5a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000a5e:	f8ca 5020 	str.w	r5, [sl, #32]
 8000a62:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a66:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000a68:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a6c:	fa05 f50a 	lsl.w	r5, r5, sl
 8000a70:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a72:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a76:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a7a:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a7e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a80:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a84:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000a86:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a8a:	d811      	bhi.n	8000ab0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000a8c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a8e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a92:	68cf      	ldr	r7, [r1, #12]
 8000a94:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000a98:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000a9c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000a9e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aa0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000aa4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000aa8:	409f      	lsls	r7, r3
 8000aaa:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000aae:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000ab0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ab2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ab4:	688f      	ldr	r7, [r1, #8]
 8000ab6:	fa07 f70a 	lsl.w	r7, r7, sl
 8000aba:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000abc:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000abe:	00e5      	lsls	r5, r4, #3
 8000ac0:	d55d      	bpl.n	8000b7e <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	f04f 0b00 	mov.w	fp, #0
 8000ac6:	f8cd b00c 	str.w	fp, [sp, #12]
 8000aca:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ace:	4d36      	ldr	r5, [pc, #216]	; (8000ba8 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad0:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000ad4:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000ad8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000adc:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000ae0:	9703      	str	r7, [sp, #12]
 8000ae2:	9f03      	ldr	r7, [sp, #12]
 8000ae4:	f023 0703 	bic.w	r7, r3, #3
 8000ae8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000aec:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000af0:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000af4:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000af8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000afc:	f04f 0e0f 	mov.w	lr, #15
 8000b00:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b04:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b06:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b0a:	d03f      	beq.n	8000b8c <HAL_GPIO_Init+0x18c>
 8000b0c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b10:	42a8      	cmp	r0, r5
 8000b12:	d03d      	beq.n	8000b90 <HAL_GPIO_Init+0x190>
 8000b14:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b18:	42a8      	cmp	r0, r5
 8000b1a:	d03b      	beq.n	8000b94 <HAL_GPIO_Init+0x194>
 8000b1c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b20:	42a8      	cmp	r0, r5
 8000b22:	d039      	beq.n	8000b98 <HAL_GPIO_Init+0x198>
 8000b24:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b28:	42a8      	cmp	r0, r5
 8000b2a:	d037      	beq.n	8000b9c <HAL_GPIO_Init+0x19c>
 8000b2c:	4548      	cmp	r0, r9
 8000b2e:	d037      	beq.n	8000ba0 <HAL_GPIO_Init+0x1a0>
 8000b30:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000b34:	42a8      	cmp	r0, r5
 8000b36:	bf14      	ite	ne
 8000b38:	2507      	movne	r5, #7
 8000b3a:	2506      	moveq	r5, #6
 8000b3c:	fa05 f50c 	lsl.w	r5, r5, ip
 8000b40:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b44:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000b46:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000b48:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b4a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000b4e:	bf0c      	ite	eq
 8000b50:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000b52:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000b54:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000b56:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b58:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000b5c:	bf0c      	ite	eq
 8000b5e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000b60:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000b62:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b64:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b66:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000b6a:	bf0c      	ite	eq
 8000b6c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000b6e:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000b70:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000b72:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b74:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000b76:	bf54      	ite	pl
 8000b78:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000b7a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000b7c:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b7e:	3301      	adds	r3, #1
 8000b80:	2b10      	cmp	r3, #16
 8000b82:	f47f af48 	bne.w	8000a16 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000b86:	b005      	add	sp, #20
 8000b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b8c:	465d      	mov	r5, fp
 8000b8e:	e7d5      	b.n	8000b3c <HAL_GPIO_Init+0x13c>
 8000b90:	2501      	movs	r5, #1
 8000b92:	e7d3      	b.n	8000b3c <HAL_GPIO_Init+0x13c>
 8000b94:	2502      	movs	r5, #2
 8000b96:	e7d1      	b.n	8000b3c <HAL_GPIO_Init+0x13c>
 8000b98:	2503      	movs	r5, #3
 8000b9a:	e7cf      	b.n	8000b3c <HAL_GPIO_Init+0x13c>
 8000b9c:	2504      	movs	r5, #4
 8000b9e:	e7cd      	b.n	8000b3c <HAL_GPIO_Init+0x13c>
 8000ba0:	2505      	movs	r5, #5
 8000ba2:	e7cb      	b.n	8000b3c <HAL_GPIO_Init+0x13c>
 8000ba4:	40013c00 	.word	0x40013c00
 8000ba8:	40020000 	.word	0x40020000
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40021400 	.word	0x40021400

08000bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bb8:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000bba:	4604      	mov	r4, r0
 8000bbc:	b910      	cbnz	r0, 8000bc4 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000bc4:	4b44      	ldr	r3, [pc, #272]	; (8000cd8 <HAL_RCC_ClockConfig+0x124>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	f002 020f 	and.w	r2, r2, #15
 8000bcc:	428a      	cmp	r2, r1
 8000bce:	d328      	bcc.n	8000c22 <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bd0:	6821      	ldr	r1, [r4, #0]
 8000bd2:	078f      	lsls	r7, r1, #30
 8000bd4:	d42d      	bmi.n	8000c32 <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000bd6:	07c8      	lsls	r0, r1, #31
 8000bd8:	d440      	bmi.n	8000c5c <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000bda:	4b3f      	ldr	r3, [pc, #252]	; (8000cd8 <HAL_RCC_ClockConfig+0x124>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	f002 020f 	and.w	r2, r2, #15
 8000be2:	4295      	cmp	r5, r2
 8000be4:	d366      	bcc.n	8000cb4 <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000be6:	6822      	ldr	r2, [r4, #0]
 8000be8:	0751      	lsls	r1, r2, #29
 8000bea:	d46c      	bmi.n	8000cc6 <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bec:	0713      	lsls	r3, r2, #28
 8000bee:	d507      	bpl.n	8000c00 <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000bf0:	4a3a      	ldr	r2, [pc, #232]	; (8000cdc <HAL_RCC_ClockConfig+0x128>)
 8000bf2:	6921      	ldr	r1, [r4, #16]
 8000bf4:	6893      	ldr	r3, [r2, #8]
 8000bf6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000bfa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000bfe:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c00:	f000 f892 	bl	8000d28 <HAL_RCC_GetSysClockFreq>
 8000c04:	4b35      	ldr	r3, [pc, #212]	; (8000cdc <HAL_RCC_ClockConfig+0x128>)
 8000c06:	4a36      	ldr	r2, [pc, #216]	; (8000ce0 <HAL_RCC_ClockConfig+0x12c>)
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c0e:	5cd3      	ldrb	r3, [r2, r3]
 8000c10:	40d8      	lsrs	r0, r3
 8000c12:	4b34      	ldr	r3, [pc, #208]	; (8000ce4 <HAL_RCC_ClockConfig+0x130>)
 8000c14:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c16:	200f      	movs	r0, #15
 8000c18:	f7ff fc82 	bl	8000520 <HAL_InitTick>

  return HAL_OK;
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c22:	b2ca      	uxtb	r2, r1
 8000c24:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f003 030f 	and.w	r3, r3, #15
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	d1c6      	bne.n	8000bbe <HAL_RCC_ClockConfig+0xa>
 8000c30:	e7ce      	b.n	8000bd0 <HAL_RCC_ClockConfig+0x1c>
 8000c32:	4b2a      	ldr	r3, [pc, #168]	; (8000cdc <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c34:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c38:	bf1e      	ittt	ne
 8000c3a:	689a      	ldrne	r2, [r3, #8]
 8000c3c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000c40:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c42:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c44:	bf42      	ittt	mi
 8000c46:	689a      	ldrmi	r2, [r3, #8]
 8000c48:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000c4c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c4e:	689a      	ldr	r2, [r3, #8]
 8000c50:	68a0      	ldr	r0, [r4, #8]
 8000c52:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000c56:	4302      	orrs	r2, r0
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	e7bc      	b.n	8000bd6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c5c:	6862      	ldr	r2, [r4, #4]
 8000c5e:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <HAL_RCC_ClockConfig+0x128>)
 8000c60:	2a01      	cmp	r2, #1
 8000c62:	d11d      	bne.n	8000ca0 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c6a:	d0a8      	beq.n	8000bbe <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c6c:	4e1b      	ldr	r6, [pc, #108]	; (8000cdc <HAL_RCC_ClockConfig+0x128>)
 8000c6e:	68b3      	ldr	r3, [r6, #8]
 8000c70:	f023 0303 	bic.w	r3, r3, #3
 8000c74:	4313      	orrs	r3, r2
 8000c76:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000c78:	f7ff fc9c 	bl	80005b4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c7c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000c80:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c82:	68b3      	ldr	r3, [r6, #8]
 8000c84:	6862      	ldr	r2, [r4, #4]
 8000c86:	f003 030c 	and.w	r3, r3, #12
 8000c8a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c8e:	d0a4      	beq.n	8000bda <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c90:	f7ff fc90 	bl	80005b4 <HAL_GetTick>
 8000c94:	1bc0      	subs	r0, r0, r7
 8000c96:	4540      	cmp	r0, r8
 8000c98:	d9f3      	bls.n	8000c82 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000c9a:	2003      	movs	r0, #3
}
 8000c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ca0:	1e91      	subs	r1, r2, #2
 8000ca2:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ca4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ca6:	d802      	bhi.n	8000cae <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ca8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000cac:	e7dd      	b.n	8000c6a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cae:	f013 0f02 	tst.w	r3, #2
 8000cb2:	e7da      	b.n	8000c6a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cb4:	b2ea      	uxtb	r2, r5
 8000cb6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f003 030f 	and.w	r3, r3, #15
 8000cbe:	429d      	cmp	r5, r3
 8000cc0:	f47f af7d 	bne.w	8000bbe <HAL_RCC_ClockConfig+0xa>
 8000cc4:	e78f      	b.n	8000be6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000cc6:	4905      	ldr	r1, [pc, #20]	; (8000cdc <HAL_RCC_ClockConfig+0x128>)
 8000cc8:	68e0      	ldr	r0, [r4, #12]
 8000cca:	688b      	ldr	r3, [r1, #8]
 8000ccc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000cd0:	4303      	orrs	r3, r0
 8000cd2:	608b      	str	r3, [r1, #8]
 8000cd4:	e78a      	b.n	8000bec <HAL_RCC_ClockConfig+0x38>
 8000cd6:	bf00      	nop
 8000cd8:	40023c00 	.word	0x40023c00
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	0800387a 	.word	0x0800387a
 8000ce4:	2000000c 	.word	0x2000000c

08000ce8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000ce8:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <HAL_RCC_GetPCLK1Freq+0x14>)
 8000cea:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000cf2:	5cd3      	ldrb	r3, [r2, r3]
 8000cf4:	4a03      	ldr	r2, [pc, #12]	; (8000d04 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000cf6:	6810      	ldr	r0, [r2, #0]
}
 8000cf8:	40d8      	lsrs	r0, r3
 8000cfa:	4770      	bx	lr
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	0800388a 	.word	0x0800388a
 8000d04:	2000000c 	.word	0x2000000c

08000d08 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <HAL_RCC_GetPCLK2Freq+0x14>)
 8000d0a:	4a05      	ldr	r2, [pc, #20]	; (8000d20 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000d12:	5cd3      	ldrb	r3, [r2, r3]
 8000d14:	4a03      	ldr	r2, [pc, #12]	; (8000d24 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000d16:	6810      	ldr	r0, [r2, #0]
}
 8000d18:	40d8      	lsrs	r0, r3
 8000d1a:	4770      	bx	lr
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	0800388a 	.word	0x0800388a
 8000d24:	2000000c 	.word	0x2000000c

08000d28 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d28:	4920      	ldr	r1, [pc, #128]	; (8000dac <HAL_RCC_GetSysClockFreq+0x84>)
{
 8000d2a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d2c:	688b      	ldr	r3, [r1, #8]
 8000d2e:	f003 030c 	and.w	r3, r3, #12
 8000d32:	2b08      	cmp	r3, #8
 8000d34:	d007      	beq.n	8000d46 <HAL_RCC_GetSysClockFreq+0x1e>
 8000d36:	2b0c      	cmp	r3, #12
 8000d38:	d020      	beq.n	8000d7c <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000d3a:	4a1d      	ldr	r2, [pc, #116]	; (8000db0 <HAL_RCC_GetSysClockFreq+0x88>)
 8000d3c:	481d      	ldr	r0, [pc, #116]	; (8000db4 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf18      	it	ne
 8000d42:	4610      	movne	r0, r2
 8000d44:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d46:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d48:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d4a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d4c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d50:	bf14      	ite	ne
 8000d52:	4818      	ldrne	r0, [pc, #96]	; (8000db4 <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d54:	4816      	ldreq	r0, [pc, #88]	; (8000db0 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d56:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000d5a:	bf18      	it	ne
 8000d5c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d5e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d62:	fba1 0100 	umull	r0, r1, r1, r0
 8000d66:	f7ff fa53 	bl	8000210 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <HAL_RCC_GetSysClockFreq+0x84>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000d72:	3301      	adds	r3, #1
 8000d74:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 8000d76:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000d7a:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d7c:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d7e:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d80:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d82:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d86:	bf14      	ite	ne
 8000d88:	480a      	ldrne	r0, [pc, #40]	; (8000db4 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d8a:	4809      	ldreq	r0, [pc, #36]	; (8000db0 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d8c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000d90:	bf18      	it	ne
 8000d92:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d94:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d98:	fba1 0100 	umull	r0, r1, r1, r0
 8000d9c:	f7ff fa38 	bl	8000210 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8000da0:	4b02      	ldr	r3, [pc, #8]	; (8000dac <HAL_RCC_GetSysClockFreq+0x84>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8000da8:	e7e5      	b.n	8000d76 <HAL_RCC_GetSysClockFreq+0x4e>
 8000daa:	bf00      	nop
 8000dac:	40023800 	.word	0x40023800
 8000db0:	00f42400 	.word	0x00f42400
 8000db4:	017d7840 	.word	0x017d7840

08000db8 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000db8:	6803      	ldr	r3, [r0, #0]
{
 8000dba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dbe:	07df      	lsls	r7, r3, #31
{
 8000dc0:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dc2:	d410      	bmi.n	8000de6 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dc4:	6823      	ldr	r3, [r4, #0]
 8000dc6:	079e      	lsls	r6, r3, #30
 8000dc8:	d467      	bmi.n	8000e9a <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dca:	6823      	ldr	r3, [r4, #0]
 8000dcc:	071a      	lsls	r2, r3, #28
 8000dce:	f100 80b2 	bmi.w	8000f36 <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dd2:	6823      	ldr	r3, [r4, #0]
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	f100 80d0 	bmi.w	8000f7a <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000dda:	69a2      	ldr	r2, [r4, #24]
 8000ddc:	2a00      	cmp	r2, #0
 8000dde:	f040 8139 	bne.w	8001054 <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000de2:	2000      	movs	r0, #0
 8000de4:	e01e      	b.n	8000e24 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000de6:	4b97      	ldr	r3, [pc, #604]	; (8001044 <HAL_RCC_OscConfig+0x28c>)
 8000de8:	689a      	ldr	r2, [r3, #8]
 8000dea:	f002 020c 	and.w	r2, r2, #12
 8000dee:	2a04      	cmp	r2, #4
 8000df0:	d010      	beq.n	8000e14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000df2:	689a      	ldr	r2, [r3, #8]
 8000df4:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000df8:	2a08      	cmp	r2, #8
 8000dfa:	d102      	bne.n	8000e02 <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	025d      	lsls	r5, r3, #9
 8000e00:	d408      	bmi.n	8000e14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e02:	4b90      	ldr	r3, [pc, #576]	; (8001044 <HAL_RCC_OscConfig+0x28c>)
 8000e04:	689a      	ldr	r2, [r3, #8]
 8000e06:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000e0a:	2a0c      	cmp	r2, #12
 8000e0c:	d10d      	bne.n	8000e2a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e0e:	685a      	ldr	r2, [r3, #4]
 8000e10:	0250      	lsls	r0, r2, #9
 8000e12:	d50a      	bpl.n	8000e2a <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e14:	4b8b      	ldr	r3, [pc, #556]	; (8001044 <HAL_RCC_OscConfig+0x28c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	0399      	lsls	r1, r3, #14
 8000e1a:	d5d3      	bpl.n	8000dc4 <HAL_RCC_OscConfig+0xc>
 8000e1c:	6863      	ldr	r3, [r4, #4]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d1d0      	bne.n	8000dc4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000e22:	2001      	movs	r0, #1
}
 8000e24:	b002      	add	sp, #8
 8000e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e2a:	6862      	ldr	r2, [r4, #4]
 8000e2c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000e30:	d111      	bne.n	8000e56 <HAL_RCC_OscConfig+0x9e>
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000e38:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e3a:	f7ff fbbb 	bl	80005b4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e3e:	4d81      	ldr	r5, [pc, #516]	; (8001044 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000e40:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e42:	682b      	ldr	r3, [r5, #0]
 8000e44:	039a      	lsls	r2, r3, #14
 8000e46:	d4bd      	bmi.n	8000dc4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e48:	f7ff fbb4 	bl	80005b4 <HAL_GetTick>
 8000e4c:	1b80      	subs	r0, r0, r6
 8000e4e:	2864      	cmp	r0, #100	; 0x64
 8000e50:	d9f7      	bls.n	8000e42 <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8000e52:	2003      	movs	r0, #3
 8000e54:	e7e6      	b.n	8000e24 <HAL_RCC_OscConfig+0x6c>
 8000e56:	4d7b      	ldr	r5, [pc, #492]	; (8001044 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e58:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000e5c:	682b      	ldr	r3, [r5, #0]
 8000e5e:	d107      	bne.n	8000e70 <HAL_RCC_OscConfig+0xb8>
 8000e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e64:	602b      	str	r3, [r5, #0]
 8000e66:	682b      	ldr	r3, [r5, #0]
 8000e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e6c:	602b      	str	r3, [r5, #0]
 8000e6e:	e7e4      	b.n	8000e3a <HAL_RCC_OscConfig+0x82>
 8000e70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e74:	602b      	str	r3, [r5, #0]
 8000e76:	682b      	ldr	r3, [r5, #0]
 8000e78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e7c:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e7e:	2a00      	cmp	r2, #0
 8000e80:	d1db      	bne.n	8000e3a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000e82:	f7ff fb97 	bl	80005b4 <HAL_GetTick>
 8000e86:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e88:	682b      	ldr	r3, [r5, #0]
 8000e8a:	039b      	lsls	r3, r3, #14
 8000e8c:	d59a      	bpl.n	8000dc4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e8e:	f7ff fb91 	bl	80005b4 <HAL_GetTick>
 8000e92:	1b80      	subs	r0, r0, r6
 8000e94:	2864      	cmp	r0, #100	; 0x64
 8000e96:	d9f7      	bls.n	8000e88 <HAL_RCC_OscConfig+0xd0>
 8000e98:	e7db      	b.n	8000e52 <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000e9a:	4b6a      	ldr	r3, [pc, #424]	; (8001044 <HAL_RCC_OscConfig+0x28c>)
 8000e9c:	689a      	ldr	r2, [r3, #8]
 8000e9e:	f012 0f0c 	tst.w	r2, #12
 8000ea2:	d010      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000ea4:	689a      	ldr	r2, [r3, #8]
 8000ea6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000eaa:	2a08      	cmp	r2, #8
 8000eac:	d102      	bne.n	8000eb4 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	025f      	lsls	r7, r3, #9
 8000eb2:	d508      	bpl.n	8000ec6 <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000eb4:	4a63      	ldr	r2, [pc, #396]	; (8001044 <HAL_RCC_OscConfig+0x28c>)
 8000eb6:	6893      	ldr	r3, [r2, #8]
 8000eb8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000ebc:	2b0c      	cmp	r3, #12
 8000ebe:	d111      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ec0:	6853      	ldr	r3, [r2, #4]
 8000ec2:	025e      	lsls	r6, r3, #9
 8000ec4:	d40e      	bmi.n	8000ee4 <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ec6:	4b5f      	ldr	r3, [pc, #380]	; (8001044 <HAL_RCC_OscConfig+0x28c>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	0795      	lsls	r5, r2, #30
 8000ecc:	d502      	bpl.n	8000ed4 <HAL_RCC_OscConfig+0x11c>
 8000ece:	68e2      	ldr	r2, [r4, #12]
 8000ed0:	2a01      	cmp	r2, #1
 8000ed2:	d1a6      	bne.n	8000e22 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	6921      	ldr	r1, [r4, #16]
 8000ed8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000edc:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000ee0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ee2:	e772      	b.n	8000dca <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ee4:	68e2      	ldr	r2, [r4, #12]
 8000ee6:	4b58      	ldr	r3, [pc, #352]	; (8001048 <HAL_RCC_OscConfig+0x290>)
 8000ee8:	b1b2      	cbz	r2, 8000f18 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 8000eea:	2201      	movs	r2, #1
 8000eec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000eee:	f7ff fb61 	bl	80005b4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef2:	4d54      	ldr	r5, [pc, #336]	; (8001044 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000ef4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef6:	682b      	ldr	r3, [r5, #0]
 8000ef8:	0798      	lsls	r0, r3, #30
 8000efa:	d507      	bpl.n	8000f0c <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000efc:	682b      	ldr	r3, [r5, #0]
 8000efe:	6922      	ldr	r2, [r4, #16]
 8000f00:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f04:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000f08:	602b      	str	r3, [r5, #0]
 8000f0a:	e75e      	b.n	8000dca <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f0c:	f7ff fb52 	bl	80005b4 <HAL_GetTick>
 8000f10:	1b80      	subs	r0, r0, r6
 8000f12:	2802      	cmp	r0, #2
 8000f14:	d9ef      	bls.n	8000ef6 <HAL_RCC_OscConfig+0x13e>
 8000f16:	e79c      	b.n	8000e52 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8000f18:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f1a:	f7ff fb4b 	bl	80005b4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f1e:	4d49      	ldr	r5, [pc, #292]	; (8001044 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000f20:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f22:	682b      	ldr	r3, [r5, #0]
 8000f24:	0799      	lsls	r1, r3, #30
 8000f26:	f57f af50 	bpl.w	8000dca <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f2a:	f7ff fb43 	bl	80005b4 <HAL_GetTick>
 8000f2e:	1b80      	subs	r0, r0, r6
 8000f30:	2802      	cmp	r0, #2
 8000f32:	d9f6      	bls.n	8000f22 <HAL_RCC_OscConfig+0x16a>
 8000f34:	e78d      	b.n	8000e52 <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000f36:	6962      	ldr	r2, [r4, #20]
 8000f38:	4b44      	ldr	r3, [pc, #272]	; (800104c <HAL_RCC_OscConfig+0x294>)
 8000f3a:	b17a      	cbz	r2, 8000f5c <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f40:	f7ff fb38 	bl	80005b4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f44:	4d3f      	ldr	r5, [pc, #252]	; (8001044 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000f46:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f48:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f4a:	079f      	lsls	r7, r3, #30
 8000f4c:	f53f af41 	bmi.w	8000dd2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f50:	f7ff fb30 	bl	80005b4 <HAL_GetTick>
 8000f54:	1b80      	subs	r0, r0, r6
 8000f56:	2802      	cmp	r0, #2
 8000f58:	d9f6      	bls.n	8000f48 <HAL_RCC_OscConfig+0x190>
 8000f5a:	e77a      	b.n	8000e52 <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8000f5c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f5e:	f7ff fb29 	bl	80005b4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f62:	4d38      	ldr	r5, [pc, #224]	; (8001044 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000f64:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f66:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f68:	0798      	lsls	r0, r3, #30
 8000f6a:	f57f af32 	bpl.w	8000dd2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f6e:	f7ff fb21 	bl	80005b4 <HAL_GetTick>
 8000f72:	1b80      	subs	r0, r0, r6
 8000f74:	2802      	cmp	r0, #2
 8000f76:	d9f6      	bls.n	8000f66 <HAL_RCC_OscConfig+0x1ae>
 8000f78:	e76b      	b.n	8000e52 <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f7a:	4b32      	ldr	r3, [pc, #200]	; (8001044 <HAL_RCC_OscConfig+0x28c>)
 8000f7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f7e:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000f82:	d128      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f84:	9201      	str	r2, [sp, #4]
 8000f86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f88:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f8c:	641a      	str	r2, [r3, #64]	; 0x40
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000f98:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f9a:	4d2d      	ldr	r5, [pc, #180]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000f9c:	682b      	ldr	r3, [r5, #0]
 8000f9e:	05d9      	lsls	r1, r3, #23
 8000fa0:	d51b      	bpl.n	8000fda <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fa2:	68a3      	ldr	r3, [r4, #8]
 8000fa4:	4d27      	ldr	r5, [pc, #156]	; (8001044 <HAL_RCC_OscConfig+0x28c>)
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d127      	bne.n	8000ffa <HAL_RCC_OscConfig+0x242>
 8000faa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000fb2:	f7ff faff 	bl	80005b4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fb6:	4d23      	ldr	r5, [pc, #140]	; (8001044 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000fb8:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fba:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fbe:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000fc0:	079b      	lsls	r3, r3, #30
 8000fc2:	d539      	bpl.n	8001038 <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 8000fc4:	2e00      	cmp	r6, #0
 8000fc6:	f43f af08 	beq.w	8000dda <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fca:	4a1e      	ldr	r2, [pc, #120]	; (8001044 <HAL_RCC_OscConfig+0x28c>)
 8000fcc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000fce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd4:	e701      	b.n	8000dda <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	e7df      	b.n	8000f9a <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fda:	682b      	ldr	r3, [r5, #0]
 8000fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000fe2:	f7ff fae7 	bl	80005b4 <HAL_GetTick>
 8000fe6:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fe8:	682b      	ldr	r3, [r5, #0]
 8000fea:	05da      	lsls	r2, r3, #23
 8000fec:	d4d9      	bmi.n	8000fa2 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fee:	f7ff fae1 	bl	80005b4 <HAL_GetTick>
 8000ff2:	1bc0      	subs	r0, r0, r7
 8000ff4:	2802      	cmp	r0, #2
 8000ff6:	d9f7      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x230>
 8000ff8:	e72b      	b.n	8000e52 <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ffa:	2b05      	cmp	r3, #5
 8000ffc:	d104      	bne.n	8001008 <HAL_RCC_OscConfig+0x250>
 8000ffe:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001000:	f043 0304 	orr.w	r3, r3, #4
 8001004:	672b      	str	r3, [r5, #112]	; 0x70
 8001006:	e7d0      	b.n	8000faa <HAL_RCC_OscConfig+0x1f2>
 8001008:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800100a:	f022 0201 	bic.w	r2, r2, #1
 800100e:	672a      	str	r2, [r5, #112]	; 0x70
 8001010:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001012:	f022 0204 	bic.w	r2, r2, #4
 8001016:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1ca      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 800101c:	f7ff faca 	bl	80005b4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001020:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001024:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001026:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001028:	0798      	lsls	r0, r3, #30
 800102a:	d5cb      	bpl.n	8000fc4 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800102c:	f7ff fac2 	bl	80005b4 <HAL_GetTick>
 8001030:	1bc0      	subs	r0, r0, r7
 8001032:	4540      	cmp	r0, r8
 8001034:	d9f7      	bls.n	8001026 <HAL_RCC_OscConfig+0x26e>
 8001036:	e70c      	b.n	8000e52 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001038:	f7ff fabc 	bl	80005b4 <HAL_GetTick>
 800103c:	1bc0      	subs	r0, r0, r7
 800103e:	4540      	cmp	r0, r8
 8001040:	d9bd      	bls.n	8000fbe <HAL_RCC_OscConfig+0x206>
 8001042:	e706      	b.n	8000e52 <HAL_RCC_OscConfig+0x9a>
 8001044:	40023800 	.word	0x40023800
 8001048:	42470000 	.word	0x42470000
 800104c:	42470e80 	.word	0x42470e80
 8001050:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001054:	4d23      	ldr	r5, [pc, #140]	; (80010e4 <HAL_RCC_OscConfig+0x32c>)
 8001056:	68ab      	ldr	r3, [r5, #8]
 8001058:	f003 030c 	and.w	r3, r3, #12
 800105c:	2b08      	cmp	r3, #8
 800105e:	f43f aee0 	beq.w	8000e22 <HAL_RCC_OscConfig+0x6a>
 8001062:	4e21      	ldr	r6, [pc, #132]	; (80010e8 <HAL_RCC_OscConfig+0x330>)
 8001064:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001066:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001068:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800106a:	d12d      	bne.n	80010c8 <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 800106c:	f7ff faa2 	bl	80005b4 <HAL_GetTick>
 8001070:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001072:	682b      	ldr	r3, [r5, #0]
 8001074:	0199      	lsls	r1, r3, #6
 8001076:	d421      	bmi.n	80010bc <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001078:	6a22      	ldr	r2, [r4, #32]
 800107a:	69e3      	ldr	r3, [r4, #28]
 800107c:	4313      	orrs	r3, r2
 800107e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001080:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001084:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001086:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800108a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800108c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001090:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001092:	4c14      	ldr	r4, [pc, #80]	; (80010e4 <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001094:	0852      	lsrs	r2, r2, #1
 8001096:	3a01      	subs	r2, #1
 8001098:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800109c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800109e:	2301      	movs	r3, #1
 80010a0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80010a2:	f7ff fa87 	bl	80005b4 <HAL_GetTick>
 80010a6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010a8:	6823      	ldr	r3, [r4, #0]
 80010aa:	019a      	lsls	r2, r3, #6
 80010ac:	f53f ae99 	bmi.w	8000de2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010b0:	f7ff fa80 	bl	80005b4 <HAL_GetTick>
 80010b4:	1b40      	subs	r0, r0, r5
 80010b6:	2802      	cmp	r0, #2
 80010b8:	d9f6      	bls.n	80010a8 <HAL_RCC_OscConfig+0x2f0>
 80010ba:	e6ca      	b.n	8000e52 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010bc:	f7ff fa7a 	bl	80005b4 <HAL_GetTick>
 80010c0:	1bc0      	subs	r0, r0, r7
 80010c2:	2802      	cmp	r0, #2
 80010c4:	d9d5      	bls.n	8001072 <HAL_RCC_OscConfig+0x2ba>
 80010c6:	e6c4      	b.n	8000e52 <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 80010c8:	f7ff fa74 	bl	80005b4 <HAL_GetTick>
 80010cc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010ce:	682b      	ldr	r3, [r5, #0]
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	f57f ae86 	bpl.w	8000de2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010d6:	f7ff fa6d 	bl	80005b4 <HAL_GetTick>
 80010da:	1b00      	subs	r0, r0, r4
 80010dc:	2802      	cmp	r0, #2
 80010de:	d9f6      	bls.n	80010ce <HAL_RCC_OscConfig+0x316>
 80010e0:	e6b7      	b.n	8000e52 <HAL_RCC_OscConfig+0x9a>
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800
 80010e8:	42470060 	.word	0x42470060

080010ec <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80010ec:	6a03      	ldr	r3, [r0, #32]
 80010ee:	f023 0301 	bic.w	r3, r3, #1
 80010f2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80010f4:	6a03      	ldr	r3, [r0, #32]
{
 80010f6:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80010f8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80010fa:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80010fc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80010fe:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001102:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001104:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001106:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800110a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800110c:	4d0e      	ldr	r5, [pc, #56]	; (8001148 <TIM_OC1_SetConfig+0x5c>)
 800110e:	42a8      	cmp	r0, r5
 8001110:	d002      	beq.n	8001118 <TIM_OC1_SetConfig+0x2c>
 8001112:	4e0e      	ldr	r6, [pc, #56]	; (800114c <TIM_OC1_SetConfig+0x60>)
 8001114:	42b0      	cmp	r0, r6
 8001116:	d110      	bne.n	800113a <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001118:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800111a:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800111e:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001120:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8001122:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001126:	d002      	beq.n	800112e <TIM_OC1_SetConfig+0x42>
 8001128:	4d08      	ldr	r5, [pc, #32]	; (800114c <TIM_OC1_SetConfig+0x60>)
 800112a:	42a8      	cmp	r0, r5
 800112c:	d105      	bne.n	800113a <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800112e:	694d      	ldr	r5, [r1, #20]
 8001130:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001132:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001136:	4335      	orrs	r5, r6
 8001138:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800113a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800113c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800113e:	684a      	ldr	r2, [r1, #4]
 8001140:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001142:	6203      	str	r3, [r0, #32]
 8001144:	bd70      	pop	{r4, r5, r6, pc}
 8001146:	bf00      	nop
 8001148:	40010000 	.word	0x40010000
 800114c:	40010400 	.word	0x40010400

08001150 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001150:	6a03      	ldr	r3, [r0, #32]
 8001152:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001156:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001158:	6a03      	ldr	r3, [r0, #32]
{
 800115a:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800115c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800115e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001160:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001162:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001166:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001168:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800116a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800116e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001172:	4d11      	ldr	r5, [pc, #68]	; (80011b8 <TIM_OC3_SetConfig+0x68>)
 8001174:	42a8      	cmp	r0, r5
 8001176:	d003      	beq.n	8001180 <TIM_OC3_SetConfig+0x30>
 8001178:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800117c:	42a8      	cmp	r0, r5
 800117e:	d114      	bne.n	80011aa <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001180:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001182:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001186:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800118a:	4d0b      	ldr	r5, [pc, #44]	; (80011b8 <TIM_OC3_SetConfig+0x68>)
 800118c:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800118e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001192:	d003      	beq.n	800119c <TIM_OC3_SetConfig+0x4c>
 8001194:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001198:	42a8      	cmp	r0, r5
 800119a:	d106      	bne.n	80011aa <TIM_OC3_SetConfig+0x5a>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800119c:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800119e:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80011a0:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80011a4:	4335      	orrs	r5, r6
 80011a6:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80011aa:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80011ac:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80011ae:	684a      	ldr	r2, [r1, #4]
 80011b0:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80011b2:	6203      	str	r3, [r0, #32]
 80011b4:	bd70      	pop	{r4, r5, r6, pc}
 80011b6:	bf00      	nop
 80011b8:	40010000 	.word	0x40010000

080011bc <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80011bc:	6a03      	ldr	r3, [r0, #32]
 80011be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011c2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80011c4:	6a03      	ldr	r3, [r0, #32]
{
 80011c6:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80011c8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80011ca:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80011cc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80011ce:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80011d2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80011d6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80011d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80011dc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80011e0:	4d08      	ldr	r5, [pc, #32]	; (8001204 <TIM_OC4_SetConfig+0x48>)
 80011e2:	42a8      	cmp	r0, r5
 80011e4:	d003      	beq.n	80011ee <TIM_OC4_SetConfig+0x32>
 80011e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011ea:	42a8      	cmp	r0, r5
 80011ec:	d104      	bne.n	80011f8 <TIM_OC4_SetConfig+0x3c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80011ee:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80011f0:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80011f4:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80011f8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80011fa:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80011fc:	684a      	ldr	r2, [r1, #4]
 80011fe:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001200:	6203      	str	r3, [r0, #32]
 8001202:	bd30      	pop	{r4, r5, pc}
 8001204:	40010000 	.word	0x40010000

08001208 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001208:	4a30      	ldr	r2, [pc, #192]	; (80012cc <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800120a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800120c:	4290      	cmp	r0, r2
 800120e:	d012      	beq.n	8001236 <TIM_Base_SetConfig+0x2e>
 8001210:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001214:	d00f      	beq.n	8001236 <TIM_Base_SetConfig+0x2e>
 8001216:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800121a:	4290      	cmp	r0, r2
 800121c:	d00b      	beq.n	8001236 <TIM_Base_SetConfig+0x2e>
 800121e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001222:	4290      	cmp	r0, r2
 8001224:	d007      	beq.n	8001236 <TIM_Base_SetConfig+0x2e>
 8001226:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800122a:	4290      	cmp	r0, r2
 800122c:	d003      	beq.n	8001236 <TIM_Base_SetConfig+0x2e>
 800122e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001232:	4290      	cmp	r0, r2
 8001234:	d119      	bne.n	800126a <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8001236:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800123c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800123e:	4a23      	ldr	r2, [pc, #140]	; (80012cc <TIM_Base_SetConfig+0xc4>)
 8001240:	4290      	cmp	r0, r2
 8001242:	d029      	beq.n	8001298 <TIM_Base_SetConfig+0x90>
 8001244:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001248:	d026      	beq.n	8001298 <TIM_Base_SetConfig+0x90>
 800124a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800124e:	4290      	cmp	r0, r2
 8001250:	d022      	beq.n	8001298 <TIM_Base_SetConfig+0x90>
 8001252:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001256:	4290      	cmp	r0, r2
 8001258:	d01e      	beq.n	8001298 <TIM_Base_SetConfig+0x90>
 800125a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800125e:	4290      	cmp	r0, r2
 8001260:	d01a      	beq.n	8001298 <TIM_Base_SetConfig+0x90>
 8001262:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001266:	4290      	cmp	r0, r2
 8001268:	d016      	beq.n	8001298 <TIM_Base_SetConfig+0x90>
 800126a:	4a19      	ldr	r2, [pc, #100]	; (80012d0 <TIM_Base_SetConfig+0xc8>)
 800126c:	4290      	cmp	r0, r2
 800126e:	d013      	beq.n	8001298 <TIM_Base_SetConfig+0x90>
 8001270:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001274:	4290      	cmp	r0, r2
 8001276:	d00f      	beq.n	8001298 <TIM_Base_SetConfig+0x90>
 8001278:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800127c:	4290      	cmp	r0, r2
 800127e:	d00b      	beq.n	8001298 <TIM_Base_SetConfig+0x90>
 8001280:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001284:	4290      	cmp	r0, r2
 8001286:	d007      	beq.n	8001298 <TIM_Base_SetConfig+0x90>
 8001288:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800128c:	4290      	cmp	r0, r2
 800128e:	d003      	beq.n	8001298 <TIM_Base_SetConfig+0x90>
 8001290:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001294:	4290      	cmp	r0, r2
 8001296:	d103      	bne.n	80012a0 <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001298:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800129a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800129e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80012a0:	694a      	ldr	r2, [r1, #20]
 80012a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012a6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80012a8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80012aa:	688b      	ldr	r3, [r1, #8]
 80012ac:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80012ae:	680b      	ldr	r3, [r1, #0]
 80012b0:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <TIM_Base_SetConfig+0xc4>)
 80012b4:	4298      	cmp	r0, r3
 80012b6:	d003      	beq.n	80012c0 <TIM_Base_SetConfig+0xb8>
 80012b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012bc:	4298      	cmp	r0, r3
 80012be:	d101      	bne.n	80012c4 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 80012c0:	690b      	ldr	r3, [r1, #16]
 80012c2:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80012c4:	2301      	movs	r3, #1
 80012c6:	6143      	str	r3, [r0, #20]
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40010000 	.word	0x40010000
 80012d0:	40014000 	.word	0x40014000

080012d4 <HAL_TIM_PWM_Init>:
{
 80012d4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80012d6:	4604      	mov	r4, r0
 80012d8:	b1a0      	cbz	r0, 8001304 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80012da:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80012de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80012e2:	b91b      	cbnz	r3, 80012ec <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80012e4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80012e8:	f002 f952 	bl	8003590 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80012ec:	2302      	movs	r3, #2
 80012ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80012f2:	6820      	ldr	r0, [r4, #0]
 80012f4:	1d21      	adds	r1, r4, #4
 80012f6:	f7ff ff87 	bl	8001208 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80012fa:	2301      	movs	r3, #1
 80012fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001300:	2000      	movs	r0, #0
 8001302:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001304:	2001      	movs	r0, #1
}
 8001306:	bd10      	pop	{r4, pc}

08001308 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001308:	6a03      	ldr	r3, [r0, #32]
 800130a:	f023 0310 	bic.w	r3, r3, #16
 800130e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001310:	6a03      	ldr	r3, [r0, #32]
{
 8001312:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8001314:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001316:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001318:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800131a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800131e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001322:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001324:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001328:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800132c:	4d10      	ldr	r5, [pc, #64]	; (8001370 <TIM_OC2_SetConfig+0x68>)
 800132e:	42a8      	cmp	r0, r5
 8001330:	d003      	beq.n	800133a <TIM_OC2_SetConfig+0x32>
 8001332:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001336:	42a8      	cmp	r0, r5
 8001338:	d114      	bne.n	8001364 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800133a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800133c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001340:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001344:	4d0a      	ldr	r5, [pc, #40]	; (8001370 <TIM_OC2_SetConfig+0x68>)
 8001346:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8001348:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800134c:	d003      	beq.n	8001356 <TIM_OC2_SetConfig+0x4e>
 800134e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001352:	42a8      	cmp	r0, r5
 8001354:	d106      	bne.n	8001364 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001356:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001358:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800135a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800135e:	4335      	orrs	r5, r6
 8001360:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001364:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001366:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001368:	684a      	ldr	r2, [r1, #4]
 800136a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800136c:	6203      	str	r3, [r0, #32]
 800136e:	bd70      	pop	{r4, r5, r6, pc}
 8001370:	40010000 	.word	0x40010000

08001374 <HAL_TIM_PWM_ConfigChannel>:
{
 8001374:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001376:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800137a:	2b01      	cmp	r3, #1
{
 800137c:	4604      	mov	r4, r0
 800137e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001382:	d025      	beq.n	80013d0 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001384:	2301      	movs	r3, #1
 8001386:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800138a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 800138e:	2a0c      	cmp	r2, #12
 8001390:	d818      	bhi.n	80013c4 <HAL_TIM_PWM_ConfigChannel+0x50>
 8001392:	e8df f002 	tbb	[pc, r2]
 8001396:	1707      	.short	0x1707
 8001398:	171e1717 	.word	0x171e1717
 800139c:	172f1717 	.word	0x172f1717
 80013a0:	1717      	.short	0x1717
 80013a2:	40          	.byte	0x40
 80013a3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80013a4:	6820      	ldr	r0, [r4, #0]
 80013a6:	f7ff fea1 	bl	80010ec <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80013aa:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80013ac:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80013ae:	699a      	ldr	r2, [r3, #24]
 80013b0:	f042 0208 	orr.w	r2, r2, #8
 80013b4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80013b6:	699a      	ldr	r2, [r3, #24]
 80013b8:	f022 0204 	bic.w	r2, r2, #4
 80013bc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80013be:	699a      	ldr	r2, [r3, #24]
 80013c0:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80013c2:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80013c4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80013c6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80013c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80013cc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80013d0:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80013d2:	6820      	ldr	r0, [r4, #0]
 80013d4:	f7ff ff98 	bl	8001308 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80013d8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80013da:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80013dc:	699a      	ldr	r2, [r3, #24]
 80013de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80013e4:	699a      	ldr	r2, [r3, #24]
 80013e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80013ec:	699a      	ldr	r2, [r3, #24]
 80013ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80013f2:	e7e6      	b.n	80013c2 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80013f4:	6820      	ldr	r0, [r4, #0]
 80013f6:	f7ff feab 	bl	8001150 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80013fa:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80013fc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80013fe:	69da      	ldr	r2, [r3, #28]
 8001400:	f042 0208 	orr.w	r2, r2, #8
 8001404:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001406:	69da      	ldr	r2, [r3, #28]
 8001408:	f022 0204 	bic.w	r2, r2, #4
 800140c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800140e:	69da      	ldr	r2, [r3, #28]
 8001410:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001412:	61da      	str	r2, [r3, #28]
      break;
 8001414:	e7d6      	b.n	80013c4 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001416:	6820      	ldr	r0, [r4, #0]
 8001418:	f7ff fed0 	bl	80011bc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800141c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800141e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001420:	69da      	ldr	r2, [r3, #28]
 8001422:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001426:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001428:	69da      	ldr	r2, [r3, #28]
 800142a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800142e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001430:	69da      	ldr	r2, [r3, #28]
 8001432:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001436:	e7ec      	b.n	8001412 <HAL_TIM_PWM_ConfigChannel+0x9e>

08001438 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001438:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800143c:	2b01      	cmp	r3, #1
{
 800143e:	b530      	push	{r4, r5, lr}
 8001440:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001444:	d014      	beq.n	8001470 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001446:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001448:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800144c:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800144e:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001450:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001452:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001454:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001458:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800145c:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800145e:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001460:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001462:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001464:	2301      	movs	r3, #1
 8001466:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800146a:	2300      	movs	r3, #0
 800146c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001470:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001472:	bd30      	pop	{r4, r5, pc}

08001474 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8001474:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001478:	2b01      	cmp	r3, #1
 800147a:	d01f      	beq.n	80014bc <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800147c:	68cb      	ldr	r3, [r1, #12]
 800147e:	688a      	ldr	r2, [r1, #8]
 8001480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001484:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001486:	684a      	ldr	r2, [r1, #4]
 8001488:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800148c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800148e:	680a      	ldr	r2, [r1, #0]
 8001490:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001494:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001496:	690a      	ldr	r2, [r1, #16]
 8001498:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800149c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800149e:	694a      	ldr	r2, [r1, #20]
 80014a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80014a4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80014a6:	69ca      	ldr	r2, [r1, #28]
 80014a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014ac:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80014ae:	6802      	ldr	r2, [r0, #0]
 80014b0:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80014b2:	2300      	movs	r3, #0
 80014b4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80014b8:	4618      	mov	r0, r3
 80014ba:	4770      	bx	lr
  __HAL_LOCK(htim);
 80014bc:	2002      	movs	r0, #2
}
 80014be:	4770      	bx	lr

080014c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80014c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80014c4:	6806      	ldr	r6, [r0, #0]
 80014c6:	68c2      	ldr	r2, [r0, #12]
 80014c8:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80014ca:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80014cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014d0:	4313      	orrs	r3, r2
 80014d2:	6133      	str	r3, [r6, #16]
{
 80014d4:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80014d6:	6883      	ldr	r3, [r0, #8]
 80014d8:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80014da:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80014dc:	4303      	orrs	r3, r0
 80014de:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80014e0:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80014e4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80014e6:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80014ea:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 80014ec:	4313      	orrs	r3, r2
 80014ee:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80014f0:	6973      	ldr	r3, [r6, #20]
 80014f2:	69a2      	ldr	r2, [r4, #24]
 80014f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014f8:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80014fa:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80014fe:	6173      	str	r3, [r6, #20]
 8001500:	4b7a      	ldr	r3, [pc, #488]	; (80016ec <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001502:	d17c      	bne.n	80015fe <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001504:	429e      	cmp	r6, r3
 8001506:	d003      	beq.n	8001510 <UART_SetConfig+0x50>
 8001508:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800150c:	429e      	cmp	r6, r3
 800150e:	d144      	bne.n	800159a <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001510:	f7ff fbfa 	bl	8000d08 <HAL_RCC_GetPCLK2Freq>
 8001514:	2519      	movs	r5, #25
 8001516:	fb05 f300 	mul.w	r3, r5, r0
 800151a:	6860      	ldr	r0, [r4, #4]
 800151c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001520:	0040      	lsls	r0, r0, #1
 8001522:	fbb3 f3f0 	udiv	r3, r3, r0
 8001526:	fbb3 f3f9 	udiv	r3, r3, r9
 800152a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800152e:	f7ff fbeb 	bl	8000d08 <HAL_RCC_GetPCLK2Freq>
 8001532:	6863      	ldr	r3, [r4, #4]
 8001534:	4368      	muls	r0, r5
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	fbb0 f7f3 	udiv	r7, r0, r3
 800153c:	f7ff fbe4 	bl	8000d08 <HAL_RCC_GetPCLK2Freq>
 8001540:	6863      	ldr	r3, [r4, #4]
 8001542:	4368      	muls	r0, r5
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	fbb0 f3f3 	udiv	r3, r0, r3
 800154a:	fbb3 f3f9 	udiv	r3, r3, r9
 800154e:	fb09 7313 	mls	r3, r9, r3, r7
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	3332      	adds	r3, #50	; 0x32
 8001556:	fbb3 f3f9 	udiv	r3, r3, r9
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001560:	f7ff fbd2 	bl	8000d08 <HAL_RCC_GetPCLK2Freq>
 8001564:	6862      	ldr	r2, [r4, #4]
 8001566:	4368      	muls	r0, r5
 8001568:	0052      	lsls	r2, r2, #1
 800156a:	fbb0 faf2 	udiv	sl, r0, r2
 800156e:	f7ff fbcb 	bl	8000d08 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001572:	6863      	ldr	r3, [r4, #4]
 8001574:	4368      	muls	r0, r5
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	fbb0 f3f3 	udiv	r3, r0, r3
 800157c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001580:	fb09 a313 	mls	r3, r9, r3, sl
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	3332      	adds	r3, #50	; 0x32
 8001588:	fbb3 f3f9 	udiv	r3, r3, r9
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001592:	443b      	add	r3, r7
 8001594:	60b3      	str	r3, [r6, #8]
 8001596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800159a:	f7ff fba5 	bl	8000ce8 <HAL_RCC_GetPCLK1Freq>
 800159e:	2519      	movs	r5, #25
 80015a0:	fb05 f300 	mul.w	r3, r5, r0
 80015a4:	6860      	ldr	r0, [r4, #4]
 80015a6:	f04f 0964 	mov.w	r9, #100	; 0x64
 80015aa:	0040      	lsls	r0, r0, #1
 80015ac:	fbb3 f3f0 	udiv	r3, r3, r0
 80015b0:	fbb3 f3f9 	udiv	r3, r3, r9
 80015b4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80015b8:	f7ff fb96 	bl	8000ce8 <HAL_RCC_GetPCLK1Freq>
 80015bc:	6863      	ldr	r3, [r4, #4]
 80015be:	4368      	muls	r0, r5
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	fbb0 f7f3 	udiv	r7, r0, r3
 80015c6:	f7ff fb8f 	bl	8000ce8 <HAL_RCC_GetPCLK1Freq>
 80015ca:	6863      	ldr	r3, [r4, #4]
 80015cc:	4368      	muls	r0, r5
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80015d4:	fbb3 f3f9 	udiv	r3, r3, r9
 80015d8:	fb09 7313 	mls	r3, r9, r3, r7
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	3332      	adds	r3, #50	; 0x32
 80015e0:	fbb3 f3f9 	udiv	r3, r3, r9
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80015ea:	f7ff fb7d 	bl	8000ce8 <HAL_RCC_GetPCLK1Freq>
 80015ee:	6862      	ldr	r2, [r4, #4]
 80015f0:	4368      	muls	r0, r5
 80015f2:	0052      	lsls	r2, r2, #1
 80015f4:	fbb0 faf2 	udiv	sl, r0, r2
 80015f8:	f7ff fb76 	bl	8000ce8 <HAL_RCC_GetPCLK1Freq>
 80015fc:	e7b9      	b.n	8001572 <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80015fe:	429e      	cmp	r6, r3
 8001600:	d002      	beq.n	8001608 <UART_SetConfig+0x148>
 8001602:	4b3b      	ldr	r3, [pc, #236]	; (80016f0 <UART_SetConfig+0x230>)
 8001604:	429e      	cmp	r6, r3
 8001606:	d140      	bne.n	800168a <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001608:	f7ff fb7e 	bl	8000d08 <HAL_RCC_GetPCLK2Freq>
 800160c:	6867      	ldr	r7, [r4, #4]
 800160e:	2519      	movs	r5, #25
 8001610:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001614:	fb05 f300 	mul.w	r3, r5, r0
 8001618:	00bf      	lsls	r7, r7, #2
 800161a:	fbb3 f3f7 	udiv	r3, r3, r7
 800161e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001622:	011f      	lsls	r7, r3, #4
 8001624:	f7ff fb70 	bl	8000d08 <HAL_RCC_GetPCLK2Freq>
 8001628:	6863      	ldr	r3, [r4, #4]
 800162a:	4368      	muls	r0, r5
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	fbb0 f8f3 	udiv	r8, r0, r3
 8001632:	f7ff fb69 	bl	8000d08 <HAL_RCC_GetPCLK2Freq>
 8001636:	6863      	ldr	r3, [r4, #4]
 8001638:	4368      	muls	r0, r5
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001640:	fbb3 f3f9 	udiv	r3, r3, r9
 8001644:	fb09 8313 	mls	r3, r9, r3, r8
 8001648:	011b      	lsls	r3, r3, #4
 800164a:	3332      	adds	r3, #50	; 0x32
 800164c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001650:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001654:	f7ff fb58 	bl	8000d08 <HAL_RCC_GetPCLK2Freq>
 8001658:	6862      	ldr	r2, [r4, #4]
 800165a:	4368      	muls	r0, r5
 800165c:	0092      	lsls	r2, r2, #2
 800165e:	fbb0 faf2 	udiv	sl, r0, r2
 8001662:	f7ff fb51 	bl	8000d08 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001666:	6863      	ldr	r3, [r4, #4]
 8001668:	4368      	muls	r0, r5
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001670:	fbb3 f3f9 	udiv	r3, r3, r9
 8001674:	fb09 a313 	mls	r3, r9, r3, sl
 8001678:	011b      	lsls	r3, r3, #4
 800167a:	3332      	adds	r3, #50	; 0x32
 800167c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001680:	f003 030f 	and.w	r3, r3, #15
 8001684:	ea43 0308 	orr.w	r3, r3, r8
 8001688:	e783      	b.n	8001592 <UART_SetConfig+0xd2>
 800168a:	f7ff fb2d 	bl	8000ce8 <HAL_RCC_GetPCLK1Freq>
 800168e:	6867      	ldr	r7, [r4, #4]
 8001690:	2519      	movs	r5, #25
 8001692:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001696:	fb05 f300 	mul.w	r3, r5, r0
 800169a:	00bf      	lsls	r7, r7, #2
 800169c:	fbb3 f3f7 	udiv	r3, r3, r7
 80016a0:	fbb3 f3f9 	udiv	r3, r3, r9
 80016a4:	011f      	lsls	r7, r3, #4
 80016a6:	f7ff fb1f 	bl	8000ce8 <HAL_RCC_GetPCLK1Freq>
 80016aa:	6863      	ldr	r3, [r4, #4]
 80016ac:	4368      	muls	r0, r5
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	fbb0 f8f3 	udiv	r8, r0, r3
 80016b4:	f7ff fb18 	bl	8000ce8 <HAL_RCC_GetPCLK1Freq>
 80016b8:	6863      	ldr	r3, [r4, #4]
 80016ba:	4368      	muls	r0, r5
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	fbb0 f3f3 	udiv	r3, r0, r3
 80016c2:	fbb3 f3f9 	udiv	r3, r3, r9
 80016c6:	fb09 8313 	mls	r3, r9, r3, r8
 80016ca:	011b      	lsls	r3, r3, #4
 80016cc:	3332      	adds	r3, #50	; 0x32
 80016ce:	fbb3 f3f9 	udiv	r3, r3, r9
 80016d2:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80016d6:	f7ff fb07 	bl	8000ce8 <HAL_RCC_GetPCLK1Freq>
 80016da:	6862      	ldr	r2, [r4, #4]
 80016dc:	4368      	muls	r0, r5
 80016de:	0092      	lsls	r2, r2, #2
 80016e0:	fbb0 faf2 	udiv	sl, r0, r2
 80016e4:	f7ff fb00 	bl	8000ce8 <HAL_RCC_GetPCLK1Freq>
 80016e8:	e7bd      	b.n	8001666 <UART_SetConfig+0x1a6>
 80016ea:	bf00      	nop
 80016ec:	40011000 	.word	0x40011000
 80016f0:	40011400 	.word	0x40011400

080016f4 <HAL_UART_Init>:
{
 80016f4:	b510      	push	{r4, lr}
  if (huart == NULL)
 80016f6:	4604      	mov	r4, r0
 80016f8:	b340      	cbz	r0, 800174c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80016fa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80016fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001702:	b91b      	cbnz	r3, 800170c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001704:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001708:	f001 ffd4 	bl	80036b4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800170c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800170e:	2324      	movs	r3, #36	; 0x24
 8001710:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001714:	68d3      	ldr	r3, [r2, #12]
 8001716:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800171a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800171c:	4620      	mov	r0, r4
 800171e:	f7ff fecf 	bl	80014c0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001722:	6823      	ldr	r3, [r4, #0]
 8001724:	691a      	ldr	r2, [r3, #16]
 8001726:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800172a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800172c:	695a      	ldr	r2, [r3, #20]
 800172e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001732:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001734:	68da      	ldr	r2, [r3, #12]
 8001736:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800173a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800173c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800173e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001740:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001742:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001746:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800174a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800174c:	2001      	movs	r0, #1
}
 800174e:	bd10      	pop	{r4, pc}

08001750 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001750:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8001754:	b113      	cbz	r3, 800175c <osKernelInitialize+0xc>
    stat = osErrorISR;
 8001756:	f06f 0005 	mvn.w	r0, #5
 800175a:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800175c:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1f8      	bne.n	8001756 <osKernelInitialize+0x6>
 8001764:	4b07      	ldr	r3, [pc, #28]	; (8001784 <osKernelInitialize+0x34>)
 8001766:	6818      	ldr	r0, [r3, #0]
 8001768:	2802      	cmp	r0, #2
 800176a:	d106      	bne.n	800177a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800176c:	f3ef 8311 	mrs	r3, BASEPRI
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1f0      	bne.n	8001756 <osKernelInitialize+0x6>
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
      stat = osOK;
    } else {
      stat = osError;
 8001774:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8001778:	4770      	bx	lr
    if (KernelState == osKernelInactive) {
 800177a:	2800      	cmp	r0, #0
 800177c:	d1fa      	bne.n	8001774 <osKernelInitialize+0x24>
      KernelState = osKernelReady;
 800177e:	2201      	movs	r2, #1
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	4770      	bx	lr
 8001784:	20000280 	.word	0x20000280

08001788 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001788:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800178a:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800178e:	b113      	cbz	r3, 8001796 <osKernelStart+0xe>
    stat = osErrorISR;
 8001790:	f06f 0005 	mvn.w	r0, #5
 8001794:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001796:	f3ef 8410 	mrs	r4, PRIMASK
  if (IS_IRQ()) {
 800179a:	2c00      	cmp	r4, #0
 800179c:	d1f8      	bne.n	8001790 <osKernelStart+0x8>
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <osKernelStart+0x3c>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	2a02      	cmp	r2, #2
 80017a4:	d106      	bne.n	80017b4 <osKernelStart+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80017a6:	f3ef 8311 	mrs	r3, BASEPRI
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
      KernelState = osKernelRunning;
      vTaskStartScheduler();
      stat = osOK;
    } else {
      stat = osError;
 80017ae:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80017b2:	bd10      	pop	{r4, pc}
    if (KernelState == osKernelReady) {
 80017b4:	2a01      	cmp	r2, #1
 80017b6:	d1fa      	bne.n	80017ae <osKernelStart+0x26>
      KernelState = osKernelRunning;
 80017b8:	2202      	movs	r2, #2
 80017ba:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80017bc:	f001 f824 	bl	8002808 <vTaskStartScheduler>
      stat = osOK;
 80017c0:	4620      	mov	r0, r4
 80017c2:	bd10      	pop	{r4, pc}
 80017c4:	20000280 	.word	0x20000280

080017c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80017c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ca:	b087      	sub	sp, #28
 80017cc:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80017ce:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80017d0:	460b      	mov	r3, r1
  hTask = NULL;
 80017d2:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80017d4:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80017d8:	bb72      	cbnz	r2, 8001838 <osThreadNew+0x70>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017da:	f3ef 8210 	mrs	r2, PRIMASK
 80017de:	bb5a      	cbnz	r2, 8001838 <osThreadNew+0x70>
 80017e0:	4a28      	ldr	r2, [pc, #160]	; (8001884 <osThreadNew+0xbc>)
 80017e2:	6812      	ldr	r2, [r2, #0]
 80017e4:	2a02      	cmp	r2, #2
 80017e6:	d102      	bne.n	80017ee <osThreadNew+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80017e8:	f3ef 8211 	mrs	r2, BASEPRI
 80017ec:	bb22      	cbnz	r2, 8001838 <osThreadNew+0x70>
 80017ee:	b318      	cbz	r0, 8001838 <osThreadNew+0x70>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 80017f0:	2200      	movs	r2, #0
 80017f2:	f88d 2013 	strb.w	r2, [sp, #19]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 80017f6:	2c00      	cmp	r4, #0
 80017f8:	d03c      	beq.n	8001874 <osThreadNew+0xac>
      if (attr->name != NULL) {
 80017fa:	6821      	ldr	r1, [r4, #0]
 80017fc:	b909      	cbnz	r1, 8001802 <osThreadNew+0x3a>
    name  = &empty;
 80017fe:	f10d 0113 	add.w	r1, sp, #19
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8001802:	69a5      	ldr	r5, [r4, #24]
 8001804:	2d00      	cmp	r5, #0
 8001806:	bf08      	it	eq
 8001808:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800180a:	1e6a      	subs	r2, r5, #1
 800180c:	2a37      	cmp	r2, #55	; 0x37
 800180e:	462f      	mov	r7, r5
 8001810:	d835      	bhi.n	800187e <osThreadNew+0xb6>
 8001812:	6862      	ldr	r2, [r4, #4]
 8001814:	07d2      	lsls	r2, r2, #31
 8001816:	d432      	bmi.n	800187e <osThreadNew+0xb6>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8001818:	6966      	ldr	r6, [r4, #20]
 800181a:	b186      	cbz	r6, 800183e <osThreadNew+0x76>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800181c:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800181e:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8001822:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8001826:	f1be 0f00 	cmp.w	lr, #0
 800182a:	d00a      	beq.n	8001842 <osThreadNew+0x7a>
 800182c:	f1bc 0f53 	cmp.w	ip, #83	; 0x53
 8001830:	d902      	bls.n	8001838 <osThreadNew+0x70>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001832:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001834:	b104      	cbz	r4, 8001838 <osThreadNew+0x70>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001836:	b9ae      	cbnz	r6, 8001864 <osThreadNew+0x9c>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001838:	9805      	ldr	r0, [sp, #20]
}
 800183a:	b007      	add	sp, #28
 800183c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800183e:	2280      	movs	r2, #128	; 0x80
 8001840:	e7ed      	b.n	800181e <osThreadNew+0x56>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001842:	f1bc 0f00 	cmp.w	ip, #0
 8001846:	d1f7      	bne.n	8001838 <osThreadNew+0x70>
      if (mem == 0) {
 8001848:	6924      	ldr	r4, [r4, #16]
 800184a:	2c00      	cmp	r4, #0
 800184c:	d1f4      	bne.n	8001838 <osThreadNew+0x70>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800184e:	ac05      	add	r4, sp, #20
 8001850:	9401      	str	r4, [sp, #4]
 8001852:	9700      	str	r7, [sp, #0]
 8001854:	b292      	uxth	r2, r2
 8001856:	f000 ffaa 	bl	80027ae <xTaskCreate>
 800185a:	2801      	cmp	r0, #1
          hTask = NULL;
 800185c:	bf1c      	itt	ne
 800185e:	2300      	movne	r3, #0
 8001860:	9305      	strne	r3, [sp, #20]
 8001862:	e7e9      	b.n	8001838 <osThreadNew+0x70>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001864:	f8cd e008 	str.w	lr, [sp, #8]
 8001868:	9401      	str	r4, [sp, #4]
 800186a:	9500      	str	r5, [sp, #0]
 800186c:	f000 ff68 	bl	8002740 <xTaskCreateStatic>
 8001870:	9005      	str	r0, [sp, #20]
 8001872:	e7e1      	b.n	8001838 <osThreadNew+0x70>
    prio  = (UBaseType_t)osPriorityNormal;
 8001874:	2718      	movs	r7, #24
    stack = configMINIMAL_STACK_SIZE;
 8001876:	2280      	movs	r2, #128	; 0x80
    name  = &empty;
 8001878:	f10d 0113 	add.w	r1, sp, #19
 800187c:	e7e7      	b.n	800184e <osThreadNew+0x86>
        return (NULL);
 800187e:	2000      	movs	r0, #0
 8001880:	e7db      	b.n	800183a <osThreadNew+0x72>
 8001882:	bf00      	nop
 8001884:	20000280 	.word	0x20000280

08001888 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001888:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800188a:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800188e:	b113      	cbz	r3, 8001896 <osDelay+0xe>
    stat = osErrorISR;
 8001890:	f06f 0005 	mvn.w	r0, #5
 8001894:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001896:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f8      	bne.n	8001890 <osDelay+0x8>
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <osDelay+0x30>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d103      	bne.n	80018ae <osDelay+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80018a6:	f3ef 8311 	mrs	r3, BASEPRI
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f0      	bne.n	8001890 <osDelay+0x8>
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 80018ae:	b110      	cbz	r0, 80018b6 <osDelay+0x2e>
      vTaskDelay(ticks);
 80018b0:	f001 f900 	bl	8002ab4 <vTaskDelay>
    stat = osOK;
 80018b4:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 80018b6:	bd08      	pop	{r3, pc}
 80018b8:	20000280 	.word	0x20000280

080018bc <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <vApplicationGetIdleTaskMemory+0x10>)
 80018be:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <vApplicationGetIdleTaskMemory+0x14>)
 80018c2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	2000022c 	.word	0x2000022c
 80018d0:	2000002c 	.word	0x2000002c

080018d4 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80018d4:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <vApplicationGetTimerTaskMemory+0x10>)
 80018d6:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80018d8:	4b03      	ldr	r3, [pc, #12]	; (80018e8 <vApplicationGetTimerTaskMemory+0x14>)
 80018da:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80018dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	4770      	bx	lr
 80018e4:	20000684 	.word	0x20000684
 80018e8:	20000284 	.word	0x20000284

080018ec <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018ec:	f100 0308 	add.w	r3, r0, #8
 80018f0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80018f2:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018f6:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018f8:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80018fa:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80018fc:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80018fe:	6003      	str	r3, [r0, #0]
 8001900:	4770      	bx	lr

08001902 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001902:	2300      	movs	r3, #0
 8001904:	6103      	str	r3, [r0, #16]
 8001906:	4770      	bx	lr

08001908 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001908:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800190a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001914:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001916:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001918:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800191a:	3301      	adds	r3, #1
 800191c:	6003      	str	r3, [r0, #0]
 800191e:	4770      	bx	lr

08001920 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001920:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001922:	1c53      	adds	r3, r2, #1
{
 8001924:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8001926:	d10a      	bne.n	800193e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001928:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800192e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001930:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001932:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001934:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001936:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001938:	3301      	adds	r3, #1
 800193a:	6003      	str	r3, [r0, #0]
 800193c:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800193e:	f100 0308 	add.w	r3, r0, #8
 8001942:	685c      	ldr	r4, [r3, #4]
 8001944:	6825      	ldr	r5, [r4, #0]
 8001946:	42aa      	cmp	r2, r5
 8001948:	d3ef      	bcc.n	800192a <vListInsert+0xa>
 800194a:	4623      	mov	r3, r4
 800194c:	e7f9      	b.n	8001942 <vListInsert+0x22>

0800194e <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800194e:	6841      	ldr	r1, [r0, #4]
 8001950:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001952:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001954:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001956:	6882      	ldr	r2, [r0, #8]
 8001958:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800195a:	6859      	ldr	r1, [r3, #4]
 800195c:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800195e:	bf08      	it	eq
 8001960:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001962:	2200      	movs	r2, #0
 8001964:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	3a01      	subs	r2, #1
 800196a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800196c:	6818      	ldr	r0, [r3, #0]
}
 800196e:	4770      	bx	lr

08001970 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001970:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001976:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <prvTaskExitError+0x3c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	3301      	adds	r3, #1
 800197c:	d008      	beq.n	8001990 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800197e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001982:	f383 8811 	msr	BASEPRI, r3
 8001986:	f3bf 8f6f 	isb	sy
 800198a:	f3bf 8f4f 	dsb	sy
 800198e:	e7fe      	b.n	800198e <prvTaskExitError+0x1e>
 8001990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001994:	f383 8811 	msr	BASEPRI, r3
 8001998:	f3bf 8f6f 	isb	sy
 800199c:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80019a0:	9b01      	ldr	r3, [sp, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0fc      	beq.n	80019a0 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80019a6:	b002      	add	sp, #8
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	20000008 	.word	0x20000008

080019b0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80019b0:	4808      	ldr	r0, [pc, #32]	; (80019d4 <prvPortStartFirstTask+0x24>)
 80019b2:	6800      	ldr	r0, [r0, #0]
 80019b4:	6800      	ldr	r0, [r0, #0]
 80019b6:	f380 8808 	msr	MSP, r0
 80019ba:	f04f 0000 	mov.w	r0, #0
 80019be:	f380 8814 	msr	CONTROL, r0
 80019c2:	b662      	cpsie	i
 80019c4:	b661      	cpsie	f
 80019c6:	f3bf 8f4f 	dsb	sy
 80019ca:	f3bf 8f6f 	isb	sy
 80019ce:	df00      	svc	0
 80019d0:	bf00      	nop
 80019d2:	0000      	.short	0x0000
 80019d4:	e000ed08 	.word	0xe000ed08

080019d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80019d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80019e8 <vPortEnableVFP+0x10>
 80019dc:	6801      	ldr	r1, [r0, #0]
 80019de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80019e2:	6001      	str	r1, [r0, #0]
 80019e4:	4770      	bx	lr
 80019e6:	0000      	.short	0x0000
 80019e8:	e000ed88 	.word	0xe000ed88

080019ec <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80019ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019f0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80019f4:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <pxPortInitialiseStack+0x28>)
 80019f6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80019fa:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80019fe:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001a02:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001a06:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001a0a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8001a0e:	3844      	subs	r0, #68	; 0x44
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	08001971 	.word	0x08001971
	...

08001a20 <SVC_Handler>:
	__asm volatile (
 8001a20:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <pxCurrentTCBConst2>)
 8001a22:	6819      	ldr	r1, [r3, #0]
 8001a24:	6808      	ldr	r0, [r1, #0]
 8001a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a2a:	f380 8809 	msr	PSP, r0
 8001a2e:	f3bf 8f6f 	isb	sy
 8001a32:	f04f 0000 	mov.w	r0, #0
 8001a36:	f380 8811 	msr	BASEPRI, r0
 8001a3a:	4770      	bx	lr
 8001a3c:	f3af 8000 	nop.w

08001a40 <pxCurrentTCBConst2>:
 8001a40:	200042f8 	.word	0x200042f8

08001a44 <vPortEnterCritical>:
 8001a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a48:	f383 8811 	msr	BASEPRI, r3
 8001a4c:	f3bf 8f6f 	isb	sy
 8001a50:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001a54:	4a0a      	ldr	r2, [pc, #40]	; (8001a80 <vPortEnterCritical+0x3c>)
 8001a56:	6813      	ldr	r3, [r2, #0]
 8001a58:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8001a5a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8001a5c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8001a5e:	d10d      	bne.n	8001a7c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <vPortEnterCritical+0x40>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001a68:	d008      	beq.n	8001a7c <vPortEnterCritical+0x38>
 8001a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a6e:	f383 8811 	msr	BASEPRI, r3
 8001a72:	f3bf 8f6f 	isb	sy
 8001a76:	f3bf 8f4f 	dsb	sy
 8001a7a:	e7fe      	b.n	8001a7a <vPortEnterCritical+0x36>
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	20000008 	.word	0x20000008
 8001a84:	e000ed04 	.word	0xe000ed04

08001a88 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001a88:	4a08      	ldr	r2, [pc, #32]	; (8001aac <vPortExitCritical+0x24>)
 8001a8a:	6813      	ldr	r3, [r2, #0]
 8001a8c:	b943      	cbnz	r3, 8001aa0 <vPortExitCritical+0x18>
 8001a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a92:	f383 8811 	msr	BASEPRI, r3
 8001a96:	f3bf 8f6f 	isb	sy
 8001a9a:	f3bf 8f4f 	dsb	sy
 8001a9e:	e7fe      	b.n	8001a9e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001aa4:	b90b      	cbnz	r3, 8001aaa <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001aa6:	f383 8811 	msr	BASEPRI, r3
 8001aaa:	4770      	bx	lr
 8001aac:	20000008 	.word	0x20000008

08001ab0 <PendSV_Handler>:
	__asm volatile
 8001ab0:	f3ef 8009 	mrs	r0, PSP
 8001ab4:	f3bf 8f6f 	isb	sy
 8001ab8:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <pxCurrentTCBConst>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	f01e 0f10 	tst.w	lr, #16
 8001ac0:	bf08      	it	eq
 8001ac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001ac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001aca:	6010      	str	r0, [r2, #0]
 8001acc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001ad0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001ad4:	f380 8811 	msr	BASEPRI, r0
 8001ad8:	f3bf 8f4f 	dsb	sy
 8001adc:	f3bf 8f6f 	isb	sy
 8001ae0:	f001 f80c 	bl	8002afc <vTaskSwitchContext>
 8001ae4:	f04f 0000 	mov.w	r0, #0
 8001ae8:	f380 8811 	msr	BASEPRI, r0
 8001aec:	bc09      	pop	{r0, r3}
 8001aee:	6819      	ldr	r1, [r3, #0]
 8001af0:	6808      	ldr	r0, [r1, #0]
 8001af2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001af6:	f01e 0f10 	tst.w	lr, #16
 8001afa:	bf08      	it	eq
 8001afc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001b00:	f380 8809 	msr	PSP, r0
 8001b04:	f3bf 8f6f 	isb	sy
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	f3af 8000 	nop.w

08001b10 <pxCurrentTCBConst>:
 8001b10:	200042f8 	.word	0x200042f8

08001b14 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001b14:	4a08      	ldr	r2, [pc, #32]	; (8001b38 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001b16:	4909      	ldr	r1, [pc, #36]	; (8001b3c <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001b1c:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <vPortSetupTimerInterrupt+0x2c>)
 8001b20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b2a:	4906      	ldr	r1, [pc, #24]	; (8001b44 <vPortSetupTimerInterrupt+0x30>)
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001b30:	2307      	movs	r3, #7
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	e000e010 	.word	0xe000e010
 8001b3c:	e000e018 	.word	0xe000e018
 8001b40:	2000000c 	.word	0x2000000c
 8001b44:	e000e014 	.word	0xe000e014

08001b48 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001b48:	4b39      	ldr	r3, [pc, #228]	; (8001c30 <xPortStartScheduler+0xe8>)
 8001b4a:	4a3a      	ldr	r2, [pc, #232]	; (8001c34 <xPortStartScheduler+0xec>)
{
 8001b4c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001b4e:	6819      	ldr	r1, [r3, #0]
 8001b50:	4291      	cmp	r1, r2
 8001b52:	d108      	bne.n	8001b66 <xPortStartScheduler+0x1e>
	__asm volatile
 8001b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b58:	f383 8811 	msr	BASEPRI, r3
 8001b5c:	f3bf 8f6f 	isb	sy
 8001b60:	f3bf 8f4f 	dsb	sy
 8001b64:	e7fe      	b.n	8001b64 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4b33      	ldr	r3, [pc, #204]	; (8001c38 <xPortStartScheduler+0xf0>)
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d108      	bne.n	8001b80 <xPortStartScheduler+0x38>
 8001b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b72:	f383 8811 	msr	BASEPRI, r3
 8001b76:	f3bf 8f6f 	isb	sy
 8001b7a:	f3bf 8f4f 	dsb	sy
 8001b7e:	e7fe      	b.n	8001b7e <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001b80:	4b2e      	ldr	r3, [pc, #184]	; (8001c3c <xPortStartScheduler+0xf4>)
 8001b82:	781a      	ldrb	r2, [r3, #0]
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001b88:	22ff      	movs	r2, #255	; 0xff
 8001b8a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001b8c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001b8e:	4a2c      	ldr	r2, [pc, #176]	; (8001c40 <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001b96:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001b9a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b9e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001ba0:	4b28      	ldr	r3, [pc, #160]	; (8001c44 <xPortStartScheduler+0xfc>)
 8001ba2:	2207      	movs	r2, #7
 8001ba4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001bac:	0600      	lsls	r0, r0, #24
 8001bae:	f102 34ff 	add.w	r4, r2, #4294967295
 8001bb2:	d40d      	bmi.n	8001bd0 <xPortStartScheduler+0x88>
 8001bb4:	b101      	cbz	r1, 8001bb8 <xPortStartScheduler+0x70>
 8001bb6:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	2a03      	cmp	r2, #3
 8001bbc:	d011      	beq.n	8001be2 <xPortStartScheduler+0x9a>
 8001bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bc2:	f383 8811 	msr	BASEPRI, r3
 8001bc6:	f3bf 8f6f 	isb	sy
 8001bca:	f3bf 8f4f 	dsb	sy
 8001bce:	e7fe      	b.n	8001bce <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001bd0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001bd4:	0052      	lsls	r2, r2, #1
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	f88d 2003 	strb.w	r2, [sp, #3]
 8001bdc:	2101      	movs	r1, #1
 8001bde:	4622      	mov	r2, r4
 8001be0:	e7e2      	b.n	8001ba8 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001be2:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001be4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001be8:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001bea:	9b01      	ldr	r3, [sp, #4]
 8001bec:	4a13      	ldr	r2, [pc, #76]	; (8001c3c <xPortStartScheduler+0xf4>)
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <xPortStartScheduler+0x100>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001bfa:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001c02:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8001c04:	f7ff ff86 	bl	8001b14 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001c08:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <xPortStartScheduler+0x104>)
 8001c0a:	2400      	movs	r4, #0
 8001c0c:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8001c0e:	f7ff fee3 	bl	80019d8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001c12:	4a0f      	ldr	r2, [pc, #60]	; (8001c50 <xPortStartScheduler+0x108>)
 8001c14:	6813      	ldr	r3, [r2, #0]
 8001c16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001c1a:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8001c1c:	f7ff fec8 	bl	80019b0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8001c20:	f000 ff6c 	bl	8002afc <vTaskSwitchContext>
	prvTaskExitError();
 8001c24:	f7ff fea4 	bl	8001970 <prvTaskExitError>
}
 8001c28:	4620      	mov	r0, r4
 8001c2a:	b002      	add	sp, #8
 8001c2c:	bd10      	pop	{r4, pc}
 8001c2e:	bf00      	nop
 8001c30:	e000ed00 	.word	0xe000ed00
 8001c34:	410fc271 	.word	0x410fc271
 8001c38:	410fc270 	.word	0x410fc270
 8001c3c:	e000e400 	.word	0xe000e400
 8001c40:	200006d8 	.word	0x200006d8
 8001c44:	200006dc 	.word	0x200006dc
 8001c48:	e000ed20 	.word	0xe000ed20
 8001c4c:	20000008 	.word	0x20000008
 8001c50:	e000ef34 	.word	0xe000ef34

08001c54 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8001c54:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001c58:	2b0f      	cmp	r3, #15
 8001c5a:	d90e      	bls.n	8001c7a <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001c5c:	4a10      	ldr	r2, [pc, #64]	; (8001ca0 <vPortValidateInterruptPriority+0x4c>)
 8001c5e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001c60:	4a10      	ldr	r2, [pc, #64]	; (8001ca4 <vPortValidateInterruptPriority+0x50>)
 8001c62:	7812      	ldrb	r2, [r2, #0]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d908      	bls.n	8001c7a <vPortValidateInterruptPriority+0x26>
 8001c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c6c:	f383 8811 	msr	BASEPRI, r3
 8001c70:	f3bf 8f6f 	isb	sy
 8001c74:	f3bf 8f4f 	dsb	sy
 8001c78:	e7fe      	b.n	8001c78 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <vPortValidateInterruptPriority+0x54>)
 8001c7c:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <vPortValidateInterruptPriority+0x58>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6812      	ldr	r2, [r2, #0]
 8001c82:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d908      	bls.n	8001c9c <vPortValidateInterruptPriority+0x48>
 8001c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c8e:	f383 8811 	msr	BASEPRI, r3
 8001c92:	f3bf 8f6f 	isb	sy
 8001c96:	f3bf 8f4f 	dsb	sy
 8001c9a:	e7fe      	b.n	8001c9a <vPortValidateInterruptPriority+0x46>
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000e3f0 	.word	0xe000e3f0
 8001ca4:	200006d8 	.word	0x200006d8
 8001ca8:	e000ed0c 	.word	0xe000ed0c
 8001cac:	200006dc 	.word	0x200006dc

08001cb0 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001cb0:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001cb2:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <prvInsertBlockIntoFreeList+0x40>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	4282      	cmp	r2, r0
 8001cb8:	d318      	bcc.n	8001cec <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001cba:	685c      	ldr	r4, [r3, #4]
 8001cbc:	1919      	adds	r1, r3, r4
 8001cbe:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001cc0:	bf01      	itttt	eq
 8001cc2:	6841      	ldreq	r1, [r0, #4]
 8001cc4:	4618      	moveq	r0, r3
 8001cc6:	1909      	addeq	r1, r1, r4
 8001cc8:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001cca:	6844      	ldr	r4, [r0, #4]
 8001ccc:	1901      	adds	r1, r0, r4
 8001cce:	428a      	cmp	r2, r1
 8001cd0:	d107      	bne.n	8001ce2 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001cd2:	4908      	ldr	r1, [pc, #32]	; (8001cf4 <prvInsertBlockIntoFreeList+0x44>)
 8001cd4:	6809      	ldr	r1, [r1, #0]
 8001cd6:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001cd8:	bf1f      	itttt	ne
 8001cda:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001cdc:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001cde:	1909      	addne	r1, r1, r4
 8001ce0:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001ce2:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001ce4:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001ce6:	bf18      	it	ne
 8001ce8:	6018      	strne	r0, [r3, #0]
 8001cea:	bd10      	pop	{r4, pc}
 8001cec:	4613      	mov	r3, r2
 8001cee:	e7e1      	b.n	8001cb4 <prvInsertBlockIntoFreeList+0x4>
 8001cf0:	200042f0 	.word	0x200042f0
 8001cf4:	200006e0 	.word	0x200006e0

08001cf8 <pvPortMalloc>:
{
 8001cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cfc:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8001cfe:	f000 fdc7 	bl	8002890 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8001d02:	493e      	ldr	r1, [pc, #248]	; (8001dfc <pvPortMalloc+0x104>)
 8001d04:	4d3e      	ldr	r5, [pc, #248]	; (8001e00 <pvPortMalloc+0x108>)
 8001d06:	680b      	ldr	r3, [r1, #0]
 8001d08:	bb0b      	cbnz	r3, 8001d4e <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8001d0a:	4a3e      	ldr	r2, [pc, #248]	; (8001e04 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001d0c:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001d0e:	bf1f      	itttt	ne
 8001d10:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001d12:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001d16:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8001d1a:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001d1c:	bf14      	ite	ne
 8001d1e:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001d20:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001d24:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8001d26:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001d28:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001d2c:	4e36      	ldr	r6, [pc, #216]	; (8001e08 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8001d2e:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001d30:	2000      	movs	r0, #0
 8001d32:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001d34:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8001d36:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001d38:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001d3a:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001d3c:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001d3e:	4b33      	ldr	r3, [pc, #204]	; (8001e0c <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001d40:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001d42:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001d44:	4b32      	ldr	r3, [pc, #200]	; (8001e10 <pvPortMalloc+0x118>)
 8001d46:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001d48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001d4c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001d4e:	682f      	ldr	r7, [r5, #0]
 8001d50:	4227      	tst	r7, r4
 8001d52:	d116      	bne.n	8001d82 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8001d54:	2c00      	cmp	r4, #0
 8001d56:	d041      	beq.n	8001ddc <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8001d58:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001d5c:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001d5e:	bf1c      	itt	ne
 8001d60:	f023 0307 	bicne.w	r3, r3, #7
 8001d64:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001d66:	b163      	cbz	r3, 8001d82 <pvPortMalloc+0x8a>
 8001d68:	4a29      	ldr	r2, [pc, #164]	; (8001e10 <pvPortMalloc+0x118>)
 8001d6a:	6816      	ldr	r6, [r2, #0]
 8001d6c:	42b3      	cmp	r3, r6
 8001d6e:	4690      	mov	r8, r2
 8001d70:	d807      	bhi.n	8001d82 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8001d72:	4a25      	ldr	r2, [pc, #148]	; (8001e08 <pvPortMalloc+0x110>)
 8001d74:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001d76:	6868      	ldr	r0, [r5, #4]
 8001d78:	4283      	cmp	r3, r0
 8001d7a:	d804      	bhi.n	8001d86 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8001d7c:	6809      	ldr	r1, [r1, #0]
 8001d7e:	428d      	cmp	r5, r1
 8001d80:	d107      	bne.n	8001d92 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8001d82:	2400      	movs	r4, #0
 8001d84:	e02a      	b.n	8001ddc <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001d86:	682c      	ldr	r4, [r5, #0]
 8001d88:	2c00      	cmp	r4, #0
 8001d8a:	d0f7      	beq.n	8001d7c <pvPortMalloc+0x84>
 8001d8c:	462a      	mov	r2, r5
 8001d8e:	4625      	mov	r5, r4
 8001d90:	e7f1      	b.n	8001d76 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001d92:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001d94:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001d96:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001d98:	1ac2      	subs	r2, r0, r3
 8001d9a:	2a10      	cmp	r2, #16
 8001d9c:	d90f      	bls.n	8001dbe <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001d9e:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001da0:	0741      	lsls	r1, r0, #29
 8001da2:	d008      	beq.n	8001db6 <pvPortMalloc+0xbe>
 8001da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001da8:	f383 8811 	msr	BASEPRI, r3
 8001dac:	f3bf 8f6f 	isb	sy
 8001db0:	f3bf 8f4f 	dsb	sy
 8001db4:	e7fe      	b.n	8001db4 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001db6:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001db8:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001dba:	f7ff ff79 	bl	8001cb0 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001dbe:	4913      	ldr	r1, [pc, #76]	; (8001e0c <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001dc0:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001dc2:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001dc4:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001dc6:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001dc8:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8001dca:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001dce:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001dd2:	bf38      	it	cc
 8001dd4:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001dd6:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001dd8:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001dda:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8001ddc:	f000 fdf6 	bl	80029cc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001de0:	0763      	lsls	r3, r4, #29
 8001de2:	d008      	beq.n	8001df6 <pvPortMalloc+0xfe>
 8001de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001de8:	f383 8811 	msr	BASEPRI, r3
 8001dec:	f3bf 8f6f 	isb	sy
 8001df0:	f3bf 8f4f 	dsb	sy
 8001df4:	e7fe      	b.n	8001df4 <pvPortMalloc+0xfc>
}
 8001df6:	4620      	mov	r0, r4
 8001df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001dfc:	200006e0 	.word	0x200006e0
 8001e00:	200042e4 	.word	0x200042e4
 8001e04:	200006e4 	.word	0x200006e4
 8001e08:	200042f0 	.word	0x200042f0
 8001e0c:	200042ec 	.word	0x200042ec
 8001e10:	200042e8 	.word	0x200042e8

08001e14 <vPortFree>:
{
 8001e14:	b510      	push	{r4, lr}
	if( pv != NULL )
 8001e16:	4604      	mov	r4, r0
 8001e18:	b370      	cbz	r0, 8001e78 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001e1a:	4a18      	ldr	r2, [pc, #96]	; (8001e7c <vPortFree+0x68>)
 8001e1c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001e20:	6812      	ldr	r2, [r2, #0]
 8001e22:	4213      	tst	r3, r2
 8001e24:	d108      	bne.n	8001e38 <vPortFree+0x24>
 8001e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e2a:	f383 8811 	msr	BASEPRI, r3
 8001e2e:	f3bf 8f6f 	isb	sy
 8001e32:	f3bf 8f4f 	dsb	sy
 8001e36:	e7fe      	b.n	8001e36 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001e38:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001e3c:	b141      	cbz	r1, 8001e50 <vPortFree+0x3c>
 8001e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e42:	f383 8811 	msr	BASEPRI, r3
 8001e46:	f3bf 8f6f 	isb	sy
 8001e4a:	f3bf 8f4f 	dsb	sy
 8001e4e:	e7fe      	b.n	8001e4e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001e50:	ea23 0302 	bic.w	r3, r3, r2
 8001e54:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001e58:	f000 fd1a 	bl	8002890 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001e5c:	4a08      	ldr	r2, [pc, #32]	; (8001e80 <vPortFree+0x6c>)
 8001e5e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8001e62:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001e64:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001e68:	440b      	add	r3, r1
 8001e6a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001e6c:	f7ff ff20 	bl	8001cb0 <prvInsertBlockIntoFreeList>
}
 8001e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8001e74:	f000 bdaa 	b.w	80029cc <xTaskResumeAll>
 8001e78:	bd10      	pop	{r4, pc}
 8001e7a:	bf00      	nop
 8001e7c:	200042e4 	.word	0x200042e4
 8001e80:	200042e8 	.word	0x200042e8

08001e84 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001e84:	b510      	push	{r4, lr}
 8001e86:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001e88:	f7ff fddc 	bl	8001a44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001e8c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8001e8e:	f7ff fdfb 	bl	8001a88 <vPortExitCritical>

	return xReturn;
}
 8001e92:	fab4 f084 	clz	r0, r4
 8001e96:	0940      	lsrs	r0, r0, #5
 8001e98:	bd10      	pop	{r4, pc}

08001e9a <prvCopyDataToQueue>:
{
 8001e9a:	b570      	push	{r4, r5, r6, lr}
 8001e9c:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001e9e:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001ea0:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 8001ea2:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001ea4:	b942      	cbnz	r2, 8001eb8 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001ea6:	6805      	ldr	r5, [r0, #0]
 8001ea8:	b99d      	cbnz	r5, 8001ed2 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001eaa:	6840      	ldr	r0, [r0, #4]
 8001eac:	f000 ff38 	bl	8002d20 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8001eb0:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001eb2:	3601      	adds	r6, #1
 8001eb4:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8001eb6:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8001eb8:	b96d      	cbnz	r5, 8001ed6 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001eba:	6880      	ldr	r0, [r0, #8]
 8001ebc:	f001 fcae 	bl	800381c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001ec0:	68a3      	ldr	r3, [r4, #8]
 8001ec2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001ec4:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001ec6:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001ec8:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d301      	bcc.n	8001ed2 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001ece:	6823      	ldr	r3, [r4, #0]
 8001ed0:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	e7ed      	b.n	8001eb2 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ed6:	68c0      	ldr	r0, [r0, #12]
 8001ed8:	f001 fca0 	bl	800381c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001edc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ede:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001ee0:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001ee2:	425b      	negs	r3, r3
 8001ee4:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001ee6:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001ee8:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001eea:	bf3e      	ittt	cc
 8001eec:	6862      	ldrcc	r2, [r4, #4]
 8001eee:	189b      	addcc	r3, r3, r2
 8001ef0:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8001ef2:	2d02      	cmp	r5, #2
 8001ef4:	d1ed      	bne.n	8001ed2 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001ef6:	b10e      	cbz	r6, 8001efc <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8001ef8:	3e01      	subs	r6, #1
 8001efa:	e7ea      	b.n	8001ed2 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8001efc:	4630      	mov	r0, r6
 8001efe:	e7d8      	b.n	8001eb2 <prvCopyDataToQueue+0x18>

08001f00 <prvCopyDataFromQueue>:
{
 8001f00:	4603      	mov	r3, r0
 8001f02:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001f04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8001f06:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001f08:	b162      	cbz	r2, 8001f24 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001f0a:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001f0c:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001f0e:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001f10:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001f12:	60d9      	str	r1, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001f14:	bf24      	itt	cs
 8001f16:	6819      	ldrcs	r1, [r3, #0]
 8001f18:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001f1a:	68d9      	ldr	r1, [r3, #12]
}
 8001f1c:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001f20:	f001 bc7c 	b.w	800381c <memcpy>
}
 8001f24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <prvUnlockQueue>:
{
 8001f2a:	b570      	push	{r4, r5, r6, lr}
 8001f2c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8001f2e:	f7ff fd89 	bl	8001a44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001f32:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f36:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8001f3a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001f3c:	2d00      	cmp	r5, #0
 8001f3e:	dc14      	bgt.n	8001f6a <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8001f40:	23ff      	movs	r3, #255	; 0xff
 8001f42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8001f46:	f7ff fd9f 	bl	8001a88 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001f4a:	f7ff fd7b 	bl	8001a44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001f4e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f52:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8001f56:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001f58:	2d00      	cmp	r5, #0
 8001f5a:	dc12      	bgt.n	8001f82 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8001f5c:	23ff      	movs	r3, #255	; 0xff
 8001f5e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8001f62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8001f66:	f7ff bd8f 	b.w	8001a88 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0e7      	beq.n	8001f40 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f70:	4630      	mov	r0, r6
 8001f72:	f000 fe37 	bl	8002be4 <xTaskRemoveFromEventList>
 8001f76:	b108      	cbz	r0, 8001f7c <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8001f78:	f000 febc 	bl	8002cf4 <vTaskMissedYield>
 8001f7c:	3d01      	subs	r5, #1
 8001f7e:	b26d      	sxtb	r5, r5
 8001f80:	e7dc      	b.n	8001f3c <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f82:	6923      	ldr	r3, [r4, #16]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0e9      	beq.n	8001f5c <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f88:	4630      	mov	r0, r6
 8001f8a:	f000 fe2b 	bl	8002be4 <xTaskRemoveFromEventList>
 8001f8e:	b108      	cbz	r0, 8001f94 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8001f90:	f000 feb0 	bl	8002cf4 <vTaskMissedYield>
 8001f94:	3d01      	subs	r5, #1
 8001f96:	b26d      	sxtb	r5, r5
 8001f98:	e7de      	b.n	8001f58 <prvUnlockQueue+0x2e>
	...

08001f9c <xQueueGenericReset>:
{
 8001f9c:	b538      	push	{r3, r4, r5, lr}
 8001f9e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8001fa0:	4604      	mov	r4, r0
 8001fa2:	b940      	cbnz	r0, 8001fb6 <xQueueGenericReset+0x1a>
 8001fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fa8:	f383 8811 	msr	BASEPRI, r3
 8001fac:	f3bf 8f6f 	isb	sy
 8001fb0:	f3bf 8f4f 	dsb	sy
 8001fb4:	e7fe      	b.n	8001fb4 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8001fb6:	f7ff fd45 	bl	8001a44 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001fba:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001fbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001fbe:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001fc0:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001fc2:	4343      	muls	r3, r0
 8001fc4:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001fc6:	1a1b      	subs	r3, r3, r0
 8001fc8:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001fca:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001fcc:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001fce:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8001fd0:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001fd2:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8001fd4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001fd8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8001fdc:	b995      	cbnz	r5, 8002004 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001fde:	6923      	ldr	r3, [r4, #16]
 8001fe0:	b163      	cbz	r3, 8001ffc <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001fe2:	f104 0010 	add.w	r0, r4, #16
 8001fe6:	f000 fdfd 	bl	8002be4 <xTaskRemoveFromEventList>
 8001fea:	b138      	cbz	r0, 8001ffc <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8001fec:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <xQueueGenericReset+0x7c>)
 8001fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	f3bf 8f4f 	dsb	sy
 8001ff8:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8001ffc:	f7ff fd44 	bl	8001a88 <vPortExitCritical>
}
 8002000:	2001      	movs	r0, #1
 8002002:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002004:	f104 0010 	add.w	r0, r4, #16
 8002008:	f7ff fc70 	bl	80018ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800200c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002010:	f7ff fc6c 	bl	80018ec <vListInitialise>
 8002014:	e7f2      	b.n	8001ffc <xQueueGenericReset+0x60>
 8002016:	bf00      	nop
 8002018:	e000ed04 	.word	0xe000ed04

0800201c <xQueueGenericCreateStatic>:
	{
 800201c:	b513      	push	{r0, r1, r4, lr}
 800201e:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002020:	b940      	cbnz	r0, 8002034 <xQueueGenericCreateStatic+0x18>
 8002022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002026:	f383 8811 	msr	BASEPRI, r3
 800202a:	f3bf 8f6f 	isb	sy
 800202e:	f3bf 8f4f 	dsb	sy
 8002032:	e7fe      	b.n	8002032 <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8002034:	b943      	cbnz	r3, 8002048 <xQueueGenericCreateStatic+0x2c>
 8002036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800203a:	f383 8811 	msr	BASEPRI, r3
 800203e:	f3bf 8f6f 	isb	sy
 8002042:	f3bf 8f4f 	dsb	sy
 8002046:	e7fe      	b.n	8002046 <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002048:	b14a      	cbz	r2, 800205e <xQueueGenericCreateStatic+0x42>
 800204a:	b9d9      	cbnz	r1, 8002084 <xQueueGenericCreateStatic+0x68>
 800204c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002050:	f383 8811 	msr	BASEPRI, r3
 8002054:	f3bf 8f6f 	isb	sy
 8002058:	f3bf 8f4f 	dsb	sy
 800205c:	e7fe      	b.n	800205c <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800205e:	b189      	cbz	r1, 8002084 <xQueueGenericCreateStatic+0x68>
 8002060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002064:	f383 8811 	msr	BASEPRI, r3
 8002068:	f3bf 8f6f 	isb	sy
 800206c:	f3bf 8f4f 	dsb	sy
 8002070:	e7fe      	b.n	8002070 <xQueueGenericCreateStatic+0x54>
 8002072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002076:	f383 8811 	msr	BASEPRI, r3
 800207a:	f3bf 8f6f 	isb	sy
 800207e:	f3bf 8f4f 	dsb	sy
 8002082:	e7fe      	b.n	8002082 <xQueueGenericCreateStatic+0x66>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002084:	2348      	movs	r3, #72	; 0x48
 8002086:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002088:	9b01      	ldr	r3, [sp, #4]
 800208a:	2b48      	cmp	r3, #72	; 0x48
 800208c:	d1f1      	bne.n	8002072 <xQueueGenericCreateStatic+0x56>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800208e:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002090:	2900      	cmp	r1, #0
 8002092:	bf08      	it	eq
 8002094:	4622      	moveq	r2, r4
	pxNewQueue->uxLength = uxQueueLength;
 8002096:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002098:	6421      	str	r1, [r4, #64]	; 0x40
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800209a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800209e:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80020a0:	4619      	mov	r1, r3
 80020a2:	4620      	mov	r0, r4
 80020a4:	f7ff ff7a 	bl	8001f9c <xQueueGenericReset>
	}
 80020a8:	4620      	mov	r0, r4
 80020aa:	b002      	add	sp, #8
 80020ac:	bd10      	pop	{r4, pc}
	...

080020b0 <xQueueGenericSend>:
{
 80020b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80020b4:	4689      	mov	r9, r1
 80020b6:	9201      	str	r2, [sp, #4]
 80020b8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80020ba:	4604      	mov	r4, r0
 80020bc:	b940      	cbnz	r0, 80020d0 <xQueueGenericSend+0x20>
 80020be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c2:	f383 8811 	msr	BASEPRI, r3
 80020c6:	f3bf 8f6f 	isb	sy
 80020ca:	f3bf 8f4f 	dsb	sy
 80020ce:	e7fe      	b.n	80020ce <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80020d0:	2900      	cmp	r1, #0
 80020d2:	f040 8088 	bne.w	80021e6 <xQueueGenericSend+0x136>
 80020d6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 8084 	beq.w	80021e6 <xQueueGenericSend+0x136>
 80020de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020e2:	f383 8811 	msr	BASEPRI, r3
 80020e6:	f3bf 8f6f 	isb	sy
 80020ea:	f3bf 8f4f 	dsb	sy
 80020ee:	e7fe      	b.n	80020ee <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80020f0:	9e01      	ldr	r6, [sp, #4]
 80020f2:	2e00      	cmp	r6, #0
 80020f4:	f000 8082 	beq.w	80021fc <xQueueGenericSend+0x14c>
 80020f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020fc:	f383 8811 	msr	BASEPRI, r3
 8002100:	f3bf 8f6f 	isb	sy
 8002104:	f3bf 8f4f 	dsb	sy
 8002108:	e7fe      	b.n	8002108 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 800210a:	9d01      	ldr	r5, [sp, #4]
 800210c:	b91d      	cbnz	r5, 8002116 <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 800210e:	f7ff fcbb 	bl	8001a88 <vPortExitCritical>
			return errQUEUE_FULL;
 8002112:	2000      	movs	r0, #0
 8002114:	e058      	b.n	80021c8 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8002116:	b916      	cbnz	r6, 800211e <xQueueGenericSend+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002118:	a802      	add	r0, sp, #8
 800211a:	f000 fda3 	bl	8002c64 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800211e:	f7ff fcb3 	bl	8001a88 <vPortExitCritical>
		vTaskSuspendAll();
 8002122:	f000 fbb5 	bl	8002890 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002126:	f7ff fc8d 	bl	8001a44 <vPortEnterCritical>
 800212a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800212e:	2bff      	cmp	r3, #255	; 0xff
 8002130:	bf08      	it	eq
 8002132:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8002136:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800213a:	2bff      	cmp	r3, #255	; 0xff
 800213c:	bf08      	it	eq
 800213e:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8002142:	f7ff fca1 	bl	8001a88 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002146:	a901      	add	r1, sp, #4
 8002148:	a802      	add	r0, sp, #8
 800214a:	f000 fd97 	bl	8002c7c <xTaskCheckForTimeOut>
 800214e:	2800      	cmp	r0, #0
 8002150:	d143      	bne.n	80021da <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002152:	f7ff fc77 	bl	8001a44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002156:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8002158:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800215a:	f7ff fc95 	bl	8001a88 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800215e:	42ae      	cmp	r6, r5
 8002160:	d135      	bne.n	80021ce <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002162:	9901      	ldr	r1, [sp, #4]
 8002164:	f104 0010 	add.w	r0, r4, #16
 8002168:	f000 fd04 	bl	8002b74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800216c:	4620      	mov	r0, r4
 800216e:	f7ff fedc 	bl	8001f2a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002172:	f000 fc2b 	bl	80029cc <xTaskResumeAll>
 8002176:	b938      	cbnz	r0, 8002188 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8002178:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800217c:	f8ca 3000 	str.w	r3, [sl]
 8002180:	f3bf 8f4f 	dsb	sy
 8002184:	f3bf 8f6f 	isb	sy
 8002188:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800218a:	f7ff fc5b 	bl	8001a44 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800218e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002190:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002192:	429a      	cmp	r2, r3
 8002194:	d301      	bcc.n	800219a <xQueueGenericSend+0xea>
 8002196:	2f02      	cmp	r7, #2
 8002198:	d1b7      	bne.n	800210a <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800219a:	463a      	mov	r2, r7
 800219c:	4649      	mov	r1, r9
 800219e:	4620      	mov	r0, r4
 80021a0:	f7ff fe7b 	bl	8001e9a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021a6:	b11b      	cbz	r3, 80021b0 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80021ac:	f000 fd1a 	bl	8002be4 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80021b0:	b138      	cbz	r0, 80021c2 <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 80021b2:	4b19      	ldr	r3, [pc, #100]	; (8002218 <xQueueGenericSend+0x168>)
 80021b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	f3bf 8f4f 	dsb	sy
 80021be:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80021c2:	f7ff fc61 	bl	8001a88 <vPortExitCritical>
				return pdPASS;
 80021c6:	2001      	movs	r0, #1
}
 80021c8:	b004      	add	sp, #16
 80021ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 80021ce:	4620      	mov	r0, r4
 80021d0:	f7ff feab 	bl	8001f2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80021d4:	f000 fbfa 	bl	80029cc <xTaskResumeAll>
 80021d8:	e7d6      	b.n	8002188 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 80021da:	4620      	mov	r0, r4
 80021dc:	f7ff fea5 	bl	8001f2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80021e0:	f000 fbf4 	bl	80029cc <xTaskResumeAll>
 80021e4:	e795      	b.n	8002112 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80021e6:	2f02      	cmp	r7, #2
 80021e8:	d102      	bne.n	80021f0 <xQueueGenericSend+0x140>
 80021ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d10a      	bne.n	8002206 <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80021f0:	f000 fd86 	bl	8002d00 <xTaskGetSchedulerState>
 80021f4:	2800      	cmp	r0, #0
 80021f6:	f43f af7b 	beq.w	80020f0 <xQueueGenericSend+0x40>
 80021fa:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80021fc:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8002200:	f8df a014 	ldr.w	sl, [pc, #20]	; 8002218 <xQueueGenericSend+0x168>
 8002204:	e7c1      	b.n	800218a <xQueueGenericSend+0xda>
 8002206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800220a:	f383 8811 	msr	BASEPRI, r3
 800220e:	f3bf 8f6f 	isb	sy
 8002212:	f3bf 8f4f 	dsb	sy
 8002216:	e7fe      	b.n	8002216 <xQueueGenericSend+0x166>
 8002218:	e000ed04 	.word	0xe000ed04

0800221c <xQueueGenericSendFromISR>:
{
 800221c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002220:	4688      	mov	r8, r1
 8002222:	4691      	mov	r9, r2
 8002224:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002226:	4604      	mov	r4, r0
 8002228:	b940      	cbnz	r0, 800223c <xQueueGenericSendFromISR+0x20>
 800222a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800222e:	f383 8811 	msr	BASEPRI, r3
 8002232:	f3bf 8f6f 	isb	sy
 8002236:	f3bf 8f4f 	dsb	sy
 800223a:	e7fe      	b.n	800223a <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800223c:	bb09      	cbnz	r1, 8002282 <xQueueGenericSendFromISR+0x66>
 800223e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002240:	b1fb      	cbz	r3, 8002282 <xQueueGenericSendFromISR+0x66>
 8002242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002246:	f383 8811 	msr	BASEPRI, r3
 800224a:	f3bf 8f6f 	isb	sy
 800224e:	f3bf 8f4f 	dsb	sy
 8002252:	e7fe      	b.n	8002252 <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002254:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002258:	f000 fcc4 	bl	8002be4 <xTaskRemoveFromEventList>
 800225c:	2800      	cmp	r0, #0
 800225e:	d034      	beq.n	80022ca <xQueueGenericSendFromISR+0xae>
							if( pxHigherPriorityTaskWoken != NULL )
 8002260:	f1b9 0f00 	cmp.w	r9, #0
 8002264:	d031      	beq.n	80022ca <xQueueGenericSendFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002266:	2001      	movs	r0, #1
 8002268:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 800226c:	f386 8811 	msr	BASEPRI, r6
}
 8002270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002274:	3501      	adds	r5, #1
 8002276:	b26d      	sxtb	r5, r5
 8002278:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800227c:	e025      	b.n	80022ca <xQueueGenericSendFromISR+0xae>
			xReturn = errQUEUE_FULL;
 800227e:	2000      	movs	r0, #0
 8002280:	e7f4      	b.n	800226c <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002282:	2f02      	cmp	r7, #2
 8002284:	d102      	bne.n	800228c <xQueueGenericSendFromISR+0x70>
 8002286:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002288:	2b01      	cmp	r3, #1
 800228a:	d120      	bne.n	80022ce <xQueueGenericSendFromISR+0xb2>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800228c:	f7ff fce2 	bl	8001c54 <vPortValidateInterruptPriority>
	__asm volatile
 8002290:	f3ef 8611 	mrs	r6, BASEPRI
 8002294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002298:	f383 8811 	msr	BASEPRI, r3
 800229c:	f3bf 8f6f 	isb	sy
 80022a0:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80022a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80022a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d301      	bcc.n	80022b0 <xQueueGenericSendFromISR+0x94>
 80022ac:	2f02      	cmp	r7, #2
 80022ae:	d1e6      	bne.n	800227e <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 80022b0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80022b4:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 80022b6:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80022b8:	4641      	mov	r1, r8
 80022ba:	4620      	mov	r0, r4
 80022bc:	f7ff fded 	bl	8001e9a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80022c0:	1c6b      	adds	r3, r5, #1
 80022c2:	d1d7      	bne.n	8002274 <xQueueGenericSendFromISR+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1c4      	bne.n	8002254 <xQueueGenericSendFromISR+0x38>
			xReturn = pdPASS;
 80022ca:	2001      	movs	r0, #1
 80022cc:	e7ce      	b.n	800226c <xQueueGenericSendFromISR+0x50>
	__asm volatile
 80022ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d2:	f383 8811 	msr	BASEPRI, r3
 80022d6:	f3bf 8f6f 	isb	sy
 80022da:	f3bf 8f4f 	dsb	sy
 80022de:	e7fe      	b.n	80022de <xQueueGenericSendFromISR+0xc2>

080022e0 <xQueueReceive>:
{
 80022e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80022e4:	b085      	sub	sp, #20
 80022e6:	4688      	mov	r8, r1
 80022e8:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80022ea:	4604      	mov	r4, r0
 80022ec:	b940      	cbnz	r0, 8002300 <xQueueReceive+0x20>
 80022ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f2:	f383 8811 	msr	BASEPRI, r3
 80022f6:	f3bf 8f6f 	isb	sy
 80022fa:	f3bf 8f4f 	dsb	sy
 80022fe:	e7fe      	b.n	80022fe <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002300:	2900      	cmp	r1, #0
 8002302:	f040 8086 	bne.w	8002412 <xQueueReceive+0x132>
 8002306:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 8082 	beq.w	8002412 <xQueueReceive+0x132>
 800230e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002312:	f383 8811 	msr	BASEPRI, r3
 8002316:	f3bf 8f6f 	isb	sy
 800231a:	f3bf 8f4f 	dsb	sy
 800231e:	e7fe      	b.n	800231e <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002320:	9e01      	ldr	r6, [sp, #4]
 8002322:	2e00      	cmp	r6, #0
 8002324:	d07a      	beq.n	800241c <xQueueReceive+0x13c>
 8002326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800232a:	f383 8811 	msr	BASEPRI, r3
 800232e:	f3bf 8f6f 	isb	sy
 8002332:	f3bf 8f4f 	dsb	sy
 8002336:	e7fe      	b.n	8002336 <xQueueReceive+0x56>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002338:	9d01      	ldr	r5, [sp, #4]
 800233a:	b91d      	cbnz	r5, 8002344 <xQueueReceive+0x64>
					taskEXIT_CRITICAL();
 800233c:	f7ff fba4 	bl	8001a88 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8002340:	2000      	movs	r0, #0
 8002342:	e052      	b.n	80023ea <xQueueReceive+0x10a>
				else if( xEntryTimeSet == pdFALSE )
 8002344:	b916      	cbnz	r6, 800234c <xQueueReceive+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002346:	a802      	add	r0, sp, #8
 8002348:	f000 fc8c 	bl	8002c64 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800234c:	f7ff fb9c 	bl	8001a88 <vPortExitCritical>
		vTaskSuspendAll();
 8002350:	f000 fa9e 	bl	8002890 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002354:	f7ff fb76 	bl	8001a44 <vPortEnterCritical>
 8002358:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800235c:	2bff      	cmp	r3, #255	; 0xff
 800235e:	bf08      	it	eq
 8002360:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8002364:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002368:	2bff      	cmp	r3, #255	; 0xff
 800236a:	bf08      	it	eq
 800236c:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8002370:	f7ff fb8a 	bl	8001a88 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002374:	a901      	add	r1, sp, #4
 8002376:	a802      	add	r0, sp, #8
 8002378:	f000 fc80 	bl	8002c7c <xTaskCheckForTimeOut>
 800237c:	2800      	cmp	r0, #0
 800237e:	d13d      	bne.n	80023fc <xQueueReceive+0x11c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002380:	4620      	mov	r0, r4
 8002382:	f7ff fd7f 	bl	8001e84 <prvIsQueueEmpty>
 8002386:	b398      	cbz	r0, 80023f0 <xQueueReceive+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002388:	9901      	ldr	r1, [sp, #4]
 800238a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800238e:	f000 fbf1 	bl	8002b74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002392:	4620      	mov	r0, r4
 8002394:	f7ff fdc9 	bl	8001f2a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002398:	f000 fb18 	bl	80029cc <xTaskResumeAll>
 800239c:	b938      	cbnz	r0, 80023ae <xQueueReceive+0xce>
					portYIELD_WITHIN_API();
 800239e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80023a2:	f8c9 3000 	str.w	r3, [r9]
 80023a6:	f3bf 8f4f 	dsb	sy
 80023aa:	f3bf 8f6f 	isb	sy
 80023ae:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80023b0:	f7ff fb48 	bl	8001a44 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023b4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80023b6:	2d00      	cmp	r5, #0
 80023b8:	d0be      	beq.n	8002338 <xQueueReceive+0x58>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80023ba:	4641      	mov	r1, r8
 80023bc:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80023be:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80023c0:	f7ff fd9e 	bl	8001f00 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80023c4:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023c6:	6923      	ldr	r3, [r4, #16]
 80023c8:	b163      	cbz	r3, 80023e4 <xQueueReceive+0x104>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023ca:	f104 0010 	add.w	r0, r4, #16
 80023ce:	f000 fc09 	bl	8002be4 <xTaskRemoveFromEventList>
 80023d2:	b138      	cbz	r0, 80023e4 <xQueueReceive+0x104>
						queueYIELD_IF_USING_PREEMPTION();
 80023d4:	4b13      	ldr	r3, [pc, #76]	; (8002424 <xQueueReceive+0x144>)
 80023d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	f3bf 8f4f 	dsb	sy
 80023e0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80023e4:	f7ff fb50 	bl	8001a88 <vPortExitCritical>
				return pdPASS;
 80023e8:	2001      	movs	r0, #1
}
 80023ea:	b005      	add	sp, #20
 80023ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 80023f0:	4620      	mov	r0, r4
 80023f2:	f7ff fd9a 	bl	8001f2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80023f6:	f000 fae9 	bl	80029cc <xTaskResumeAll>
 80023fa:	e7d8      	b.n	80023ae <xQueueReceive+0xce>
			prvUnlockQueue( pxQueue );
 80023fc:	4620      	mov	r0, r4
 80023fe:	f7ff fd94 	bl	8001f2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002402:	f000 fae3 	bl	80029cc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002406:	4620      	mov	r0, r4
 8002408:	f7ff fd3c 	bl	8001e84 <prvIsQueueEmpty>
 800240c:	2800      	cmp	r0, #0
 800240e:	d0ce      	beq.n	80023ae <xQueueReceive+0xce>
 8002410:	e796      	b.n	8002340 <xQueueReceive+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002412:	f000 fc75 	bl	8002d00 <xTaskGetSchedulerState>
 8002416:	2800      	cmp	r0, #0
 8002418:	d082      	beq.n	8002320 <xQueueReceive+0x40>
 800241a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800241c:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 800241e:	f8df 9004 	ldr.w	r9, [pc, #4]	; 8002424 <xQueueReceive+0x144>
 8002422:	e7c5      	b.n	80023b0 <xQueueReceive+0xd0>
 8002424:	e000ed04 	.word	0xe000ed04

08002428 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002428:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800242a:	4a07      	ldr	r2, [pc, #28]	; (8002448 <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800242c:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800242e:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8002432:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8002436:	b91d      	cbnz	r5, 8002440 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002438:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800243c:	6060      	str	r0, [r4, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800243e:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002440:	3301      	adds	r3, #1
 8002442:	2b08      	cmp	r3, #8
 8002444:	d1f3      	bne.n	800242e <vQueueAddToRegistry+0x6>
 8002446:	bd30      	pop	{r4, r5, pc}
 8002448:	200048f4 	.word	0x200048f4

0800244c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800244c:	b570      	push	{r4, r5, r6, lr}
 800244e:	4604      	mov	r4, r0
 8002450:	460d      	mov	r5, r1
 8002452:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002454:	f7ff faf6 	bl	8001a44 <vPortEnterCritical>
 8002458:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800245c:	2bff      	cmp	r3, #255	; 0xff
 800245e:	bf04      	itt	eq
 8002460:	2300      	moveq	r3, #0
 8002462:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8002466:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800246a:	2bff      	cmp	r3, #255	; 0xff
 800246c:	bf04      	itt	eq
 800246e:	2300      	moveq	r3, #0
 8002470:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8002474:	f7ff fb08 	bl	8001a88 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002478:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800247a:	b92b      	cbnz	r3, 8002488 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800247c:	4632      	mov	r2, r6
 800247e:	4629      	mov	r1, r5
 8002480:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002484:	f000 fb90 	bl	8002ba8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002488:	4620      	mov	r0, r4
	}
 800248a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800248e:	f7ff bd4c 	b.w	8001f2a <prvUnlockQueue>
	...

08002494 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002498:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800249a:	f7ff fad3 	bl	8001a44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800249e:	4b2d      	ldr	r3, [pc, #180]	; (8002554 <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 80024a0:	4c2d      	ldr	r4, [pc, #180]	; (8002558 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	4f2d      	ldr	r7, [pc, #180]	; (800255c <prvAddNewTaskToReadyList+0xc8>)
 80024a6:	3201      	adds	r2, #1
 80024a8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80024aa:	6825      	ldr	r5, [r4, #0]
 80024ac:	2d00      	cmp	r5, #0
 80024ae:	d146      	bne.n	800253e <prvAddNewTaskToReadyList+0xaa>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80024b0:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d11d      	bne.n	80024f4 <prvAddNewTaskToReadyList+0x60>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80024b8:	1978      	adds	r0, r7, r5
 80024ba:	3514      	adds	r5, #20
 80024bc:	f7ff fa16 	bl	80018ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80024c0:	f5b5 6f8c 	cmp.w	r5, #1120	; 0x460
 80024c4:	d1f8      	bne.n	80024b8 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 80024c6:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8002588 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 80024ca:	4d25      	ldr	r5, [pc, #148]	; (8002560 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 80024cc:	4640      	mov	r0, r8
 80024ce:	f7ff fa0d 	bl	80018ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80024d2:	4628      	mov	r0, r5
 80024d4:	f7ff fa0a 	bl	80018ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80024d8:	4822      	ldr	r0, [pc, #136]	; (8002564 <prvAddNewTaskToReadyList+0xd0>)
 80024da:	f7ff fa07 	bl	80018ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80024de:	4822      	ldr	r0, [pc, #136]	; (8002568 <prvAddNewTaskToReadyList+0xd4>)
 80024e0:	f7ff fa04 	bl	80018ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80024e4:	4821      	ldr	r0, [pc, #132]	; (800256c <prvAddNewTaskToReadyList+0xd8>)
 80024e6:	f7ff fa01 	bl	80018ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80024ea:	4b21      	ldr	r3, [pc, #132]	; (8002570 <prvAddNewTaskToReadyList+0xdc>)
 80024ec:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80024f0:	4b20      	ldr	r3, [pc, #128]	; (8002574 <prvAddNewTaskToReadyList+0xe0>)
 80024f2:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80024f4:	4a20      	ldr	r2, [pc, #128]	; (8002578 <prvAddNewTaskToReadyList+0xe4>)
 80024f6:	6813      	ldr	r3, [r2, #0]
 80024f8:	3301      	adds	r3, #1
 80024fa:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80024fc:	4a1f      	ldr	r2, [pc, #124]	; (800257c <prvAddNewTaskToReadyList+0xe8>)
 80024fe:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8002500:	6811      	ldr	r1, [r2, #0]
 8002502:	2014      	movs	r0, #20
 8002504:	428b      	cmp	r3, r1
 8002506:	fb00 7003 	mla	r0, r0, r3, r7
 800250a:	f106 0104 	add.w	r1, r6, #4
 800250e:	bf88      	it	hi
 8002510:	6013      	strhi	r3, [r2, #0]
 8002512:	f7ff f9f9 	bl	8001908 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002516:	f7ff fab7 	bl	8001a88 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800251a:	4b19      	ldr	r3, [pc, #100]	; (8002580 <prvAddNewTaskToReadyList+0xec>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	b163      	cbz	r3, 800253a <prvAddNewTaskToReadyList+0xa6>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002520:	6823      	ldr	r3, [r4, #0]
 8002522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002524:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8002526:	429a      	cmp	r2, r3
 8002528:	d207      	bcs.n	800253a <prvAddNewTaskToReadyList+0xa6>
			taskYIELD_IF_USING_PREEMPTION();
 800252a:	4b16      	ldr	r3, [pc, #88]	; (8002584 <prvAddNewTaskToReadyList+0xf0>)
 800252c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	f3bf 8f4f 	dsb	sy
 8002536:	f3bf 8f6f 	isb	sy
 800253a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800253e:	4b10      	ldr	r3, [pc, #64]	; (8002580 <prvAddNewTaskToReadyList+0xec>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1d6      	bne.n	80024f4 <prvAddNewTaskToReadyList+0x60>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002546:	6823      	ldr	r3, [r4, #0]
 8002548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800254a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800254c:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 800254e:	bf98      	it	ls
 8002550:	6026      	strls	r6, [r4, #0]
 8002552:	e7cf      	b.n	80024f4 <prvAddNewTaskToReadyList+0x60>
 8002554:	20004764 	.word	0x20004764
 8002558:	200042f8 	.word	0x200042f8
 800255c:	20004304 	.word	0x20004304
 8002560:	20004790 	.word	0x20004790
 8002564:	200047ac 	.word	0x200047ac
 8002568:	200047d8 	.word	0x200047d8
 800256c:	200047c4 	.word	0x200047c4
 8002570:	200042fc 	.word	0x200042fc
 8002574:	20004300 	.word	0x20004300
 8002578:	20004774 	.word	0x20004774
 800257c:	20004778 	.word	0x20004778
 8002580:	200047c0 	.word	0x200047c0
 8002584:	e000ed04 	.word	0xe000ed04
 8002588:	2000477c 	.word	0x2000477c

0800258c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800258c:	4a06      	ldr	r2, [pc, #24]	; (80025a8 <prvResetNextTaskUnblockTime+0x1c>)
 800258e:	6813      	ldr	r3, [r2, #0]
 8002590:	6819      	ldr	r1, [r3, #0]
 8002592:	4b06      	ldr	r3, [pc, #24]	; (80025ac <prvResetNextTaskUnblockTime+0x20>)
 8002594:	b919      	cbnz	r1, 800259e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002596:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80025a2:	68d2      	ldr	r2, [r2, #12]
 80025a4:	6852      	ldr	r2, [r2, #4]
 80025a6:	e7f8      	b.n	800259a <prvResetNextTaskUnblockTime+0xe>
 80025a8:	200042fc 	.word	0x200042fc
 80025ac:	200047a4 	.word	0x200047a4

080025b0 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80025b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80025b6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80025ba:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80025bc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80025c0:	3a01      	subs	r2, #1
 80025c2:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80025c6:	469a      	mov	sl, r3
 80025c8:	4681      	mov	r9, r0
 80025ca:	1e4b      	subs	r3, r1, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80025cc:	f026 0607 	bic.w	r6, r6, #7
 80025d0:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80025d4:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80025d6:	7858      	ldrb	r0, [r3, #1]
 80025d8:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 80025dc:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80025e0:	b108      	cbz	r0, 80025e6 <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025e2:	428b      	cmp	r3, r1
 80025e4:	d1f7      	bne.n	80025d6 <prvInitialiseNewTask.isra.2+0x26>
 80025e6:	9d08      	ldr	r5, [sp, #32]
 80025e8:	2d37      	cmp	r5, #55	; 0x37
 80025ea:	bf28      	it	cs
 80025ec:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80025ee:	2700      	movs	r7, #0
	pxNewTCB->uxPriority = uxPriority;
 80025f0:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80025f2:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80025f4:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80025f6:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 80025fa:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80025fc:	f7ff f981 	bl	8001902 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002600:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002604:	f104 0018 	add.w	r0, r4, #24
 8002608:	f7ff f97b 	bl	8001902 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800260c:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800260e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002610:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002612:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002614:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002618:	4652      	mov	r2, sl
 800261a:	4649      	mov	r1, r9
 800261c:	4630      	mov	r0, r6
 800261e:	f7ff f9e5 	bl	80019ec <pxPortInitialiseStack>
 8002622:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8002624:	f1b8 0f00 	cmp.w	r8, #0
 8002628:	d001      	beq.n	800262e <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800262a:	f8c8 4000 	str.w	r4, [r8]
 800262e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002632 <prvDeleteTCB>:
	{
 8002632:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002634:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8002638:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800263a:	b93b      	cbnz	r3, 800264c <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800263c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800263e:	f7ff fbe9 	bl	8001e14 <vPortFree>
				vPortFree( pxTCB );
 8002642:	4620      	mov	r0, r4
	}
 8002644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8002648:	f7ff bbe4 	b.w	8001e14 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800264c:	2b01      	cmp	r3, #1
 800264e:	d0f9      	beq.n	8002644 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002650:	2b02      	cmp	r3, #2
 8002652:	d008      	beq.n	8002666 <prvDeleteTCB+0x34>
 8002654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002658:	f383 8811 	msr	BASEPRI, r3
 800265c:	f3bf 8f6f 	isb	sy
 8002660:	f3bf 8f4f 	dsb	sy
 8002664:	e7fe      	b.n	8002664 <prvDeleteTCB+0x32>
 8002666:	bd10      	pop	{r4, pc}

08002668 <prvIdleTask>:
{
 8002668:	b580      	push	{r7, lr}
				taskYIELD();
 800266a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80026c8 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800266e:	4f12      	ldr	r7, [pc, #72]	; (80026b8 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002670:	4c12      	ldr	r4, [pc, #72]	; (80026bc <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8002672:	4d13      	ldr	r5, [pc, #76]	; (80026c0 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002674:	6823      	ldr	r3, [r4, #0]
 8002676:	b963      	cbnz	r3, 8002692 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002678:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <prvIdleTask+0x5c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d9f8      	bls.n	8002672 <prvIdleTask+0xa>
				taskYIELD();
 8002680:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002684:	f8c8 3000 	str.w	r3, [r8]
 8002688:	f3bf 8f4f 	dsb	sy
 800268c:	f3bf 8f6f 	isb	sy
 8002690:	e7ee      	b.n	8002670 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8002692:	f7ff f9d7 	bl	8001a44 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800269a:	1d30      	adds	r0, r6, #4
 800269c:	f7ff f957 	bl	800194e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80026a0:	682b      	ldr	r3, [r5, #0]
 80026a2:	3b01      	subs	r3, #1
 80026a4:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80026a6:	6823      	ldr	r3, [r4, #0]
 80026a8:	3b01      	subs	r3, #1
 80026aa:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80026ac:	f7ff f9ec 	bl	8001a88 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80026b0:	4630      	mov	r0, r6
 80026b2:	f7ff ffbe 	bl	8002632 <prvDeleteTCB>
 80026b6:	e7dd      	b.n	8002674 <prvIdleTask+0xc>
 80026b8:	200047d8 	.word	0x200047d8
 80026bc:	20004768 	.word	0x20004768
 80026c0:	20004764 	.word	0x20004764
 80026c4:	20004304 	.word	0x20004304
 80026c8:	e000ed04 	.word	0xe000ed04

080026cc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80026cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80026ce:	4b16      	ldr	r3, [pc, #88]	; (8002728 <prvAddCurrentTaskToDelayedList+0x5c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80026d0:	4d16      	ldr	r5, [pc, #88]	; (800272c <prvAddCurrentTaskToDelayedList+0x60>)
const TickType_t xConstTickCount = xTickCount;
 80026d2:	681e      	ldr	r6, [r3, #0]
{
 80026d4:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80026d6:	6828      	ldr	r0, [r5, #0]
 80026d8:	3004      	adds	r0, #4
{
 80026da:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80026dc:	f7ff f937 	bl	800194e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80026e0:	1c63      	adds	r3, r4, #1
 80026e2:	462b      	mov	r3, r5
 80026e4:	d107      	bne.n	80026f6 <prvAddCurrentTaskToDelayedList+0x2a>
 80026e6:	b137      	cbz	r7, 80026f6 <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80026e8:	6829      	ldr	r1, [r5, #0]
 80026ea:	4811      	ldr	r0, [pc, #68]	; (8002730 <prvAddCurrentTaskToDelayedList+0x64>)
 80026ec:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80026ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80026f2:	f7ff b909 	b.w	8001908 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80026f6:	4434      	add	r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80026f8:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 80026fa:	42a6      	cmp	r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80026fc:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80026fe:	d907      	bls.n	8002710 <prvAddCurrentTaskToDelayedList+0x44>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002700:	4a0c      	ldr	r2, [pc, #48]	; (8002734 <prvAddCurrentTaskToDelayedList+0x68>)
 8002702:	6810      	ldr	r0, [r2, #0]
 8002704:	6819      	ldr	r1, [r3, #0]
}
 8002706:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800270a:	3104      	adds	r1, #4
 800270c:	f7ff b908 	b.w	8001920 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002710:	4a09      	ldr	r2, [pc, #36]	; (8002738 <prvAddCurrentTaskToDelayedList+0x6c>)
 8002712:	6810      	ldr	r0, [r2, #0]
 8002714:	6819      	ldr	r1, [r3, #0]
 8002716:	3104      	adds	r1, #4
 8002718:	f7ff f902 	bl	8001920 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800271c:	4b07      	ldr	r3, [pc, #28]	; (800273c <prvAddCurrentTaskToDelayedList+0x70>)
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8002722:	bf38      	it	cc
 8002724:	601c      	strcc	r4, [r3, #0]
 8002726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002728:	200047ec 	.word	0x200047ec
 800272c:	200042f8 	.word	0x200042f8
 8002730:	200047c4 	.word	0x200047c4
 8002734:	20004300 	.word	0x20004300
 8002738:	200042fc 	.word	0x200042fc
 800273c:	200047a4 	.word	0x200047a4

08002740 <xTaskCreateStatic>:
	{
 8002740:	b570      	push	{r4, r5, r6, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8002746:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8002748:	b945      	cbnz	r5, 800275c <xTaskCreateStatic+0x1c>
 800274a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800274e:	f383 8811 	msr	BASEPRI, r3
 8002752:	f3bf 8f6f 	isb	sy
 8002756:	f3bf 8f4f 	dsb	sy
 800275a:	e7fe      	b.n	800275a <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800275c:	b944      	cbnz	r4, 8002770 <xTaskCreateStatic+0x30>
 800275e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002762:	f383 8811 	msr	BASEPRI, r3
 8002766:	f3bf 8f6f 	isb	sy
 800276a:	f3bf 8f4f 	dsb	sy
 800276e:	e7fe      	b.n	800276e <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8002770:	2654      	movs	r6, #84	; 0x54
 8002772:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002774:	9e04      	ldr	r6, [sp, #16]
 8002776:	2e54      	cmp	r6, #84	; 0x54
 8002778:	d008      	beq.n	800278c <xTaskCreateStatic+0x4c>
 800277a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277e:	f383 8811 	msr	BASEPRI, r3
 8002782:	f3bf 8f6f 	isb	sy
 8002786:	f3bf 8f4f 	dsb	sy
 800278a:	e7fe      	b.n	800278a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800278c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800278e:	2502      	movs	r5, #2
 8002790:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002794:	ad05      	add	r5, sp, #20
 8002796:	9501      	str	r5, [sp, #4]
 8002798:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800279a:	9402      	str	r4, [sp, #8]
 800279c:	9500      	str	r5, [sp, #0]
 800279e:	f7ff ff07 	bl	80025b0 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80027a2:	4620      	mov	r0, r4
 80027a4:	f7ff fe76 	bl	8002494 <prvAddNewTaskToReadyList>
	}
 80027a8:	9805      	ldr	r0, [sp, #20]
 80027aa:	b006      	add	sp, #24
 80027ac:	bd70      	pop	{r4, r5, r6, pc}

080027ae <xTaskCreate>:
	{
 80027ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027b2:	4607      	mov	r7, r0
 80027b4:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027b6:	0090      	lsls	r0, r2, #2
	{
 80027b8:	4688      	mov	r8, r1
 80027ba:	4616      	mov	r6, r2
 80027bc:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027be:	f7ff fa9b 	bl	8001cf8 <pvPortMalloc>
			if( pxStack != NULL )
 80027c2:	4605      	mov	r5, r0
 80027c4:	b1e8      	cbz	r0, 8002802 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80027c6:	2054      	movs	r0, #84	; 0x54
 80027c8:	f7ff fa96 	bl	8001cf8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80027cc:	4604      	mov	r4, r0
 80027ce:	b1a8      	cbz	r0, 80027fc <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80027d0:	2300      	movs	r3, #0
 80027d2:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80027d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 80027d8:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80027da:	9301      	str	r3, [sp, #4]
 80027dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80027de:	9002      	str	r0, [sp, #8]
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	4632      	mov	r2, r6
 80027e4:	464b      	mov	r3, r9
 80027e6:	4641      	mov	r1, r8
 80027e8:	4638      	mov	r0, r7
 80027ea:	f7ff fee1 	bl	80025b0 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80027ee:	4620      	mov	r0, r4
 80027f0:	f7ff fe50 	bl	8002494 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80027f4:	2001      	movs	r0, #1
	}
 80027f6:	b005      	add	sp, #20
 80027f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80027fc:	4628      	mov	r0, r5
 80027fe:	f7ff fb09 	bl	8001e14 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002802:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8002806:	e7f6      	b.n	80027f6 <xTaskCreate+0x48>

08002808 <vTaskStartScheduler>:
{
 8002808:	b510      	push	{r4, lr}
 800280a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800280c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800280e:	aa07      	add	r2, sp, #28
 8002810:	a906      	add	r1, sp, #24
 8002812:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002814:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002816:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002818:	f7ff f850 	bl	80018bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800281c:	9b05      	ldr	r3, [sp, #20]
 800281e:	9302      	str	r3, [sp, #8]
 8002820:	9b06      	ldr	r3, [sp, #24]
 8002822:	9301      	str	r3, [sp, #4]
 8002824:	9400      	str	r4, [sp, #0]
 8002826:	4623      	mov	r3, r4
 8002828:	9a07      	ldr	r2, [sp, #28]
 800282a:	4914      	ldr	r1, [pc, #80]	; (800287c <vTaskStartScheduler+0x74>)
 800282c:	4814      	ldr	r0, [pc, #80]	; (8002880 <vTaskStartScheduler+0x78>)
 800282e:	f7ff ff87 	bl	8002740 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8002832:	b9a0      	cbnz	r0, 800285e <vTaskStartScheduler+0x56>
}
 8002834:	b008      	add	sp, #32
 8002836:	bd10      	pop	{r4, pc}
 8002838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283c:	f383 8811 	msr	BASEPRI, r3
 8002840:	f3bf 8f6f 	isb	sy
 8002844:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8002848:	4b0e      	ldr	r3, [pc, #56]	; (8002884 <vTaskStartScheduler+0x7c>)
 800284a:	f04f 32ff 	mov.w	r2, #4294967295
 800284e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002850:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <vTaskStartScheduler+0x80>)
 8002852:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002854:	4b0d      	ldr	r3, [pc, #52]	; (800288c <vTaskStartScheduler+0x84>)
 8002856:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8002858:	f7ff f976 	bl	8001b48 <xPortStartScheduler>
 800285c:	e7ea      	b.n	8002834 <vTaskStartScheduler+0x2c>
			xReturn = xTimerCreateTimerTask();
 800285e:	f000 faf3 	bl	8002e48 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8002862:	2801      	cmp	r0, #1
 8002864:	d0e8      	beq.n	8002838 <vTaskStartScheduler+0x30>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002866:	3001      	adds	r0, #1
 8002868:	d1e4      	bne.n	8002834 <vTaskStartScheduler+0x2c>
 800286a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286e:	f383 8811 	msr	BASEPRI, r3
 8002872:	f3bf 8f6f 	isb	sy
 8002876:	f3bf 8f4f 	dsb	sy
 800287a:	e7fe      	b.n	800287a <vTaskStartScheduler+0x72>
 800287c:	0800385c 	.word	0x0800385c
 8002880:	08002669 	.word	0x08002669
 8002884:	200047a4 	.word	0x200047a4
 8002888:	200047c0 	.word	0x200047c0
 800288c:	200047ec 	.word	0x200047ec

08002890 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002890:	4a02      	ldr	r2, [pc, #8]	; (800289c <vTaskSuspendAll+0xc>)
 8002892:	6813      	ldr	r3, [r2, #0]
 8002894:	3301      	adds	r3, #1
 8002896:	6013      	str	r3, [r2, #0]
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	20004770 	.word	0x20004770

080028a0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80028a0:	4b01      	ldr	r3, [pc, #4]	; (80028a8 <xTaskGetTickCount+0x8>)
 80028a2:	6818      	ldr	r0, [r3, #0]
}
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	200047ec 	.word	0x200047ec

080028ac <xTaskIncrementTick>:
{
 80028ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028b0:	4b3b      	ldr	r3, [pc, #236]	; (80029a0 <xTaskIncrementTick+0xf4>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d151      	bne.n	800295c <xTaskIncrementTick+0xb0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80028b8:	4b3a      	ldr	r3, [pc, #232]	; (80029a4 <xTaskIncrementTick+0xf8>)
 80028ba:	681c      	ldr	r4, [r3, #0]
 80028bc:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80028be:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80028c0:	b9bc      	cbnz	r4, 80028f2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80028c2:	4b39      	ldr	r3, [pc, #228]	; (80029a8 <xTaskIncrementTick+0xfc>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	6812      	ldr	r2, [r2, #0]
 80028c8:	b142      	cbz	r2, 80028dc <xTaskIncrementTick+0x30>
 80028ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ce:	f383 8811 	msr	BASEPRI, r3
 80028d2:	f3bf 8f6f 	isb	sy
 80028d6:	f3bf 8f4f 	dsb	sy
 80028da:	e7fe      	b.n	80028da <xTaskIncrementTick+0x2e>
 80028dc:	4a33      	ldr	r2, [pc, #204]	; (80029ac <xTaskIncrementTick+0x100>)
 80028de:	6819      	ldr	r1, [r3, #0]
 80028e0:	6810      	ldr	r0, [r2, #0]
 80028e2:	6018      	str	r0, [r3, #0]
 80028e4:	6011      	str	r1, [r2, #0]
 80028e6:	4a32      	ldr	r2, [pc, #200]	; (80029b0 <xTaskIncrementTick+0x104>)
 80028e8:	6813      	ldr	r3, [r2, #0]
 80028ea:	3301      	adds	r3, #1
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	f7ff fe4d 	bl	800258c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80028f2:	4d30      	ldr	r5, [pc, #192]	; (80029b4 <xTaskIncrementTick+0x108>)
 80028f4:	4f30      	ldr	r7, [pc, #192]	; (80029b8 <xTaskIncrementTick+0x10c>)
 80028f6:	682b      	ldr	r3, [r5, #0]
 80028f8:	429c      	cmp	r4, r3
 80028fa:	f04f 0b00 	mov.w	fp, #0
 80028fe:	d33c      	bcc.n	800297a <xTaskIncrementTick+0xce>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002900:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80029a8 <xTaskIncrementTick+0xfc>
					prvAddTaskToReadyList( pxTCB );
 8002904:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 80029c8 <xTaskIncrementTick+0x11c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002908:	f8d8 2000 	ldr.w	r2, [r8]
 800290c:	6812      	ldr	r2, [r2, #0]
 800290e:	bb62      	cbnz	r2, 800296a <xTaskIncrementTick+0xbe>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002910:	f04f 32ff 	mov.w	r2, #4294967295
 8002914:	602a      	str	r2, [r5, #0]
					break;
 8002916:	e030      	b.n	800297a <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002918:	f106 0a04 	add.w	sl, r6, #4
 800291c:	4650      	mov	r0, sl
 800291e:	f7ff f816 	bl	800194e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002922:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8002924:	b119      	cbz	r1, 800292e <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002926:	f106 0018 	add.w	r0, r6, #24
 800292a:	f7ff f810 	bl	800194e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800292e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002930:	f8d9 1000 	ldr.w	r1, [r9]
 8002934:	4b21      	ldr	r3, [pc, #132]	; (80029bc <xTaskIncrementTick+0x110>)
 8002936:	4288      	cmp	r0, r1
 8002938:	f04f 0214 	mov.w	r2, #20
 800293c:	bf88      	it	hi
 800293e:	f8c9 0000 	strhi.w	r0, [r9]
 8002942:	4651      	mov	r1, sl
 8002944:	fb02 3000 	mla	r0, r2, r0, r3
 8002948:	f7fe ffde 	bl	8001908 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800294c:	6838      	ldr	r0, [r7, #0]
 800294e:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002950:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8002952:	4291      	cmp	r1, r2
 8002954:	bf28      	it	cs
 8002956:	f04f 0b01 	movcs.w	fp, #1
 800295a:	e7d5      	b.n	8002908 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 800295c:	4a18      	ldr	r2, [pc, #96]	; (80029c0 <xTaskIncrementTick+0x114>)
 800295e:	6813      	ldr	r3, [r2, #0]
 8002960:	3301      	adds	r3, #1
 8002962:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8002964:	f04f 0b00 	mov.w	fp, #0
 8002968:	e011      	b.n	800298e <xTaskIncrementTick+0xe2>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800296a:	f8d8 2000 	ldr.w	r2, [r8]
 800296e:	68d2      	ldr	r2, [r2, #12]
 8002970:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002972:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8002974:	428c      	cmp	r4, r1
 8002976:	d2cf      	bcs.n	8002918 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8002978:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	4b0f      	ldr	r3, [pc, #60]	; (80029bc <xTaskIncrementTick+0x110>)
 800297e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002980:	2214      	movs	r2, #20
 8002982:	434a      	muls	r2, r1
 8002984:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8002986:	2a02      	cmp	r2, #2
 8002988:	bf28      	it	cs
 800298a:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800298e:	4a0d      	ldr	r2, [pc, #52]	; (80029c4 <xTaskIncrementTick+0x118>)
 8002990:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8002992:	2a00      	cmp	r2, #0
 8002994:	bf18      	it	ne
 8002996:	f04f 0b01 	movne.w	fp, #1
}
 800299a:	4658      	mov	r0, fp
 800299c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029a0:	20004770 	.word	0x20004770
 80029a4:	200047ec 	.word	0x200047ec
 80029a8:	200042fc 	.word	0x200042fc
 80029ac:	20004300 	.word	0x20004300
 80029b0:	200047a8 	.word	0x200047a8
 80029b4:	200047a4 	.word	0x200047a4
 80029b8:	200042f8 	.word	0x200042f8
 80029bc:	20004304 	.word	0x20004304
 80029c0:	2000476c 	.word	0x2000476c
 80029c4:	200047f0 	.word	0x200047f0
 80029c8:	20004778 	.word	0x20004778

080029cc <xTaskResumeAll>:
{
 80029cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 80029d0:	4c2f      	ldr	r4, [pc, #188]	; (8002a90 <xTaskResumeAll+0xc4>)
 80029d2:	6823      	ldr	r3, [r4, #0]
 80029d4:	b943      	cbnz	r3, 80029e8 <xTaskResumeAll+0x1c>
 80029d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029da:	f383 8811 	msr	BASEPRI, r3
 80029de:	f3bf 8f6f 	isb	sy
 80029e2:	f3bf 8f4f 	dsb	sy
 80029e6:	e7fe      	b.n	80029e6 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80029e8:	f7ff f82c 	bl	8001a44 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80029ec:	6823      	ldr	r3, [r4, #0]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029f2:	6824      	ldr	r4, [r4, #0]
 80029f4:	b12c      	cbz	r4, 8002a02 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80029f6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80029f8:	f7ff f846 	bl	8001a88 <vPortExitCritical>
}
 80029fc:	4620      	mov	r0, r4
 80029fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002a02:	4b24      	ldr	r3, [pc, #144]	; (8002a94 <xTaskResumeAll+0xc8>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0f5      	beq.n	80029f6 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a0a:	4e23      	ldr	r6, [pc, #140]	; (8002a98 <xTaskResumeAll+0xcc>)
					prvAddTaskToReadyList( pxTCB );
 8002a0c:	4f23      	ldr	r7, [pc, #140]	; (8002a9c <xTaskResumeAll+0xd0>)
 8002a0e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8002ab0 <xTaskResumeAll+0xe4>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a12:	6833      	ldr	r3, [r6, #0]
 8002a14:	b9e3      	cbnz	r3, 8002a50 <xTaskResumeAll+0x84>
				if( pxTCB != NULL )
 8002a16:	b10c      	cbz	r4, 8002a1c <xTaskResumeAll+0x50>
					prvResetNextTaskUnblockTime();
 8002a18:	f7ff fdb8 	bl	800258c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002a1c:	4d20      	ldr	r5, [pc, #128]	; (8002aa0 <xTaskResumeAll+0xd4>)
 8002a1e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002a20:	b144      	cbz	r4, 8002a34 <xTaskResumeAll+0x68>
								xYieldPending = pdTRUE;
 8002a22:	4e20      	ldr	r6, [pc, #128]	; (8002aa4 <xTaskResumeAll+0xd8>)
 8002a24:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8002a26:	f7ff ff41 	bl	80028ac <xTaskIncrementTick>
 8002a2a:	b100      	cbz	r0, 8002a2e <xTaskResumeAll+0x62>
								xYieldPending = pdTRUE;
 8002a2c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002a2e:	3c01      	subs	r4, #1
 8002a30:	d1f9      	bne.n	8002a26 <xTaskResumeAll+0x5a>
						uxPendedTicks = 0;
 8002a32:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8002a34:	4b1b      	ldr	r3, [pc, #108]	; (8002aa4 <xTaskResumeAll+0xd8>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0dc      	beq.n	80029f6 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8002a3c:	4b1a      	ldr	r3, [pc, #104]	; (8002aa8 <xTaskResumeAll+0xdc>)
 8002a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	f3bf 8f4f 	dsb	sy
 8002a48:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002a4c:	2401      	movs	r4, #1
 8002a4e:	e7d3      	b.n	80029f8 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002a50:	68f3      	ldr	r3, [r6, #12]
 8002a52:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a54:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a56:	f104 0018 	add.w	r0, r4, #24
 8002a5a:	f7fe ff78 	bl	800194e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a5e:	4628      	mov	r0, r5
 8002a60:	f7fe ff75 	bl	800194e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002a64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	2014      	movs	r0, #20
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	fb00 8003 	mla	r0, r0, r3, r8
 8002a70:	4629      	mov	r1, r5
 8002a72:	bf88      	it	hi
 8002a74:	603b      	strhi	r3, [r7, #0]
 8002a76:	f7fe ff47 	bl	8001908 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a7a:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <xTaskResumeAll+0xe0>)
 8002a7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a82:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8002a84:	bf22      	ittt	cs
 8002a86:	4b07      	ldrcs	r3, [pc, #28]	; (8002aa4 <xTaskResumeAll+0xd8>)
 8002a88:	2201      	movcs	r2, #1
 8002a8a:	601a      	strcs	r2, [r3, #0]
 8002a8c:	e7c1      	b.n	8002a12 <xTaskResumeAll+0x46>
 8002a8e:	bf00      	nop
 8002a90:	20004770 	.word	0x20004770
 8002a94:	20004764 	.word	0x20004764
 8002a98:	200047ac 	.word	0x200047ac
 8002a9c:	20004778 	.word	0x20004778
 8002aa0:	2000476c 	.word	0x2000476c
 8002aa4:	200047f0 	.word	0x200047f0
 8002aa8:	e000ed04 	.word	0xe000ed04
 8002aac:	200042f8 	.word	0x200042f8
 8002ab0:	20004304 	.word	0x20004304

08002ab4 <vTaskDelay>:
	{
 8002ab4:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002ab6:	b940      	cbnz	r0, 8002aca <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8002ab8:	4b0e      	ldr	r3, [pc, #56]	; (8002af4 <vTaskDelay+0x40>)
 8002aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	f3bf 8f4f 	dsb	sy
 8002ac4:	f3bf 8f6f 	isb	sy
 8002ac8:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8002aca:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <vTaskDelay+0x44>)
 8002acc:	6819      	ldr	r1, [r3, #0]
 8002ace:	b141      	cbz	r1, 8002ae2 <vTaskDelay+0x2e>
 8002ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad4:	f383 8811 	msr	BASEPRI, r3
 8002ad8:	f3bf 8f6f 	isb	sy
 8002adc:	f3bf 8f4f 	dsb	sy
 8002ae0:	e7fe      	b.n	8002ae0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002ae2:	f7ff fed5 	bl	8002890 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002ae6:	f7ff fdf1 	bl	80026cc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8002aea:	f7ff ff6f 	bl	80029cc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8002aee:	2800      	cmp	r0, #0
 8002af0:	d0e2      	beq.n	8002ab8 <vTaskDelay+0x4>
 8002af2:	bd08      	pop	{r3, pc}
 8002af4:	e000ed04 	.word	0xe000ed04
 8002af8:	20004770 	.word	0x20004770

08002afc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002afc:	4b18      	ldr	r3, [pc, #96]	; (8002b60 <vTaskSwitchContext+0x64>)
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	4b18      	ldr	r3, [pc, #96]	; (8002b64 <vTaskSwitchContext+0x68>)
{
 8002b02:	b5f0      	push	{r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002b04:	b112      	cbz	r2, 8002b0c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8002b06:	2201      	movs	r2, #1
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002b0c:	4d16      	ldr	r5, [pc, #88]	; (8002b68 <vTaskSwitchContext+0x6c>)
		xYieldPending = pdFALSE;
 8002b0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002b10:	4a16      	ldr	r2, [pc, #88]	; (8002b6c <vTaskSwitchContext+0x70>)
 8002b12:	682b      	ldr	r3, [r5, #0]
 8002b14:	2714      	movs	r7, #20
 8002b16:	4616      	mov	r6, r2
 8002b18:	fb07 f103 	mul.w	r1, r7, r3
 8002b1c:	1850      	adds	r0, r2, r1
 8002b1e:	5854      	ldr	r4, [r2, r1]
 8002b20:	b18c      	cbz	r4, 8002b46 <vTaskSwitchContext+0x4a>
 8002b22:	6844      	ldr	r4, [r0, #4]
 8002b24:	3108      	adds	r1, #8
 8002b26:	6864      	ldr	r4, [r4, #4]
 8002b28:	6044      	str	r4, [r0, #4]
 8002b2a:	440a      	add	r2, r1
 8002b2c:	4294      	cmp	r4, r2
 8002b2e:	bf04      	itt	eq
 8002b30:	6862      	ldreq	r2, [r4, #4]
 8002b32:	6042      	streq	r2, [r0, #4]
 8002b34:	2214      	movs	r2, #20
 8002b36:	fb02 6203 	mla	r2, r2, r3, r6
 8002b3a:	6852      	ldr	r2, [r2, #4]
 8002b3c:	68d1      	ldr	r1, [r2, #12]
 8002b3e:	4a0c      	ldr	r2, [pc, #48]	; (8002b70 <vTaskSwitchContext+0x74>)
 8002b40:	6011      	str	r1, [r2, #0]
 8002b42:	602b      	str	r3, [r5, #0]
 8002b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b46:	b943      	cbnz	r3, 8002b5a <vTaskSwitchContext+0x5e>
 8002b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4c:	f383 8811 	msr	BASEPRI, r3
 8002b50:	f3bf 8f6f 	isb	sy
 8002b54:	f3bf 8f4f 	dsb	sy
 8002b58:	e7fe      	b.n	8002b58 <vTaskSwitchContext+0x5c>
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	e7dc      	b.n	8002b18 <vTaskSwitchContext+0x1c>
 8002b5e:	bf00      	nop
 8002b60:	20004770 	.word	0x20004770
 8002b64:	200047f0 	.word	0x200047f0
 8002b68:	20004778 	.word	0x20004778
 8002b6c:	20004304 	.word	0x20004304
 8002b70:	200042f8 	.word	0x200042f8

08002b74 <vTaskPlaceOnEventList>:
{
 8002b74:	b510      	push	{r4, lr}
 8002b76:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8002b78:	b940      	cbnz	r0, 8002b8c <vTaskPlaceOnEventList+0x18>
 8002b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7e:	f383 8811 	msr	BASEPRI, r3
 8002b82:	f3bf 8f6f 	isb	sy
 8002b86:	f3bf 8f4f 	dsb	sy
 8002b8a:	e7fe      	b.n	8002b8a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002b8c:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <vTaskPlaceOnEventList+0x30>)
 8002b8e:	6819      	ldr	r1, [r3, #0]
 8002b90:	3118      	adds	r1, #24
 8002b92:	f7fe fec5 	bl	8001920 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002b96:	4620      	mov	r0, r4
 8002b98:	2101      	movs	r1, #1
}
 8002b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002b9e:	f7ff bd95 	b.w	80026cc <prvAddCurrentTaskToDelayedList>
 8002ba2:	bf00      	nop
 8002ba4:	200042f8 	.word	0x200042f8

08002ba8 <vTaskPlaceOnEventListRestricted>:
	{
 8002ba8:	b538      	push	{r3, r4, r5, lr}
 8002baa:	460d      	mov	r5, r1
 8002bac:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8002bae:	b940      	cbnz	r0, 8002bc2 <vTaskPlaceOnEventListRestricted+0x1a>
 8002bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb4:	f383 8811 	msr	BASEPRI, r3
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	e7fe      	b.n	8002bc0 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002bc2:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <vTaskPlaceOnEventListRestricted+0x38>)
 8002bc4:	6819      	ldr	r1, [r3, #0]
 8002bc6:	3118      	adds	r1, #24
 8002bc8:	f7fe fe9e 	bl	8001908 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8002bcc:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002bce:	4621      	mov	r1, r4
 8002bd0:	bf0c      	ite	eq
 8002bd2:	4628      	moveq	r0, r5
 8002bd4:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8002bd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002bdc:	f7ff bd76 	b.w	80026cc <prvAddCurrentTaskToDelayedList>
 8002be0:	200042f8 	.word	0x200042f8

08002be4 <xTaskRemoveFromEventList>:
{
 8002be4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002be6:	68c3      	ldr	r3, [r0, #12]
 8002be8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8002bea:	b944      	cbnz	r4, 8002bfe <xTaskRemoveFromEventList+0x1a>
 8002bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf0:	f383 8811 	msr	BASEPRI, r3
 8002bf4:	f3bf 8f6f 	isb	sy
 8002bf8:	f3bf 8f4f 	dsb	sy
 8002bfc:	e7fe      	b.n	8002bfc <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002bfe:	f104 0518 	add.w	r5, r4, #24
 8002c02:	4628      	mov	r0, r5
 8002c04:	f7fe fea3 	bl	800194e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c08:	4b10      	ldr	r3, [pc, #64]	; (8002c4c <xTaskRemoveFromEventList+0x68>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	b9db      	cbnz	r3, 8002c46 <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002c0e:	1d25      	adds	r5, r4, #4
 8002c10:	4628      	mov	r0, r5
 8002c12:	f7fe fe9c 	bl	800194e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002c16:	4a0e      	ldr	r2, [pc, #56]	; (8002c50 <xTaskRemoveFromEventList+0x6c>)
 8002c18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c1a:	6811      	ldr	r1, [r2, #0]
 8002c1c:	428b      	cmp	r3, r1
 8002c1e:	bf88      	it	hi
 8002c20:	6013      	strhi	r3, [r2, #0]
 8002c22:	4a0c      	ldr	r2, [pc, #48]	; (8002c54 <xTaskRemoveFromEventList+0x70>)
 8002c24:	2014      	movs	r0, #20
 8002c26:	4629      	mov	r1, r5
 8002c28:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002c2c:	f7fe fe6c 	bl	8001908 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002c30:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <xTaskRemoveFromEventList+0x74>)
 8002c32:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8002c3a:	bf83      	ittte	hi
 8002c3c:	4b07      	ldrhi	r3, [pc, #28]	; (8002c5c <xTaskRemoveFromEventList+0x78>)
 8002c3e:	2001      	movhi	r0, #1
 8002c40:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8002c42:	2000      	movls	r0, #0
}
 8002c44:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002c46:	4629      	mov	r1, r5
 8002c48:	4805      	ldr	r0, [pc, #20]	; (8002c60 <xTaskRemoveFromEventList+0x7c>)
 8002c4a:	e7ef      	b.n	8002c2c <xTaskRemoveFromEventList+0x48>
 8002c4c:	20004770 	.word	0x20004770
 8002c50:	20004778 	.word	0x20004778
 8002c54:	20004304 	.word	0x20004304
 8002c58:	200042f8 	.word	0x200042f8
 8002c5c:	200047f0 	.word	0x200047f0
 8002c60:	200047ac 	.word	0x200047ac

08002c64 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002c64:	4b03      	ldr	r3, [pc, #12]	; (8002c74 <vTaskInternalSetTimeOutState+0x10>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002c6a:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <vTaskInternalSetTimeOutState+0x14>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6043      	str	r3, [r0, #4]
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	200047a8 	.word	0x200047a8
 8002c78:	200047ec 	.word	0x200047ec

08002c7c <xTaskCheckForTimeOut>:
{
 8002c7c:	b570      	push	{r4, r5, r6, lr}
 8002c7e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8002c80:	4605      	mov	r5, r0
 8002c82:	b940      	cbnz	r0, 8002c96 <xTaskCheckForTimeOut+0x1a>
 8002c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c88:	f383 8811 	msr	BASEPRI, r3
 8002c8c:	f3bf 8f6f 	isb	sy
 8002c90:	f3bf 8f4f 	dsb	sy
 8002c94:	e7fe      	b.n	8002c94 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8002c96:	b941      	cbnz	r1, 8002caa <xTaskCheckForTimeOut+0x2e>
 8002c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9c:	f383 8811 	msr	BASEPRI, r3
 8002ca0:	f3bf 8f6f 	isb	sy
 8002ca4:	f3bf 8f4f 	dsb	sy
 8002ca8:	e7fe      	b.n	8002ca8 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8002caa:	f7fe fecb 	bl	8001a44 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8002cae:	4b0f      	ldr	r3, [pc, #60]	; (8002cec <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002cb0:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 8002cb2:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8002cb4:	6823      	ldr	r3, [r4, #0]
 8002cb6:	1c58      	adds	r0, r3, #1
 8002cb8:	d00e      	beq.n	8002cd8 <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002cba:	480d      	ldr	r0, [pc, #52]	; (8002cf0 <xTaskCheckForTimeOut+0x74>)
 8002cbc:	682e      	ldr	r6, [r5, #0]
 8002cbe:	6800      	ldr	r0, [r0, #0]
 8002cc0:	4286      	cmp	r6, r0
 8002cc2:	d001      	beq.n	8002cc8 <xTaskCheckForTimeOut+0x4c>
 8002cc4:	428a      	cmp	r2, r1
 8002cc6:	d20e      	bcs.n	8002ce6 <xTaskCheckForTimeOut+0x6a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002cc8:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d209      	bcs.n	8002ce2 <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 8002cce:	1a9b      	subs	r3, r3, r2
 8002cd0:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002cd2:	4628      	mov	r0, r5
 8002cd4:	f7ff ffc6 	bl	8002c64 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8002cd8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002cda:	f7fe fed5 	bl	8001a88 <vPortExitCritical>
}
 8002cde:	4620      	mov	r0, r4
 8002ce0:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8002ce6:	2401      	movs	r4, #1
 8002ce8:	e7f7      	b.n	8002cda <xTaskCheckForTimeOut+0x5e>
 8002cea:	bf00      	nop
 8002cec:	200047ec 	.word	0x200047ec
 8002cf0:	200047a8 	.word	0x200047a8

08002cf4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8002cf4:	4b01      	ldr	r3, [pc, #4]	; (8002cfc <vTaskMissedYield+0x8>)
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	4770      	bx	lr
 8002cfc:	200047f0 	.word	0x200047f0

08002d00 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8002d00:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <xTaskGetSchedulerState+0x18>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	b133      	cbz	r3, 8002d14 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d06:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <xTaskGetSchedulerState+0x1c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8002d0c:	bf0c      	ite	eq
 8002d0e:	2002      	moveq	r0, #2
 8002d10:	2000      	movne	r0, #0
 8002d12:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002d14:	2001      	movs	r0, #1
	}
 8002d16:	4770      	bx	lr
 8002d18:	200047c0 	.word	0x200047c0
 8002d1c:	20004770 	.word	0x20004770

08002d20 <xTaskPriorityDisinherit>:
	{
 8002d20:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8002d22:	4604      	mov	r4, r0
 8002d24:	b908      	cbnz	r0, 8002d2a <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8002d26:	2000      	movs	r0, #0
 8002d28:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8002d2a:	4b1b      	ldr	r3, [pc, #108]	; (8002d98 <xTaskPriorityDisinherit+0x78>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4298      	cmp	r0, r3
 8002d30:	d008      	beq.n	8002d44 <xTaskPriorityDisinherit+0x24>
 8002d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d36:	f383 8811 	msr	BASEPRI, r3
 8002d3a:	f3bf 8f6f 	isb	sy
 8002d3e:	f3bf 8f4f 	dsb	sy
 8002d42:	e7fe      	b.n	8002d42 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8002d44:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002d46:	b943      	cbnz	r3, 8002d5a <xTaskPriorityDisinherit+0x3a>
 8002d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4c:	f383 8811 	msr	BASEPRI, r3
 8002d50:	f3bf 8f6f 	isb	sy
 8002d54:	f3bf 8f4f 	dsb	sy
 8002d58:	e7fe      	b.n	8002d58 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002d5a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002d5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8002d5e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002d60:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8002d62:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002d64:	d0df      	beq.n	8002d26 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1dd      	bne.n	8002d26 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d6a:	1d05      	adds	r5, r0, #4
 8002d6c:	4628      	mov	r0, r5
 8002d6e:	f7fe fdee 	bl	800194e <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002d72:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002d74:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d76:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002d7a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8002d7c:	4a07      	ldr	r2, [pc, #28]	; (8002d9c <xTaskPriorityDisinherit+0x7c>)
 8002d7e:	6811      	ldr	r1, [r2, #0]
 8002d80:	428b      	cmp	r3, r1
 8002d82:	bf88      	it	hi
 8002d84:	6013      	strhi	r3, [r2, #0]
 8002d86:	4a06      	ldr	r2, [pc, #24]	; (8002da0 <xTaskPriorityDisinherit+0x80>)
 8002d88:	2014      	movs	r0, #20
 8002d8a:	fb00 2003 	mla	r0, r0, r3, r2
 8002d8e:	4629      	mov	r1, r5
 8002d90:	f7fe fdba 	bl	8001908 <vListInsertEnd>
					xReturn = pdTRUE;
 8002d94:	2001      	movs	r0, #1
	}
 8002d96:	bd38      	pop	{r3, r4, r5, pc}
 8002d98:	200042f8 	.word	0x200042f8
 8002d9c:	20004778 	.word	0x20004778
 8002da0:	20004304 	.word	0x20004304

08002da4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002da4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8002da6:	4c11      	ldr	r4, [pc, #68]	; (8002dec <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8002da8:	f7fe fe4c 	bl	8001a44 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8002dac:	6825      	ldr	r5, [r4, #0]
 8002dae:	b9bd      	cbnz	r5, 8002de0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8002db0:	4f0f      	ldr	r7, [pc, #60]	; (8002df0 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8002db2:	4e10      	ldr	r6, [pc, #64]	; (8002df4 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8002db4:	4638      	mov	r0, r7
 8002db6:	f7fe fd99 	bl	80018ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002dba:	4630      	mov	r0, r6
 8002dbc:	f7fe fd96 	bl	80018ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002dc0:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002dc2:	4a0e      	ldr	r2, [pc, #56]	; (8002dfc <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 8002dc4:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002dc6:	4b0e      	ldr	r3, [pc, #56]	; (8002e00 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002dc8:	210c      	movs	r1, #12
			pxOverflowTimerList = &xActiveTimerList2;
 8002dca:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002dcc:	200a      	movs	r0, #10
 8002dce:	9500      	str	r5, [sp, #0]
 8002dd0:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <prvCheckForValidListAndQueue+0x60>)
 8002dd2:	f7ff f923 	bl	800201c <xQueueGenericCreateStatic>
 8002dd6:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002dd8:	b110      	cbz	r0, 8002de0 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002dda:	490b      	ldr	r1, [pc, #44]	; (8002e08 <prvCheckForValidListAndQueue+0x64>)
 8002ddc:	f7ff fb24 	bl	8002428 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8002de0:	b003      	add	sp, #12
 8002de2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8002de6:	f7fe be4f 	b.w	8001a88 <vPortExitCritical>
 8002dea:	bf00      	nop
 8002dec:	200048e8 	.word	0x200048e8
 8002df0:	20004874 	.word	0x20004874
 8002df4:	20004888 	.word	0x20004888
 8002df8:	200047f4 	.word	0x200047f4
 8002dfc:	200047fc 	.word	0x200047fc
 8002e00:	200047f8 	.word	0x200047f8
 8002e04:	200048a0 	.word	0x200048a0
 8002e08:	08003861 	.word	0x08003861

08002e0c <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8002e0c:	4291      	cmp	r1, r2
{
 8002e0e:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002e10:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002e12:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8002e14:	d80a      	bhi.n	8002e2c <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e16:	1ad2      	subs	r2, r2, r3
 8002e18:	6983      	ldr	r3, [r0, #24]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d20d      	bcs.n	8002e3a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002e1e:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <prvInsertTimerInActiveList+0x34>)
 8002e20:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002e22:	6818      	ldr	r0, [r3, #0]
 8002e24:	f7fe fd7c 	bl	8001920 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8002e28:	2000      	movs	r0, #0
 8002e2a:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d201      	bcs.n	8002e34 <prvInsertTimerInActiveList+0x28>
 8002e30:	4299      	cmp	r1, r3
 8002e32:	d202      	bcs.n	8002e3a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002e34:	1d01      	adds	r1, r0, #4
 8002e36:	4b03      	ldr	r3, [pc, #12]	; (8002e44 <prvInsertTimerInActiveList+0x38>)
 8002e38:	e7f3      	b.n	8002e22 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8002e3a:	2001      	movs	r0, #1
}
 8002e3c:	bd08      	pop	{r3, pc}
 8002e3e:	bf00      	nop
 8002e40:	200047f8 	.word	0x200047f8
 8002e44:	200047f4 	.word	0x200047f4

08002e48 <xTimerCreateTimerTask>:
{
 8002e48:	b510      	push	{r4, lr}
 8002e4a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8002e4c:	f7ff ffaa 	bl	8002da4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8002e50:	4b13      	ldr	r3, [pc, #76]	; (8002ea0 <xTimerCreateTimerTask+0x58>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	b943      	cbnz	r3, 8002e68 <xTimerCreateTimerTask+0x20>
 8002e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5a:	f383 8811 	msr	BASEPRI, r3
 8002e5e:	f3bf 8f6f 	isb	sy
 8002e62:	f3bf 8f4f 	dsb	sy
 8002e66:	e7fe      	b.n	8002e66 <xTimerCreateTimerTask+0x1e>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002e68:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002e6a:	aa07      	add	r2, sp, #28
 8002e6c:	a906      	add	r1, sp, #24
 8002e6e:	a805      	add	r0, sp, #20
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002e70:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002e72:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002e74:	f7fe fd2e 	bl	80018d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002e78:	9b05      	ldr	r3, [sp, #20]
 8002e7a:	9302      	str	r3, [sp, #8]
 8002e7c:	9b06      	ldr	r3, [sp, #24]
 8002e7e:	9301      	str	r3, [sp, #4]
 8002e80:	2302      	movs	r3, #2
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	9a07      	ldr	r2, [sp, #28]
 8002e86:	4907      	ldr	r1, [pc, #28]	; (8002ea4 <xTimerCreateTimerTask+0x5c>)
 8002e88:	4807      	ldr	r0, [pc, #28]	; (8002ea8 <xTimerCreateTimerTask+0x60>)
 8002e8a:	4623      	mov	r3, r4
 8002e8c:	f7ff fc58 	bl	8002740 <xTaskCreateStatic>
 8002e90:	4b06      	ldr	r3, [pc, #24]	; (8002eac <xTimerCreateTimerTask+0x64>)
 8002e92:	6018      	str	r0, [r3, #0]
	configASSERT( xReturn );
 8002e94:	2800      	cmp	r0, #0
 8002e96:	d0de      	beq.n	8002e56 <xTimerCreateTimerTask+0xe>
}
 8002e98:	2001      	movs	r0, #1
 8002e9a:	b008      	add	sp, #32
 8002e9c:	bd10      	pop	{r4, pc}
 8002e9e:	bf00      	nop
 8002ea0:	200048e8 	.word	0x200048e8
 8002ea4:	08003866 	.word	0x08003866
 8002ea8:	08002f85 	.word	0x08002f85
 8002eac:	200048ec 	.word	0x200048ec

08002eb0 <xTimerGenericCommand>:
{
 8002eb0:	b530      	push	{r4, r5, lr}
 8002eb2:	4615      	mov	r5, r2
 8002eb4:	b085      	sub	sp, #20
 8002eb6:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8002eb8:	4603      	mov	r3, r0
 8002eba:	b940      	cbnz	r0, 8002ece <xTimerGenericCommand+0x1e>
 8002ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec0:	f383 8811 	msr	BASEPRI, r3
 8002ec4:	f3bf 8f6f 	isb	sy
 8002ec8:	f3bf 8f4f 	dsb	sy
 8002ecc:	e7fe      	b.n	8002ecc <xTimerGenericCommand+0x1c>
	if( xTimerQueue != NULL )
 8002ece:	4c0d      	ldr	r4, [pc, #52]	; (8002f04 <xTimerGenericCommand+0x54>)
 8002ed0:	6820      	ldr	r0, [r4, #0]
 8002ed2:	b180      	cbz	r0, 8002ef6 <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002ed4:	2905      	cmp	r1, #5
		xMessage.xMessageID = xCommandID;
 8002ed6:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002ed8:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002eda:	9303      	str	r3, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002edc:	dc0d      	bgt.n	8002efa <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002ede:	f7ff ff0f 	bl	8002d00 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002ee2:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002ee4:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002ee6:	bf08      	it	eq
 8002ee8:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002eea:	6820      	ldr	r0, [r4, #0]
 8002eec:	bf18      	it	ne
 8002eee:	461a      	movne	r2, r3
 8002ef0:	a901      	add	r1, sp, #4
 8002ef2:	f7ff f8dd 	bl	80020b0 <xQueueGenericSend>
}
 8002ef6:	b005      	add	sp, #20
 8002ef8:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002efa:	2300      	movs	r3, #0
 8002efc:	a901      	add	r1, sp, #4
 8002efe:	f7ff f98d 	bl	800221c <xQueueGenericSendFromISR>
 8002f02:	e7f8      	b.n	8002ef6 <xTimerGenericCommand+0x46>
 8002f04:	200048e8 	.word	0x200048e8

08002f08 <prvSwitchTimerLists>:
{
 8002f08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002f0c:	4d1b      	ldr	r5, [pc, #108]	; (8002f7c <prvSwitchTimerLists+0x74>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002f0e:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002f12:	682b      	ldr	r3, [r5, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	b932      	cbnz	r2, 8002f26 <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 8002f18:	4a19      	ldr	r2, [pc, #100]	; (8002f80 <prvSwitchTimerLists+0x78>)
 8002f1a:	6811      	ldr	r1, [r2, #0]
 8002f1c:	6029      	str	r1, [r5, #0]
	pxOverflowTimerList = pxTemp;
 8002f1e:	6013      	str	r3, [r2, #0]
}
 8002f20:	b002      	add	sp, #8
 8002f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002f26:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002f28:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002f2a:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002f2c:	1d27      	adds	r7, r4, #4
 8002f2e:	4638      	mov	r0, r7
 8002f30:	f7fe fd0d 	bl	800194e <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002f34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f36:	4620      	mov	r0, r4
 8002f38:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002f3a:	69e3      	ldr	r3, [r4, #28]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d1e8      	bne.n	8002f12 <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002f40:	69a3      	ldr	r3, [r4, #24]
 8002f42:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8002f44:	429e      	cmp	r6, r3
 8002f46:	d206      	bcs.n	8002f56 <prvSwitchTimerLists+0x4e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002f48:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002f4a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002f4c:	4639      	mov	r1, r7
 8002f4e:	6828      	ldr	r0, [r5, #0]
 8002f50:	f7fe fce6 	bl	8001920 <vListInsert>
 8002f54:	e7dd      	b.n	8002f12 <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002f56:	2300      	movs	r3, #0
 8002f58:	f8cd 8000 	str.w	r8, [sp]
 8002f5c:	4632      	mov	r2, r6
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4620      	mov	r0, r4
 8002f62:	f7ff ffa5 	bl	8002eb0 <xTimerGenericCommand>
				configASSERT( xResult );
 8002f66:	2800      	cmp	r0, #0
 8002f68:	d1d3      	bne.n	8002f12 <prvSwitchTimerLists+0xa>
 8002f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6e:	f383 8811 	msr	BASEPRI, r3
 8002f72:	f3bf 8f6f 	isb	sy
 8002f76:	f3bf 8f4f 	dsb	sy
 8002f7a:	e7fe      	b.n	8002f7a <prvSwitchTimerLists+0x72>
 8002f7c:	200047f4 	.word	0x200047f4
 8002f80:	200047f8 	.word	0x200047f8

08002f84 <prvTimerTask>:
{
 8002f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002f88:	4d6e      	ldr	r5, [pc, #440]	; (8003144 <prvTimerTask+0x1c0>)
					portYIELD_WITHIN_API();
 8002f8a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8003154 <prvTimerTask+0x1d0>
{
 8002f8e:	b089      	sub	sp, #36	; 0x24
 8002f90:	462f      	mov	r7, r5
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002f92:	682b      	ldr	r3, [r5, #0]
 8002f94:	f8d3 b000 	ldr.w	fp, [r3]
	if( *pxListWasEmpty == pdFALSE )
 8002f98:	f1bb 0f00 	cmp.w	fp, #0
 8002f9c:	d043      	beq.n	8003026 <prvTimerTask+0xa2>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f8d3 9000 	ldr.w	r9, [r3]
	vTaskSuspendAll();
 8002fa4:	f7ff fc74 	bl	8002890 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8002fa8:	f7ff fc7a 	bl	80028a0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8002fac:	4b66      	ldr	r3, [pc, #408]	; (8003148 <prvTimerTask+0x1c4>)
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	4290      	cmp	r0, r2
	xTimeNow = xTaskGetTickCount();
 8002fb2:	4682      	mov	sl, r0
 8002fb4:	461e      	mov	r6, r3
	if( xTimeNow < xLastTime )
 8002fb6:	d238      	bcs.n	800302a <prvTimerTask+0xa6>
 8002fb8:	9303      	str	r3, [sp, #12]
		prvSwitchTimerLists();
 8002fba:	f7ff ffa5 	bl	8002f08 <prvSwitchTimerLists>
 8002fbe:	9b03      	ldr	r3, [sp, #12]
		*pxTimerListsWereSwitched = pdTRUE;
 8002fc0:	2401      	movs	r4, #1
	xLastTime = xTimeNow;
 8002fc2:	f8c3 a000 	str.w	sl, [r3]
		if( xTimerListsWereSwitched == pdFALSE )
 8002fc6:	2c00      	cmp	r4, #0
 8002fc8:	f040 8082 	bne.w	80030d0 <prvTimerTask+0x14c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002fcc:	f1bb 0f00 	cmp.w	fp, #0
 8002fd0:	d063      	beq.n	800309a <prvTimerTask+0x116>
 8002fd2:	45d1      	cmp	r9, sl
 8002fd4:	d87a      	bhi.n	80030cc <prvTimerTask+0x148>
				( void ) xTaskResumeAll();
 8002fd6:	f7ff fcf9 	bl	80029cc <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002fe2:	f10b 0004 	add.w	r0, fp, #4
 8002fe6:	f7fe fcb2 	bl	800194e <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002fea:	f8db 301c 	ldr.w	r3, [fp, #28]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d11d      	bne.n	800302e <prvTimerTask+0xaa>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002ff2:	f8db 1018 	ldr.w	r1, [fp, #24]
 8002ff6:	464b      	mov	r3, r9
 8002ff8:	4652      	mov	r2, sl
 8002ffa:	4449      	add	r1, r9
 8002ffc:	4658      	mov	r0, fp
 8002ffe:	f7ff ff05 	bl	8002e0c <prvInsertTimerInActiveList>
 8003002:	b1a0      	cbz	r0, 800302e <prvTimerTask+0xaa>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003004:	9400      	str	r4, [sp, #0]
 8003006:	4623      	mov	r3, r4
 8003008:	464a      	mov	r2, r9
 800300a:	4621      	mov	r1, r4
 800300c:	4658      	mov	r0, fp
 800300e:	f7ff ff4f 	bl	8002eb0 <xTimerGenericCommand>
			configASSERT( xResult );
 8003012:	b960      	cbnz	r0, 800302e <prvTimerTask+0xaa>
 8003014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003018:	f383 8811 	msr	BASEPRI, r3
 800301c:	f3bf 8f6f 	isb	sy
 8003020:	f3bf 8f4f 	dsb	sy
 8003024:	e7fe      	b.n	8003024 <prvTimerTask+0xa0>
		xNextExpireTime = ( TickType_t ) 0U;
 8003026:	46d9      	mov	r9, fp
 8003028:	e7bc      	b.n	8002fa4 <prvTimerTask+0x20>
		*pxTimerListsWereSwitched = pdFALSE;
 800302a:	2400      	movs	r4, #0
 800302c:	e7c9      	b.n	8002fc2 <prvTimerTask+0x3e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800302e:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 8003032:	4658      	mov	r0, fp
 8003034:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003036:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8003150 <prvTimerTask+0x1cc>
 800303a:	f8d9 0000 	ldr.w	r0, [r9]
 800303e:	2200      	movs	r2, #0
 8003040:	a905      	add	r1, sp, #20
 8003042:	f7ff f94d 	bl	80022e0 <xQueueReceive>
 8003046:	2800      	cmp	r0, #0
 8003048:	d0a3      	beq.n	8002f92 <prvTimerTask+0xe>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800304a:	9b05      	ldr	r3, [sp, #20]
 800304c:	2b00      	cmp	r3, #0
 800304e:	dbf4      	blt.n	800303a <prvTimerTask+0xb6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003050:	9c07      	ldr	r4, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003052:	6963      	ldr	r3, [r4, #20]
 8003054:	b113      	cbz	r3, 800305c <prvTimerTask+0xd8>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003056:	1d20      	adds	r0, r4, #4
 8003058:	f7fe fc79 	bl	800194e <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800305c:	f7ff fc20 	bl	80028a0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8003060:	6833      	ldr	r3, [r6, #0]
 8003062:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 8003064:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8003066:	d201      	bcs.n	800306c <prvTimerTask+0xe8>
		prvSwitchTimerLists();
 8003068:	f7ff ff4e 	bl	8002f08 <prvSwitchTimerLists>
 800306c:	9a05      	ldr	r2, [sp, #20]
	xLastTime = xTimeNow;
 800306e:	f8c6 b000 	str.w	fp, [r6]
 8003072:	2a09      	cmp	r2, #9
 8003074:	d8e1      	bhi.n	800303a <prvTimerTask+0xb6>
 8003076:	2301      	movs	r3, #1
 8003078:	4093      	lsls	r3, r2
 800307a:	f413 7a04 	ands.w	sl, r3, #528	; 0x210
 800307e:	d14e      	bne.n	800311e <prvTimerTask+0x19a>
 8003080:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 8003084:	d127      	bne.n	80030d6 <prvTimerTask+0x152>
 8003086:	069b      	lsls	r3, r3, #26
 8003088:	d5d7      	bpl.n	800303a <prvTimerTask+0xb6>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800308a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1d3      	bne.n	800303a <prvTimerTask+0xb6>
							vPortFree( pxTimer );
 8003092:	4620      	mov	r0, r4
 8003094:	f7fe febe 	bl	8001e14 <vPortFree>
 8003098:	e7cf      	b.n	800303a <prvTimerTask+0xb6>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800309a:	4b2c      	ldr	r3, [pc, #176]	; (800314c <prvTimerTask+0x1c8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	fab2 f282 	clz	r2, r2
 80030a4:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80030a6:	4b2a      	ldr	r3, [pc, #168]	; (8003150 <prvTimerTask+0x1cc>)
 80030a8:	eba9 010a 	sub.w	r1, r9, sl
 80030ac:	6818      	ldr	r0, [r3, #0]
 80030ae:	f7ff f9cd 	bl	800244c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80030b2:	f7ff fc8b 	bl	80029cc <xTaskResumeAll>
 80030b6:	2800      	cmp	r0, #0
 80030b8:	d1bd      	bne.n	8003036 <prvTimerTask+0xb2>
					portYIELD_WITHIN_API();
 80030ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80030be:	f8c8 3000 	str.w	r3, [r8]
 80030c2:	f3bf 8f4f 	dsb	sy
 80030c6:	f3bf 8f6f 	isb	sy
 80030ca:	e7b4      	b.n	8003036 <prvTimerTask+0xb2>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80030cc:	4622      	mov	r2, r4
 80030ce:	e7ea      	b.n	80030a6 <prvTimerTask+0x122>
			( void ) xTaskResumeAll();
 80030d0:	f7ff fc7c 	bl	80029cc <xTaskResumeAll>
 80030d4:	e7af      	b.n	8003036 <prvTimerTask+0xb2>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80030d6:	69a1      	ldr	r1, [r4, #24]
 80030d8:	9b06      	ldr	r3, [sp, #24]
 80030da:	465a      	mov	r2, fp
 80030dc:	4419      	add	r1, r3
 80030de:	4620      	mov	r0, r4
 80030e0:	f7ff fe94 	bl	8002e0c <prvInsertTimerInActiveList>
 80030e4:	2800      	cmp	r0, #0
 80030e6:	d0a8      	beq.n	800303a <prvTimerTask+0xb6>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80030e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030ea:	4620      	mov	r0, r4
 80030ec:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80030ee:	69e3      	ldr	r3, [r4, #28]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d1a2      	bne.n	800303a <prvTimerTask+0xb6>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80030f4:	69a2      	ldr	r2, [r4, #24]
 80030f6:	9906      	ldr	r1, [sp, #24]
 80030f8:	f8cd a000 	str.w	sl, [sp]
 80030fc:	440a      	add	r2, r1
 80030fe:	4653      	mov	r3, sl
 8003100:	4651      	mov	r1, sl
 8003102:	4620      	mov	r0, r4
 8003104:	f7ff fed4 	bl	8002eb0 <xTimerGenericCommand>
							configASSERT( xResult );
 8003108:	2800      	cmp	r0, #0
 800310a:	d196      	bne.n	800303a <prvTimerTask+0xb6>
 800310c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003110:	f383 8811 	msr	BASEPRI, r3
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	e7fe      	b.n	800311c <prvTimerTask+0x198>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800311e:	9906      	ldr	r1, [sp, #24]
 8003120:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003122:	b941      	cbnz	r1, 8003136 <prvTimerTask+0x1b2>
 8003124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003128:	f383 8811 	msr	BASEPRI, r3
 800312c:	f3bf 8f6f 	isb	sy
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	e7fe      	b.n	8003134 <prvTimerTask+0x1b0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003136:	465b      	mov	r3, fp
 8003138:	465a      	mov	r2, fp
 800313a:	4459      	add	r1, fp
 800313c:	4620      	mov	r0, r4
 800313e:	f7ff fe65 	bl	8002e0c <prvInsertTimerInActiveList>
 8003142:	e77a      	b.n	800303a <prvTimerTask+0xb6>
 8003144:	200047f4 	.word	0x200047f4
 8003148:	2000489c 	.word	0x2000489c
 800314c:	200047f8 	.word	0x200047f8
 8003150:	200048e8 	.word	0x200048e8
 8003154:	e000ed04 	.word	0xe000ed04

08003158 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003158:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800315a:	2001      	movs	r0, #1
 800315c:	f7fe fb94 	bl	8001888 <osDelay>
 8003160:	e7fb      	b.n	800315a <StartDefaultTask+0x2>
	...

08003164 <SystemClock_Config>:
{
 8003164:	b510      	push	{r4, lr}
 8003166:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003168:	2234      	movs	r2, #52	; 0x34
 800316a:	2100      	movs	r1, #0
 800316c:	a807      	add	r0, sp, #28
 800316e:	f000 fb60 	bl	8003832 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003172:	2100      	movs	r1, #0
 8003174:	2214      	movs	r2, #20
 8003176:	a802      	add	r0, sp, #8
 8003178:	f000 fb5b 	bl	8003832 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 800317c:	2400      	movs	r4, #0
 800317e:	4b17      	ldr	r3, [pc, #92]	; (80031dc <SystemClock_Config+0x78>)
 8003180:	9400      	str	r4, [sp, #0]
 8003182:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003184:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003188:	641a      	str	r2, [r3, #64]	; 0x40
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800318c:	4a14      	ldr	r2, [pc, #80]	; (80031e0 <SystemClock_Config+0x7c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800318e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003196:	9401      	str	r4, [sp, #4]
 8003198:	6813      	ldr	r3, [r2, #0]
 800319a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800319e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031a2:	6013      	str	r3, [r2, #0]
 80031a4:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80031a6:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80031a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80031ac:	9301      	str	r3, [sp, #4]
 80031ae:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80031b0:	2302      	movs	r3, #2
 80031b2:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031b4:	2301      	movs	r3, #1
 80031b6:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031b8:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031ba:	2310      	movs	r3, #16
 80031bc:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031be:	f7fd fdfb 	bl	8000db8 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031c2:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80031c4:	4621      	mov	r1, r4
 80031c6:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031c8:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80031ca:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031cc:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031ce:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031d0:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80031d2:	f7fd fcef 	bl	8000bb4 <HAL_RCC_ClockConfig>
}
 80031d6:	b014      	add	sp, #80	; 0x50
 80031d8:	bd10      	pop	{r4, pc}
 80031da:	bf00      	nop
 80031dc:	40023800 	.word	0x40023800
 80031e0:	40007000 	.word	0x40007000

080031e4 <main>:
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b096      	sub	sp, #88	; 0x58
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031e8:	2400      	movs	r4, #0
  HAL_Init();
 80031ea:	f7fd f9bd 	bl	8000568 <HAL_Init>
  SystemClock_Config();
 80031ee:	f7ff ffb9 	bl	8003164 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031f2:	4b7e      	ldr	r3, [pc, #504]	; (80033ec <main+0x208>)
 80031f4:	9401      	str	r4, [sp, #4]
 80031f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  hadc1.Instance = ADC1;
 80031f8:	4d7d      	ldr	r5, [pc, #500]	; (80033f0 <main+0x20c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031fa:	f042 0204 	orr.w	r2, r2, #4
 80031fe:	631a      	str	r2, [r3, #48]	; 0x30
 8003200:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003202:	f002 0204 	and.w	r2, r2, #4
 8003206:	9201      	str	r2, [sp, #4]
 8003208:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800320a:	9402      	str	r4, [sp, #8]
 800320c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800320e:	f042 0201 	orr.w	r2, r2, #1
 8003212:	631a      	str	r2, [r3, #48]	; 0x30
 8003214:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003216:	f002 0201 	and.w	r2, r2, #1
 800321a:	9202      	str	r2, [sp, #8]
 800321c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800321e:	9403      	str	r4, [sp, #12]
 8003220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003222:	f042 0202 	orr.w	r2, r2, #2
 8003226:	631a      	str	r2, [r3, #48]	; 0x30
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 800322a:	2710      	movs	r7, #16
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800322c:	f003 0302 	and.w	r3, r3, #2
  ADC_ChannelConfTypeDef sConfig = {0};
 8003230:	463a      	mov	r2, r7
 8003232:	4621      	mov	r1, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003234:	9303      	str	r3, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003236:	a80d      	add	r0, sp, #52	; 0x34
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003238:	9b03      	ldr	r3, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800323a:	f000 fafa 	bl	8003832 <memset>
  hadc1.Instance = ADC1;
 800323e:	4b6d      	ldr	r3, [pc, #436]	; (80033f4 <main+0x210>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003240:	60ac      	str	r4, [r5, #8]
  hadc1.Init.NbrOfConversion = 1;
 8003242:	2601      	movs	r6, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003244:	e885 0018 	stmia.w	r5, {r3, r4}
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003248:	4628      	mov	r0, r5
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800324a:	4b6b      	ldr	r3, [pc, #428]	; (80033f8 <main+0x214>)
 800324c:	62ab      	str	r3, [r5, #40]	; 0x28
  hadc1.Init.NbrOfConversion = 1;
 800324e:	61ee      	str	r6, [r5, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003250:	616e      	str	r6, [r5, #20]
  hadc1.Init.ScanConvMode = DISABLE;
 8003252:	612c      	str	r4, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003254:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003256:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800325a:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800325c:	60ec      	str	r4, [r5, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800325e:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003262:	f7fd f9ad 	bl	80005c0 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003266:	a90d      	add	r1, sp, #52	; 0x34
 8003268:	4628      	mov	r0, r5
  sConfig.Rank = 1;
 800326a:	960e      	str	r6, [sp, #56]	; 0x38
  sConfig.Channel = ADC_CHANNEL_0;
 800326c:	940d      	str	r4, [sp, #52]	; 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800326e:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003270:	f7fd fa4c 	bl	800070c <HAL_ADC_ConfigChannel>
  hcan1.Instance = CAN1;
 8003274:	4861      	ldr	r0, [pc, #388]	; (80033fc <main+0x218>)
 8003276:	4b62      	ldr	r3, [pc, #392]	; (8003400 <main+0x21c>)
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003278:	6084      	str	r4, [r0, #8]
  hcan1.Init.Prescaler = 16;
 800327a:	e880 0088 	stmia.w	r0, {r3, r7}
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800327e:	60c4      	str	r4, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8003280:	6104      	str	r4, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003282:	6144      	str	r4, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003284:	7604      	strb	r4, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003286:	7644      	strb	r4, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003288:	7684      	strb	r4, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800328a:	76c4      	strb	r4, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800328c:	7704      	strb	r4, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800328e:	7744      	strb	r4, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003290:	f7fd fade 	bl	8000850 <HAL_CAN_Init>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003294:	221c      	movs	r2, #28
 8003296:	4621      	mov	r1, r4
 8003298:	a806      	add	r0, sp, #24
  htim1.Instance = TIM1;
 800329a:	4d5a      	ldr	r5, [pc, #360]	; (8003404 <main+0x220>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800329c:	9404      	str	r4, [sp, #16]
 800329e:	9405      	str	r4, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032a0:	f000 fac7 	bl	8003832 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80032a4:	2220      	movs	r2, #32
 80032a6:	4621      	mov	r1, r4
 80032a8:	a80d      	add	r0, sp, #52	; 0x34
 80032aa:	f000 fac2 	bl	8003832 <memset>
  htim1.Instance = TIM1;
 80032ae:	4b56      	ldr	r3, [pc, #344]	; (8003408 <main+0x224>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032b0:	60ac      	str	r4, [r5, #8]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80032b2:	4628      	mov	r0, r5
  htim1.Init.Prescaler = 0;
 80032b4:	e885 0018 	stmia.w	r5, {r3, r4}
  htim1.Init.Period = 0;
 80032b8:	60ec      	str	r4, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032ba:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 80032bc:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032be:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80032c0:	f7fe f808 	bl	80012d4 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80032c4:	eb0d 0107 	add.w	r1, sp, r7
 80032c8:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032ca:	2660      	movs	r6, #96	; 0x60
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032cc:	9404      	str	r4, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032ce:	9405      	str	r4, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80032d0:	f7fe f8b2 	bl	8001438 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032d4:	4622      	mov	r2, r4
 80032d6:	a906      	add	r1, sp, #24
 80032d8:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032da:	9606      	str	r6, [sp, #24]
  sConfigOC.Pulse = 0;
 80032dc:	9407      	str	r4, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032de:	9408      	str	r4, [sp, #32]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80032e0:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032e2:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80032e4:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80032e6:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032e8:	f7fe f844 	bl	8001374 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80032ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80032f0:	a90d      	add	r1, sp, #52	; 0x34
 80032f2:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80032f4:	9312      	str	r3, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80032f6:	940d      	str	r4, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80032f8:	940e      	str	r4, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80032fa:	940f      	str	r4, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 80032fc:	9410      	str	r4, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80032fe:	9411      	str	r4, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003300:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003302:	f7fe f8b7 	bl	8001474 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8003306:	4628      	mov	r0, r5
  htim2.Instance = TIM2;
 8003308:	4d40      	ldr	r5, [pc, #256]	; (800340c <main+0x228>)
  HAL_TIM_MspPostInit(&htim1);
 800330a:	f000 f97b 	bl	8003604 <HAL_TIM_MspPostInit>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800330e:	221c      	movs	r2, #28
 8003310:	4621      	mov	r1, r4
 8003312:	a80d      	add	r0, sp, #52	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003314:	9406      	str	r4, [sp, #24]
 8003316:	9407      	str	r4, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003318:	f000 fa8b 	bl	8003832 <memset>
  htim2.Instance = TIM2;
 800331c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003320:	4628      	mov	r0, r5
  htim2.Init.Prescaler = 0;
 8003322:	e885 0018 	stmia.w	r5, {r3, r4}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003326:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 0;
 8003328:	60ec      	str	r4, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800332a:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800332c:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800332e:	f7fd ffd1 	bl	80012d4 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003332:	a906      	add	r1, sp, #24
 8003334:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003336:	9406      	str	r4, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003338:	9407      	str	r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800333a:	f7fe f87d 	bl	8001438 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800333e:	4622      	mov	r2, r4
 8003340:	a90d      	add	r1, sp, #52	; 0x34
 8003342:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003344:	960d      	str	r6, [sp, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8003346:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003348:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800334a:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800334c:	f7fe f812 	bl	8001374 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 8003350:	4628      	mov	r0, r5
 8003352:	f000 f957 	bl	8003604 <HAL_TIM_MspPostInit>
  htim3.Instance = TIM3;
 8003356:	4d2e      	ldr	r5, [pc, #184]	; (8003410 <main+0x22c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003358:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800335a:	221c      	movs	r2, #28
 800335c:	4621      	mov	r1, r4
 800335e:	a80d      	add	r0, sp, #52	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003360:	9407      	str	r4, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003362:	f000 fa66 	bl	8003832 <memset>
  htim3.Instance = TIM3;
 8003366:	4b2b      	ldr	r3, [pc, #172]	; (8003414 <main+0x230>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003368:	60ac      	str	r4, [r5, #8]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800336a:	4628      	mov	r0, r5
  htim3.Init.Prescaler = 0;
 800336c:	e885 0018 	stmia.w	r5, {r3, r4}
  htim3.Init.Period = 0;
 8003370:	60ec      	str	r4, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003372:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003374:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003376:	f7fd ffad 	bl	80012d4 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800337a:	a906      	add	r1, sp, #24
 800337c:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800337e:	9406      	str	r4, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003380:	9407      	str	r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003382:	f7fe f859 	bl	8001438 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003386:	a90d      	add	r1, sp, #52	; 0x34
 8003388:	4622      	mov	r2, r4
 800338a:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800338c:	960d      	str	r6, [sp, #52]	; 0x34
  sConfigOC.Pulse = 0;
 800338e:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003390:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003392:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003394:	f7fd ffee 	bl	8001374 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 8003398:	4628      	mov	r0, r5
 800339a:	f000 f933 	bl	8003604 <HAL_TIM_MspPostInit>
  huart4.Instance = UART4;
 800339e:	481e      	ldr	r0, [pc, #120]	; (8003418 <main+0x234>)
  huart4.Init.BaudRate = 115200;
 80033a0:	4a1e      	ldr	r2, [pc, #120]	; (800341c <main+0x238>)
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80033a2:	6084      	str	r4, [r0, #8]
  huart4.Init.BaudRate = 115200;
 80033a4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80033a8:	e880 000c 	stmia.w	r0, {r2, r3}
  huart4.Init.Mode = UART_MODE_TX_RX;
 80033ac:	230c      	movs	r3, #12
 80033ae:	6143      	str	r3, [r0, #20]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80033b0:	60c4      	str	r4, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80033b2:	6104      	str	r4, [r0, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033b4:	6184      	str	r4, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80033b6:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80033b8:	f7fe f99c 	bl	80016f4 <HAL_UART_Init>
  osKernelInitialize(); // Initialize CMSIS-RTOS
 80033bc:	f7fe f9c8 	bl	8001750 <osKernelInitialize>
  const osThreadAttr_t defaultTask_attributes = {
 80033c0:	2224      	movs	r2, #36	; 0x24
 80033c2:	4621      	mov	r1, r4
 80033c4:	a80d      	add	r0, sp, #52	; 0x34
 80033c6:	f000 fa34 	bl	8003832 <memset>
 80033ca:	4b15      	ldr	r3, [pc, #84]	; (8003420 <main+0x23c>)
 80033cc:	930d      	str	r3, [sp, #52]	; 0x34
 80033ce:	2380      	movs	r3, #128	; 0x80
 80033d0:	9312      	str	r3, [sp, #72]	; 0x48
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80033d2:	aa0d      	add	r2, sp, #52	; 0x34
  const osThreadAttr_t defaultTask_attributes = {
 80033d4:	2318      	movs	r3, #24
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80033d6:	4621      	mov	r1, r4
 80033d8:	4812      	ldr	r0, [pc, #72]	; (8003424 <main+0x240>)
  const osThreadAttr_t defaultTask_attributes = {
 80033da:	9313      	str	r3, [sp, #76]	; 0x4c
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80033dc:	f7fe f9f4 	bl	80017c8 <osThreadNew>
 80033e0:	4b11      	ldr	r3, [pc, #68]	; (8003428 <main+0x244>)
 80033e2:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80033e4:	f7fe f9d0 	bl	8001788 <osKernelStart>
 80033e8:	e7fe      	b.n	80033e8 <main+0x204>
 80033ea:	bf00      	nop
 80033ec:	40023800 	.word	0x40023800
 80033f0:	20004978 	.word	0x20004978
 80033f4:	40012000 	.word	0x40012000
 80033f8:	0f000001 	.word	0x0f000001
 80033fc:	20004a80 	.word	0x20004a80
 8003400:	40006400 	.word	0x40006400
 8003404:	200049c0 	.word	0x200049c0
 8003408:	40010000 	.word	0x40010000
 800340c:	20004a40 	.word	0x20004a40
 8003410:	20004938 	.word	0x20004938
 8003414:	40000400 	.word	0x40000400
 8003418:	20004a00 	.word	0x20004a00
 800341c:	40004c00 	.word	0x40004c00
 8003420:	0800386e 	.word	0x0800386e
 8003424:	08003159 	.word	0x08003159
 8003428:	20004934 	.word	0x20004934

0800342c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800342c:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800342e:	4b0f      	ldr	r3, [pc, #60]	; (800346c <HAL_MspInit+0x40>)
 8003430:	2200      	movs	r2, #0
 8003432:	9200      	str	r2, [sp, #0]
 8003434:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003436:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800343a:	6459      	str	r1, [r3, #68]	; 0x44
 800343c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800343e:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8003442:	9100      	str	r1, [sp, #0]
 8003444:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003446:	9201      	str	r2, [sp, #4]
 8003448:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800344a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800344e:	6419      	str	r1, [r3, #64]	; 0x40
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003456:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003458:	210f      	movs	r1, #15
 800345a:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800345e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003460:	f7fd fa84 	bl	800096c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003464:	b003      	add	sp, #12
 8003466:	f85d fb04 	ldr.w	pc, [sp], #4
 800346a:	bf00      	nop
 800346c:	40023800 	.word	0x40023800

08003470 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003470:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003472:	2214      	movs	r2, #20
{
 8003474:	b08b      	sub	sp, #44	; 0x2c
 8003476:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003478:	2100      	movs	r1, #0
 800347a:	eb0d 0002 	add.w	r0, sp, r2
 800347e:	f000 f9d8 	bl	8003832 <memset>
  if(hadc->Instance==ADC1)
 8003482:	6822      	ldr	r2, [r4, #0]
 8003484:	4b23      	ldr	r3, [pc, #140]	; (8003514 <HAL_ADC_MspInit+0xa4>)
 8003486:	429a      	cmp	r2, r3
 8003488:	d141      	bne.n	800350e <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800348a:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800348e:	2400      	movs	r4, #0
 8003490:	9401      	str	r4, [sp, #4]
 8003492:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003494:	4820      	ldr	r0, [pc, #128]	; (8003518 <HAL_ADC_MspInit+0xa8>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003496:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800349a:	645a      	str	r2, [r3, #68]	; 0x44
 800349c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800349e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80034a2:	9201      	str	r2, [sp, #4]
 80034a4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034a6:	9402      	str	r4, [sp, #8]
 80034a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034aa:	f042 0204 	orr.w	r2, r2, #4
 80034ae:	631a      	str	r2, [r3, #48]	; 0x30
 80034b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034b2:	f002 0204 	and.w	r2, r2, #4
 80034b6:	9202      	str	r2, [sp, #8]
 80034b8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ba:	9403      	str	r4, [sp, #12]
 80034bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034be:	f042 0201 	orr.w	r2, r2, #1
 80034c2:	631a      	str	r2, [r3, #48]	; 0x30
 80034c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034c6:	f002 0201 	and.w	r2, r2, #1
 80034ca:	9203      	str	r2, [sp, #12]
 80034cc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ce:	9404      	str	r4, [sp, #16]
 80034d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034d2:	f042 0202 	orr.w	r2, r2, #2
 80034d6:	631a      	str	r2, [r3, #48]	; 0x30
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034e0:	2503      	movs	r5, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e2:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034e4:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80034e6:	233f      	movs	r3, #63	; 0x3f
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034e8:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80034ea:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034ec:	f7fd fa88 	bl	8000a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80034f0:	23ff      	movs	r3, #255	; 0xff
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f2:	a905      	add	r1, sp, #20
 80034f4:	4809      	ldr	r0, [pc, #36]	; (800351c <HAL_ADC_MspInit+0xac>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80034f6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034f8:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fa:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034fc:	f7fd fa80 	bl	8000a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003500:	a905      	add	r1, sp, #20
 8003502:	4807      	ldr	r0, [pc, #28]	; (8003520 <HAL_ADC_MspInit+0xb0>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003504:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003506:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003508:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800350a:	f7fd fa79 	bl	8000a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800350e:	b00b      	add	sp, #44	; 0x2c
 8003510:	bd30      	pop	{r4, r5, pc}
 8003512:	bf00      	nop
 8003514:	40012000 	.word	0x40012000
 8003518:	40020800 	.word	0x40020800
 800351c:	40020000 	.word	0x40020000
 8003520:	40020400 	.word	0x40020400

08003524 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003524:	b510      	push	{r4, lr}
 8003526:	4604      	mov	r4, r0
 8003528:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800352a:	2214      	movs	r2, #20
 800352c:	2100      	movs	r1, #0
 800352e:	a803      	add	r0, sp, #12
 8003530:	f000 f97f 	bl	8003832 <memset>
  if(hcan->Instance==CAN1)
 8003534:	6822      	ldr	r2, [r4, #0]
 8003536:	4b14      	ldr	r3, [pc, #80]	; (8003588 <HAL_CAN_MspInit+0x64>)
 8003538:	429a      	cmp	r2, r3
 800353a:	d123      	bne.n	8003584 <HAL_CAN_MspInit+0x60>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800353c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8003540:	2100      	movs	r1, #0
 8003542:	9101      	str	r1, [sp, #4]
 8003544:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003546:	4811      	ldr	r0, [pc, #68]	; (800358c <HAL_CAN_MspInit+0x68>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003548:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800354c:	641a      	str	r2, [r3, #64]	; 0x40
 800354e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003550:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8003554:	9201      	str	r2, [sp, #4]
 8003556:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003558:	9102      	str	r1, [sp, #8]
 800355a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800355c:	f042 0201 	orr.w	r2, r2, #1
 8003560:	631a      	str	r2, [r3, #48]	; 0x30
 8003562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	9302      	str	r3, [sp, #8]
 800356a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800356c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003570:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003572:	2302      	movs	r3, #2
 8003574:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003576:	2303      	movs	r3, #3
 8003578:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800357a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800357c:	2309      	movs	r3, #9
 800357e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003580:	f7fd fa3e 	bl	8000a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003584:	b008      	add	sp, #32
 8003586:	bd10      	pop	{r4, pc}
 8003588:	40006400 	.word	0x40006400
 800358c:	40020000 	.word	0x40020000

08003590 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8003590:	6803      	ldr	r3, [r0, #0]
 8003592:	4a19      	ldr	r2, [pc, #100]	; (80035f8 <HAL_TIM_PWM_MspInit+0x68>)
 8003594:	4293      	cmp	r3, r2
{
 8003596:	b084      	sub	sp, #16
  if(htim_pwm->Instance==TIM1)
 8003598:	d10d      	bne.n	80035b6 <HAL_TIM_PWM_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800359a:	2300      	movs	r3, #0
 800359c:	9301      	str	r3, [sp, #4]
 800359e:	4b17      	ldr	r3, [pc, #92]	; (80035fc <HAL_TIM_PWM_MspInit+0x6c>)
 80035a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035a2:	f042 0201 	orr.w	r2, r2, #1
 80035a6:	645a      	str	r2, [r3, #68]	; 0x44
 80035a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	9301      	str	r3, [sp, #4]
 80035b0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80035b2:	b004      	add	sp, #16
 80035b4:	4770      	bx	lr
  else if(htim_pwm->Instance==TIM2)
 80035b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ba:	d10c      	bne.n	80035d6 <HAL_TIM_PWM_MspInit+0x46>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035bc:	2300      	movs	r3, #0
 80035be:	9302      	str	r3, [sp, #8]
 80035c0:	4b0e      	ldr	r3, [pc, #56]	; (80035fc <HAL_TIM_PWM_MspInit+0x6c>)
 80035c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035c4:	f042 0201 	orr.w	r2, r2, #1
 80035c8:	641a      	str	r2, [r3, #64]	; 0x40
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	9302      	str	r3, [sp, #8]
 80035d2:	9b02      	ldr	r3, [sp, #8]
 80035d4:	e7ed      	b.n	80035b2 <HAL_TIM_PWM_MspInit+0x22>
  else if(htim_pwm->Instance==TIM3)
 80035d6:	4a0a      	ldr	r2, [pc, #40]	; (8003600 <HAL_TIM_PWM_MspInit+0x70>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d1ea      	bne.n	80035b2 <HAL_TIM_PWM_MspInit+0x22>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035dc:	2300      	movs	r3, #0
 80035de:	9303      	str	r3, [sp, #12]
 80035e0:	4b06      	ldr	r3, [pc, #24]	; (80035fc <HAL_TIM_PWM_MspInit+0x6c>)
 80035e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035e4:	f042 0202 	orr.w	r2, r2, #2
 80035e8:	641a      	str	r2, [r3, #64]	; 0x40
 80035ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	9303      	str	r3, [sp, #12]
 80035f2:	9b03      	ldr	r3, [sp, #12]
}
 80035f4:	e7dd      	b.n	80035b2 <HAL_TIM_PWM_MspInit+0x22>
 80035f6:	bf00      	nop
 80035f8:	40010000 	.word	0x40010000
 80035fc:	40023800 	.word	0x40023800
 8003600:	40000400 	.word	0x40000400

08003604 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003604:	b510      	push	{r4, lr}
 8003606:	4604      	mov	r4, r0
 8003608:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800360a:	2214      	movs	r2, #20
 800360c:	2100      	movs	r1, #0
 800360e:	a803      	add	r0, sp, #12
 8003610:	f000 f90f 	bl	8003832 <memset>
  if(htim->Instance==TIM1)
 8003614:	6823      	ldr	r3, [r4, #0]
 8003616:	4a22      	ldr	r2, [pc, #136]	; (80036a0 <HAL_TIM_MspPostInit+0x9c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d118      	bne.n	800364e <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800361c:	2300      	movs	r3, #0
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	4b20      	ldr	r3, [pc, #128]	; (80036a4 <HAL_TIM_MspPostInit+0xa0>)
 8003622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003624:	f042 0201 	orr.w	r2, r2, #1
 8003628:	631a      	str	r2, [r3, #48]	; 0x30
 800362a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	9b00      	ldr	r3, [sp, #0]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003634:	f44f 7380 	mov.w	r3, #256	; 0x100
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003638:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800363a:	2302      	movs	r3, #2
 800363c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800363e:	481a      	ldr	r0, [pc, #104]	; (80036a8 <HAL_TIM_MspPostInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003640:	2301      	movs	r3, #1
 8003642:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003644:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003646:	f7fd f9db 	bl	8000a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800364a:	b008      	add	sp, #32
 800364c:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM2)
 800364e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003652:	d10e      	bne.n	8003672 <HAL_TIM_MspPostInit+0x6e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003654:	2300      	movs	r3, #0
 8003656:	9301      	str	r3, [sp, #4]
 8003658:	4b12      	ldr	r3, [pc, #72]	; (80036a4 <HAL_TIM_MspPostInit+0xa0>)
 800365a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800365c:	f042 0201 	orr.w	r2, r2, #1
 8003660:	631a      	str	r2, [r3, #48]	; 0x30
 8003662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	9301      	str	r3, [sp, #4]
 800366a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800366c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003670:	e7e2      	b.n	8003638 <HAL_TIM_MspPostInit+0x34>
  else if(htim->Instance==TIM3)
 8003672:	4a0e      	ldr	r2, [pc, #56]	; (80036ac <HAL_TIM_MspPostInit+0xa8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d1e8      	bne.n	800364a <HAL_TIM_MspPostInit+0x46>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003678:	2300      	movs	r3, #0
 800367a:	9302      	str	r3, [sp, #8]
 800367c:	4b09      	ldr	r3, [pc, #36]	; (80036a4 <HAL_TIM_MspPostInit+0xa0>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800367e:	480c      	ldr	r0, [pc, #48]	; (80036b0 <HAL_TIM_MspPostInit+0xac>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003682:	f042 0204 	orr.w	r2, r2, #4
 8003686:	631a      	str	r2, [r3, #48]	; 0x30
 8003688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368a:	f003 0304 	and.w	r3, r3, #4
 800368e:	9302      	str	r3, [sp, #8]
 8003690:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003692:	2340      	movs	r3, #64	; 0x40
 8003694:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003696:	2302      	movs	r3, #2
 8003698:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800369a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800369c:	a903      	add	r1, sp, #12
 800369e:	e7d2      	b.n	8003646 <HAL_TIM_MspPostInit+0x42>
 80036a0:	40010000 	.word	0x40010000
 80036a4:	40023800 	.word	0x40023800
 80036a8:	40020000 	.word	0x40020000
 80036ac:	40000400 	.word	0x40000400
 80036b0:	40020800 	.word	0x40020800

080036b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036b4:	b510      	push	{r4, lr}
 80036b6:	4604      	mov	r4, r0
 80036b8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036ba:	2214      	movs	r2, #20
 80036bc:	2100      	movs	r1, #0
 80036be:	a803      	add	r0, sp, #12
 80036c0:	f000 f8b7 	bl	8003832 <memset>
  if(huart->Instance==UART4)
 80036c4:	6822      	ldr	r2, [r4, #0]
 80036c6:	4b15      	ldr	r3, [pc, #84]	; (800371c <HAL_UART_MspInit+0x68>)
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d125      	bne.n	8003718 <HAL_UART_MspInit+0x64>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80036cc:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 80036d0:	2100      	movs	r1, #0
 80036d2:	9101      	str	r1, [sp, #4]
 80036d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036d6:	4812      	ldr	r0, [pc, #72]	; (8003720 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_UART4_CLK_ENABLE();
 80036d8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80036dc:	641a      	str	r2, [r3, #64]	; 0x40
 80036de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036e0:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80036e4:	9201      	str	r2, [sp, #4]
 80036e6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036e8:	9102      	str	r1, [sp, #8]
 80036ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ec:	f042 0204 	orr.w	r2, r2, #4
 80036f0:	631a      	str	r2, [r3, #48]	; 0x30
 80036f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	9302      	str	r3, [sp, #8]
 80036fa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80036fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003700:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003702:	2302      	movs	r3, #2
 8003704:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003706:	2301      	movs	r3, #1
 8003708:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800370a:	2303      	movs	r3, #3
 800370c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800370e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003710:	2308      	movs	r3, #8
 8003712:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003714:	f7fd f974 	bl	8000a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8003718:	b008      	add	sp, #32
 800371a:	bd10      	pop	{r4, pc}
 800371c:	40004c00 	.word	0x40004c00
 8003720:	40020800 	.word	0x40020800

08003724 <NMI_Handler>:
 8003724:	4770      	bx	lr

08003726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003726:	e7fe      	b.n	8003726 <HardFault_Handler>

08003728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003728:	e7fe      	b.n	8003728 <MemManage_Handler>

0800372a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800372a:	e7fe      	b.n	800372a <BusFault_Handler>

0800372c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800372c:	e7fe      	b.n	800372c <UsageFault_Handler>

0800372e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800372e:	4770      	bx	lr

08003730 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003730:	f7fc bf34 	b.w	800059c <HAL_IncTick>

08003734 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003734:	490f      	ldr	r1, [pc, #60]	; (8003774 <SystemInit+0x40>)
 8003736:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800373a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800373e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003742:	4b0d      	ldr	r3, [pc, #52]	; (8003778 <SystemInit+0x44>)
 8003744:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003746:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003748:	f042 0201 	orr.w	r2, r2, #1
 800374c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800374e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003756:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800375a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800375c:	4a07      	ldr	r2, [pc, #28]	; (800377c <SystemInit+0x48>)
 800375e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003766:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003768:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800376a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800376e:	608b      	str	r3, [r1, #8]
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	e000ed00 	.word	0xe000ed00
 8003778:	40023800 	.word	0x40023800
 800377c:	24003010 	.word	0x24003010

08003780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003784:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003786:	e003      	b.n	8003790 <LoopCopyDataInit>

08003788 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003788:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800378a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800378c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800378e:	3104      	adds	r1, #4

08003790 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003790:	480b      	ldr	r0, [pc, #44]	; (80037c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003792:	4b0c      	ldr	r3, [pc, #48]	; (80037c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003794:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003796:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003798:	d3f6      	bcc.n	8003788 <CopyDataInit>
  ldr  r2, =_sbss
 800379a:	4a0b      	ldr	r2, [pc, #44]	; (80037c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800379c:	e002      	b.n	80037a4 <LoopFillZerobss>

0800379e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800379e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80037a0:	f842 3b04 	str.w	r3, [r2], #4

080037a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80037a4:	4b09      	ldr	r3, [pc, #36]	; (80037cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80037a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80037a8:	d3f9      	bcc.n	800379e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80037aa:	f7ff ffc3 	bl	8003734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037ae:	f000 f811 	bl	80037d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037b2:	f7ff fd17 	bl	80031e4 <main>
  bx  lr    
 80037b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80037b8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80037bc:	080038a4 	.word	0x080038a4
  ldr  r0, =_sdata
 80037c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80037c4:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80037c8:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80037cc:	20004aa8 	.word	0x20004aa8

080037d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037d0:	e7fe      	b.n	80037d0 <ADC_IRQHandler>
	...

080037d4 <__libc_init_array>:
 80037d4:	b570      	push	{r4, r5, r6, lr}
 80037d6:	4e0d      	ldr	r6, [pc, #52]	; (800380c <__libc_init_array+0x38>)
 80037d8:	4c0d      	ldr	r4, [pc, #52]	; (8003810 <__libc_init_array+0x3c>)
 80037da:	1ba4      	subs	r4, r4, r6
 80037dc:	10a4      	asrs	r4, r4, #2
 80037de:	2500      	movs	r5, #0
 80037e0:	42a5      	cmp	r5, r4
 80037e2:	d109      	bne.n	80037f8 <__libc_init_array+0x24>
 80037e4:	4e0b      	ldr	r6, [pc, #44]	; (8003814 <__libc_init_array+0x40>)
 80037e6:	4c0c      	ldr	r4, [pc, #48]	; (8003818 <__libc_init_array+0x44>)
 80037e8:	f000 f82c 	bl	8003844 <_init>
 80037ec:	1ba4      	subs	r4, r4, r6
 80037ee:	10a4      	asrs	r4, r4, #2
 80037f0:	2500      	movs	r5, #0
 80037f2:	42a5      	cmp	r5, r4
 80037f4:	d105      	bne.n	8003802 <__libc_init_array+0x2e>
 80037f6:	bd70      	pop	{r4, r5, r6, pc}
 80037f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037fc:	4798      	blx	r3
 80037fe:	3501      	adds	r5, #1
 8003800:	e7ee      	b.n	80037e0 <__libc_init_array+0xc>
 8003802:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003806:	4798      	blx	r3
 8003808:	3501      	adds	r5, #1
 800380a:	e7f2      	b.n	80037f2 <__libc_init_array+0x1e>
 800380c:	0800389c 	.word	0x0800389c
 8003810:	0800389c 	.word	0x0800389c
 8003814:	0800389c 	.word	0x0800389c
 8003818:	080038a0 	.word	0x080038a0

0800381c <memcpy>:
 800381c:	b510      	push	{r4, lr}
 800381e:	1e43      	subs	r3, r0, #1
 8003820:	440a      	add	r2, r1
 8003822:	4291      	cmp	r1, r2
 8003824:	d100      	bne.n	8003828 <memcpy+0xc>
 8003826:	bd10      	pop	{r4, pc}
 8003828:	f811 4b01 	ldrb.w	r4, [r1], #1
 800382c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003830:	e7f7      	b.n	8003822 <memcpy+0x6>

08003832 <memset>:
 8003832:	4402      	add	r2, r0
 8003834:	4603      	mov	r3, r0
 8003836:	4293      	cmp	r3, r2
 8003838:	d100      	bne.n	800383c <memset+0xa>
 800383a:	4770      	bx	lr
 800383c:	f803 1b01 	strb.w	r1, [r3], #1
 8003840:	e7f9      	b.n	8003836 <memset+0x4>
	...

08003844 <_init>:
 8003844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003846:	bf00      	nop
 8003848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800384a:	bc08      	pop	{r3}
 800384c:	469e      	mov	lr, r3
 800384e:	4770      	bx	lr

08003850 <_fini>:
 8003850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003852:	bf00      	nop
 8003854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003856:	bc08      	pop	{r3}
 8003858:	469e      	mov	lr, r3
 800385a:	4770      	bx	lr
